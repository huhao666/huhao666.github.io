{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/tou.jpg","path":"images/tou.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/==的隐式转换.md","hash":"8baf088b3c1c74527048b78c7a09cb8e9f2d162f","modified":1616996659151},{"_id":"source/_posts/SPA的前世今生.md","hash":"0b73f0e51008a9a4c7b49afe13cecd2d095eefd4","modified":1616996659153},{"_id":"source/_posts/Fetch与Promise.md","hash":"db86c49317a74597c1a6ddbe13b1d63d768800e0","modified":1616996659152},{"_id":"source/_posts/Vue中使用mixin.md","hash":"3518cc79262a1c39df149baa6ce2f162e25ba1dc","modified":1616996659153},{"_id":"source/_posts/css3手写菜单图标变成X号.md","hash":"7c03179208a91d8770bc03a108fbf5a006e7be13","modified":1580735886398},{"_id":"source/_posts/Vue写tab选项卡.md","hash":"d879e46d6f9eff999f1ea4bd1a58dd36c78d6b43","modified":1616996659154},{"_id":"source/_posts/gulp入门（一）.md","hash":"91458981746d178ac70ef569bf138cefde1979c4","modified":1616996659156},{"_id":"source/_posts/gulp入门（三）.md","hash":"8dc2ba76e05646aaa4667545c86bddefee455254","modified":1616996659156},{"_id":"source/_posts/for循环创建多个elementUI表单遇到的问题.md","hash":"2b3a0d2c82c40fc8067fbdd07f1a2d711b5832ca","modified":1616996659155},{"_id":"source/_posts/gulp入门（二）.md","hash":"da383c83ef4b18f61d2e774497549214141e92e5","modified":1616996659157},{"_id":"source/_posts/javascript中的Map.md","hash":"fca60fea114aacfd5b1d9068f9ff26112ee157a6","modified":1568798505122},{"_id":"source/_posts/javascript中的面向对象开发.md","hash":"183341d224aae964d6a98a8a7e4d011fcffe1696","modified":1616996659159},{"_id":"source/_posts/javascript垃圾回收机制.md","hash":"b8fb93ae09e31dd51c210e40dd4989542594a0c4","modified":1616996659160},{"_id":"source/_posts/vue双向数据绑定原理.md","hash":"7e961eb23dfc02286e16e5be7f1e55ed0a33b10c","modified":1616996659161},{"_id":"source/_posts/win10安装mysql数据库.md","hash":"3f4ad82e403eef0a91eaf36010423368c6cef98d","modified":1575275393092},{"_id":"source/_posts/使用console进行-性能测试-和-计算代码运行时间.md","hash":"94f67a212980221bff8e35ab7057e7b2a1d3d315","modified":1570777860817},{"_id":"source/_posts/关于元素在网页中的位置总结.md","hash":"36384552946ce6481c22a9c91ab8e015b9ffba7a","modified":1580972872498},{"_id":"source/_posts/如何在nuxt中使用Vuex做登陆管理.md","hash":"5b451ebcb9938580eb4af318c9f796ce5e8773b9","modified":1616996659161},{"_id":"source/_posts/常用CSS.md","hash":"debf9fc7c8168bbe30980865263fb3a7c5aa4493","modified":1616996659162},{"_id":"source/_posts/修改img的src属性刷新图片时，图片地址相同图片无变化的问题.md","hash":"e71dfd8466aa4fb9cdf26298a004a8bb2e5c0023","modified":1616999074738},{"_id":"source/categories/index.md","hash":"49015652737eb477b9b6781d17f51972dbda3f59","modified":1616996659163},{"_id":"source/_posts/网页禁止审查及一些简单禁止用户对页面操作.md","hash":"aa43c9fc8180e7402dd51169653b80e4002bca19","modified":1616997303006},{"_id":"source/images/favicon.ico","hash":"7e3d33f03e444045c4d611ab6df575c6fdd65d69","modified":1616996659164},{"_id":"source/images/tou.jpg","hash":"f9b6df945f8c7f6ddc81287053c43b3a861d9047","modified":1616996659165},{"_id":"source/tags/index.md","hash":"0858e99660367272f233f5dd3deba3efd25e361d","modified":1616996659166},{"_id":"public/content.json","hash":"7af64d055f7155f10fff45317288af7538520b53","modified":1617000754462},{"_id":"public/categories/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754470},{"_id":"public/tags/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754470},{"_id":"public/2021/03/05/网页禁止审查及一些简单禁止用户对页面操作/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754471},{"_id":"public/2020/02/17/javascript中的面向对象开发/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754471},{"_id":"public/2020/02/04/关于元素在网页中的位置总结/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754471},{"_id":"public/2020/01/19/css3手写菜单图标变成X号/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754471},{"_id":"public/2020/01/07/Fetch与Promise/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754471},{"_id":"public/2020/01/03/Vue中使用mixin/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754471},{"_id":"public/2019/12/18/修改img的src属性刷新图片时，图片地址相同图片无变化的问题/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754472},{"_id":"public/2019/12/17/Vue写tab选项卡/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754472},{"_id":"public/2019/12/11/for循环创建多个elementUI表单遇到的问题/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754472},{"_id":"public/2019/12/06/常用CSS/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754472},{"_id":"public/2019/11/28/win10安装mysql数据库/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754472},{"_id":"public/2019/11/13/gulp入门（三）/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754472},{"_id":"public/2019/11/11/gulp入门（二）/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754472},{"_id":"public/2019/11/07/gulp入门（一）/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754473},{"_id":"public/2019/11/04/如何在nuxt中使用Vuex做登陆管理/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754473},{"_id":"public/2019/10/30/vue双向数据绑定原理/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754473},{"_id":"public/2019/10/11/SPA的前世今生/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754473},{"_id":"public/2019/09/17/使用console进行-性能测试-和-计算代码运行时间/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754473},{"_id":"public/2019/08/26/javascript中的Map/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754474},{"_id":"public/2019/07/01/javascript垃圾回收机制/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754474},{"_id":"public/2019/04/28/==的隐式转换/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754474},{"_id":"public/categories/JavaScript/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754474},{"_id":"public/categories/js/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754474},{"_id":"public/categories/vue/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754474},{"_id":"public/categories/CSS/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754474},{"_id":"public/categories/gulp/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754474},{"_id":"public/categories/elementUI/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754475},{"_id":"public/categories/mysql/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754475},{"_id":"public/categories/JavaScript/vue/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754475},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754475},{"_id":"public/archives/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754475},{"_id":"public/archives/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754475},{"_id":"public/archives/2019/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754475},{"_id":"public/archives/2019/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754475},{"_id":"public/archives/2019/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754475},{"_id":"public/archives/2019/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754475},{"_id":"public/archives/2019/08/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754475},{"_id":"public/archives/2019/09/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754475},{"_id":"public/archives/2019/10/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754476},{"_id":"public/archives/2019/11/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754476},{"_id":"public/archives/2019/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754476},{"_id":"public/archives/2020/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754476},{"_id":"public/archives/2020/01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754476},{"_id":"public/archives/2020/02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754476},{"_id":"public/archives/2021/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754476},{"_id":"public/archives/2021/03/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754476},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754476},{"_id":"public/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754476},{"_id":"public/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754476},{"_id":"public/tags/js基础/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754477},{"_id":"public/tags/js/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754477},{"_id":"public/tags/vue/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754477},{"_id":"public/tags/CSS/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754477},{"_id":"public/tags/gulp/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754478},{"_id":"public/tags/elementUI/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754478},{"_id":"public/tags/mysql/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754478},{"_id":"public/tags/性能测试/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754478},{"_id":"public/tags/SSR/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754478},{"_id":"public/tags/Nuxt/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617000754478},{"_id":"public/images/favicon.ico","hash":"7e3d33f03e444045c4d611ab6df575c6fdd65d69","modified":1617000754490},{"_id":"public/images/tou.jpg","hash":"f9b6df945f8c7f6ddc81287053c43b3a861d9047","modified":1617000754493}],"Category":[{"name":"JavaScript","_id":"ckmu8hyp20002y4tz6xftfx41"},{"name":"js","_id":"ckmu8hypb0007y4tze67e1o6i"},{"name":"vue","_id":"ckmu8hyph000dy4tz5z0p0gdj"},{"name":"CSS","_id":"ckmu8hypn000jy4tz814mz906"},{"name":"gulp","_id":"ckmu8hyq1000vy4tz12xp4tdf"},{"name":"elementUI","_id":"ckmu8hyqf001dy4tz5ugq5t82"},{"name":"mysql","_id":"ckmu8hyqq001ry4tz8adwd4pc"},{"name":"vue","parent":"ckmu8hyp20002y4tz6xftfx41","_id":"ckmu8hyqt001xy4tznfrllm8n"}],"Data":[],"Page":[{"title":"categories","date":"2019-09-03T07:58:25.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-09-03 15:58:25\ntype: \"categories\"\ncomments: false\n---\n","updated":"2021-03-29T05:44:19.163Z","path":"categories/index.html","layout":"page","_id":"ckmu8hyr2002ay4tzl7a8lrsr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-08-29T09:09:57.000Z","slug":"tags","noDate":"true","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-08-29 17:09:57\nslug: tags \nnoDate: \"true\"\ncomments: false\n---\n","updated":"2021-03-29T05:44:19.166Z","path":"tags/index.html","layout":"page","_id":"ckmu8hyr9002ey4tzxc89mmhl","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"SPA的前世今生","date":"2019-10-11T07:24:55.000Z","author":"胡豪","_content":"\n## 前言\n\nSPA(Single Page Application)，即单页应用，想必现在的前端对其早已耳熟能详，今天就来说道说道，SPA 的前世今生。\n\n## 多页面应用（MultiPage Application，MPA）\n\n为什么先说多页面，因为传统网站都是多页面的，从大学第一次做网页，到工作使用 JQ 库，一个个 html 页面拼凑而成的网站都是多页面的。<br>\n每一次页面跳转的时候，后台服务器都会给返回一个新的 html 文档，这种类型的网站也就是多页网站，也叫做多页应用。<br>\n多页面跳转刷新所有资源，每个公共资源(js、css 等)需选择性重新加载。<br>\n\n![多页面应用](http://tva3.sinaimg.cn/large/b535b7d3ly1g874l3qw95j20j7096dio.jpg)\n\n页面结构如图：\n![多页面应用结构视图](http://tva3.sinaimg.cn/large/b535b7d3ly1g8747ayh6oj20go089gld.jpg)\n\n### 为什么多页应用的首屏时间快？\n\n首屏时间叫做页面首个屏幕的内容展现的时间，当我们访问页面的时候，服务器返回一个 html，页面就会展示出来，这个过程只经历了一个 HTTP 请求，所以页面展示的速度非常快。\n\n### 为什么搜索引擎优化效果好（SEO）？\n\n搜索引擎在做网页排名的时候，要根据网页内容才能给网页权重，来进行网页的排名。搜索引擎是可以识别 html 内容的，而我们每个页面所有的内容都放在 Html 中，所以这种多页应用，seo 排名效果好。\n\n### 但是它也有缺点，就是切换慢\n\n因为每次跳转都需要发出一个 http 请求，如果网络比较慢，在页面之间来回跳转时，就会发现明显的卡顿。  \n新的需求促进新的技术诞生，随着业务量变大功能的复杂，前端对页面性能的要求越来越高，随之而来的就是单页面的应用。\n\n## 单页应用（SinglePage Web Application，SPA）\n\n第一次进入页面的时候会请求一个 html 文件，刷新清除一下。页面切换，也不是传统的请求另一个页面的 html,而是通过路由，改变组件，此时路径也相应变化，但是并没有新的 html 文件请求，页面内容也变化了。\n原理是：JS 会感知到 url 的变化，通过这一点，可以用 js 动态的将当前页面的内容清除掉，然后将下一个页面的内容挂载到当前页面上，这个时候的路由不是后端来做了，而是前端来做，判断页面到底是显示哪个组件，清除不需要的，显示需要的组件。这种过程就是单页应用，每次跳转的时候不需要再请求 html 文件了。\n\n![单页面应用](http://tva4.sinaimg.cn/large/b535b7d3ly1g874l3vsyyj20ji08i0vd.jpg)\n\n页面结构如图：\n![单页面应用结构图](http://tvax4.sinaimg.cn/large/b535b7d3ly1g878knhv7vj20go08v0se.jpg)\n\n### 为什么页面切换快？\n\n页面每次切换跳转时，并不需要做 html 文件的请求，这样就节约了很多 http 发送时延，我们在切换页面的时候速度很快。\n\n### 缺点：首屏时间慢，SEO 差\n\n单页应用的首屏时间慢，首屏时需要请求一次 html，同时还要发送一次 js 请求，两次请求回来了，首屏才会展示出来。相对于多页应用，首屏时间慢。\nSEO 效果差，因为搜索引擎只认识 html 里的内容，不认识 js 的内容，而单页应用的内容都是靠 js 渲染生成出来的，搜索引擎不识别这部分内容，也就不会给一个好的排名，会导致单页应用做出来的网页在百度和谷歌上的排名差。\n\n### 优缺点，必有解决的对策\n\n比如说服务器端渲染技术(如 SSR)可以解决 SEO 问题，通过这些技术可以完美解决这些缺点，解决完这些问题，实际上单页面应用对于前端来说是非常完美的页面开发解决方案。\n\n\n## 具体对比分析：\n\n<table>\n  <tr>\n    <th> </th>\n    <th>多页应用模式MPA</th>\n    <th>单页应用模式SPA</th>\n  </tr>\n  <tr>\n    <td>组成</td> \n    <td>多个完整页面构成</td>\n    <td>一个外壳页面和多个页面片段组成</td>\n  </tr>\n  <tr>\n    <td>资源共用(css,js)</td>\n    <td>不共用，每个页面都需要加载</td>\n    <td>共用，只需在外壳部分加载</td> \n  </tr>\n  <tr>\n    <td>刷新方式</td>\n    <td>整页刷新</td>\n    <td>页面局部刷新或更改</td> \n  </tr>\n <tr>\n    <td>URL模式</td>\n    <td>http://xxx/page1.html 和 http://xxx/page2.html</td>\n    <td>http://xxx/shell.html#page1 和 http://xxx/shell.html#page2</td> \n  </tr>\n  <tr>\n    <td>用户体验</td>\n    <td>页面间切换加载慢，不流畅，用户体验差，特别是在移动设备上</td>\n    <td>页面片段间的切换快，用户体验好，包括在移动设备上</td> \n  </tr>\n  <tr>\n    <td>能否实现转场动画</td>\n    <td>无法实现</td>\n    <td>容易实现（手机app动效）</td> \n  </tr>\n  <tr>\n    <td>页面间传递数据</td>\n    <td>依赖URL、cookie或者localstorage，实现麻烦</td>\n    <td>因为在一个页面内，页面间传递数据很容易实现(父子之间传值，或vuex或storage之类)</td> \n  </tr>\n  <tr>\n    <td>搜索引擎优化（SEO）</td>\n    <td>可以直接做</td>\n    <td>不利于SEO检索，可利用SSR来实现</td> \n  </tr>\n  <tr>\n    <td>特别适用的范围</td>\n    <td>需要对搜索引擎友好的网站</td>\n    <td>对体验要求高的应用，特别是移动应用 购物网站</td> \n  </tr>\n</table>\n","source":"_posts/SPA的前世今生.md","raw":"---\ntitle: SPA的前世今生\ndate: 2019-10-11 15:24:55\nauthor: 胡豪\ncategories:\n  - JavaScript\ntags:\n  - js基础\n---\n\n## 前言\n\nSPA(Single Page Application)，即单页应用，想必现在的前端对其早已耳熟能详，今天就来说道说道，SPA 的前世今生。\n\n## 多页面应用（MultiPage Application，MPA）\n\n为什么先说多页面，因为传统网站都是多页面的，从大学第一次做网页，到工作使用 JQ 库，一个个 html 页面拼凑而成的网站都是多页面的。<br>\n每一次页面跳转的时候，后台服务器都会给返回一个新的 html 文档，这种类型的网站也就是多页网站，也叫做多页应用。<br>\n多页面跳转刷新所有资源，每个公共资源(js、css 等)需选择性重新加载。<br>\n\n![多页面应用](http://tva3.sinaimg.cn/large/b535b7d3ly1g874l3qw95j20j7096dio.jpg)\n\n页面结构如图：\n![多页面应用结构视图](http://tva3.sinaimg.cn/large/b535b7d3ly1g8747ayh6oj20go089gld.jpg)\n\n### 为什么多页应用的首屏时间快？\n\n首屏时间叫做页面首个屏幕的内容展现的时间，当我们访问页面的时候，服务器返回一个 html，页面就会展示出来，这个过程只经历了一个 HTTP 请求，所以页面展示的速度非常快。\n\n### 为什么搜索引擎优化效果好（SEO）？\n\n搜索引擎在做网页排名的时候，要根据网页内容才能给网页权重，来进行网页的排名。搜索引擎是可以识别 html 内容的，而我们每个页面所有的内容都放在 Html 中，所以这种多页应用，seo 排名效果好。\n\n### 但是它也有缺点，就是切换慢\n\n因为每次跳转都需要发出一个 http 请求，如果网络比较慢，在页面之间来回跳转时，就会发现明显的卡顿。  \n新的需求促进新的技术诞生，随着业务量变大功能的复杂，前端对页面性能的要求越来越高，随之而来的就是单页面的应用。\n\n## 单页应用（SinglePage Web Application，SPA）\n\n第一次进入页面的时候会请求一个 html 文件，刷新清除一下。页面切换，也不是传统的请求另一个页面的 html,而是通过路由，改变组件，此时路径也相应变化，但是并没有新的 html 文件请求，页面内容也变化了。\n原理是：JS 会感知到 url 的变化，通过这一点，可以用 js 动态的将当前页面的内容清除掉，然后将下一个页面的内容挂载到当前页面上，这个时候的路由不是后端来做了，而是前端来做，判断页面到底是显示哪个组件，清除不需要的，显示需要的组件。这种过程就是单页应用，每次跳转的时候不需要再请求 html 文件了。\n\n![单页面应用](http://tva4.sinaimg.cn/large/b535b7d3ly1g874l3vsyyj20ji08i0vd.jpg)\n\n页面结构如图：\n![单页面应用结构图](http://tvax4.sinaimg.cn/large/b535b7d3ly1g878knhv7vj20go08v0se.jpg)\n\n### 为什么页面切换快？\n\n页面每次切换跳转时，并不需要做 html 文件的请求，这样就节约了很多 http 发送时延，我们在切换页面的时候速度很快。\n\n### 缺点：首屏时间慢，SEO 差\n\n单页应用的首屏时间慢，首屏时需要请求一次 html，同时还要发送一次 js 请求，两次请求回来了，首屏才会展示出来。相对于多页应用，首屏时间慢。\nSEO 效果差，因为搜索引擎只认识 html 里的内容，不认识 js 的内容，而单页应用的内容都是靠 js 渲染生成出来的，搜索引擎不识别这部分内容，也就不会给一个好的排名，会导致单页应用做出来的网页在百度和谷歌上的排名差。\n\n### 优缺点，必有解决的对策\n\n比如说服务器端渲染技术(如 SSR)可以解决 SEO 问题，通过这些技术可以完美解决这些缺点，解决完这些问题，实际上单页面应用对于前端来说是非常完美的页面开发解决方案。\n\n\n## 具体对比分析：\n\n<table>\n  <tr>\n    <th> </th>\n    <th>多页应用模式MPA</th>\n    <th>单页应用模式SPA</th>\n  </tr>\n  <tr>\n    <td>组成</td> \n    <td>多个完整页面构成</td>\n    <td>一个外壳页面和多个页面片段组成</td>\n  </tr>\n  <tr>\n    <td>资源共用(css,js)</td>\n    <td>不共用，每个页面都需要加载</td>\n    <td>共用，只需在外壳部分加载</td> \n  </tr>\n  <tr>\n    <td>刷新方式</td>\n    <td>整页刷新</td>\n    <td>页面局部刷新或更改</td> \n  </tr>\n <tr>\n    <td>URL模式</td>\n    <td>http://xxx/page1.html 和 http://xxx/page2.html</td>\n    <td>http://xxx/shell.html#page1 和 http://xxx/shell.html#page2</td> \n  </tr>\n  <tr>\n    <td>用户体验</td>\n    <td>页面间切换加载慢，不流畅，用户体验差，特别是在移动设备上</td>\n    <td>页面片段间的切换快，用户体验好，包括在移动设备上</td> \n  </tr>\n  <tr>\n    <td>能否实现转场动画</td>\n    <td>无法实现</td>\n    <td>容易实现（手机app动效）</td> \n  </tr>\n  <tr>\n    <td>页面间传递数据</td>\n    <td>依赖URL、cookie或者localstorage，实现麻烦</td>\n    <td>因为在一个页面内，页面间传递数据很容易实现(父子之间传值，或vuex或storage之类)</td> \n  </tr>\n  <tr>\n    <td>搜索引擎优化（SEO）</td>\n    <td>可以直接做</td>\n    <td>不利于SEO检索，可利用SSR来实现</td> \n  </tr>\n  <tr>\n    <td>特别适用的范围</td>\n    <td>需要对搜索引擎友好的网站</td>\n    <td>对体验要求高的应用，特别是移动应用 购物网站</td> \n  </tr>\n</table>\n","slug":"SPA的前世今生","published":1,"updated":"2021-03-29T05:44:19.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hyot0000y4tzwx3lfnqg","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>SPA(Single Page Application)，即单页应用，想必现在的前端对其早已耳熟能详，今天就来说道说道，SPA 的前世今生。</p>\n<h2 id=\"多页面应用（MultiPage-Application，MPA）\"><a href=\"#多页面应用（MultiPage-Application，MPA）\" class=\"headerlink\" title=\"多页面应用（MultiPage Application，MPA）\"></a>多页面应用（MultiPage Application，MPA）</h2><p>为什么先说多页面，因为传统网站都是多页面的，从大学第一次做网页，到工作使用 JQ 库，一个个 html 页面拼凑而成的网站都是多页面的。<br><br>每一次页面跳转的时候，后台服务器都会给返回一个新的 html 文档，这种类型的网站也就是多页网站，也叫做多页应用。<br><br>多页面跳转刷新所有资源，每个公共资源(js、css 等)需选择性重新加载。<br></p>\n<p><img src=\"http://tva3.sinaimg.cn/large/b535b7d3ly1g874l3qw95j20j7096dio.jpg\" alt=\"多页面应用\"></p>\n<p>页面结构如图：<br><img src=\"http://tva3.sinaimg.cn/large/b535b7d3ly1g8747ayh6oj20go089gld.jpg\" alt=\"多页面应用结构视图\"></p>\n<h3 id=\"为什么多页应用的首屏时间快？\"><a href=\"#为什么多页应用的首屏时间快？\" class=\"headerlink\" title=\"为什么多页应用的首屏时间快？\"></a>为什么多页应用的首屏时间快？</h3><p>首屏时间叫做页面首个屏幕的内容展现的时间，当我们访问页面的时候，服务器返回一个 html，页面就会展示出来，这个过程只经历了一个 HTTP 请求，所以页面展示的速度非常快。</p>\n<h3 id=\"为什么搜索引擎优化效果好（SEO）？\"><a href=\"#为什么搜索引擎优化效果好（SEO）？\" class=\"headerlink\" title=\"为什么搜索引擎优化效果好（SEO）？\"></a>为什么搜索引擎优化效果好（SEO）？</h3><p>搜索引擎在做网页排名的时候，要根据网页内容才能给网页权重，来进行网页的排名。搜索引擎是可以识别 html 内容的，而我们每个页面所有的内容都放在 Html 中，所以这种多页应用，seo 排名效果好。</p>\n<h3 id=\"但是它也有缺点，就是切换慢\"><a href=\"#但是它也有缺点，就是切换慢\" class=\"headerlink\" title=\"但是它也有缺点，就是切换慢\"></a>但是它也有缺点，就是切换慢</h3><p>因为每次跳转都需要发出一个 http 请求，如果网络比较慢，在页面之间来回跳转时，就会发现明显的卡顿。<br>新的需求促进新的技术诞生，随着业务量变大功能的复杂，前端对页面性能的要求越来越高，随之而来的就是单页面的应用。</p>\n<h2 id=\"单页应用（SinglePage-Web-Application，SPA）\"><a href=\"#单页应用（SinglePage-Web-Application，SPA）\" class=\"headerlink\" title=\"单页应用（SinglePage Web Application，SPA）\"></a>单页应用（SinglePage Web Application，SPA）</h2><p>第一次进入页面的时候会请求一个 html 文件，刷新清除一下。页面切换，也不是传统的请求另一个页面的 html,而是通过路由，改变组件，此时路径也相应变化，但是并没有新的 html 文件请求，页面内容也变化了。<br>原理是：JS 会感知到 url 的变化，通过这一点，可以用 js 动态的将当前页面的内容清除掉，然后将下一个页面的内容挂载到当前页面上，这个时候的路由不是后端来做了，而是前端来做，判断页面到底是显示哪个组件，清除不需要的，显示需要的组件。这种过程就是单页应用，每次跳转的时候不需要再请求 html 文件了。</p>\n<p><img src=\"http://tva4.sinaimg.cn/large/b535b7d3ly1g874l3vsyyj20ji08i0vd.jpg\" alt=\"单页面应用\"></p>\n<p>页面结构如图：<br><img src=\"http://tvax4.sinaimg.cn/large/b535b7d3ly1g878knhv7vj20go08v0se.jpg\" alt=\"单页面应用结构图\"></p>\n<h3 id=\"为什么页面切换快？\"><a href=\"#为什么页面切换快？\" class=\"headerlink\" title=\"为什么页面切换快？\"></a>为什么页面切换快？</h3><p>页面每次切换跳转时，并不需要做 html 文件的请求，这样就节约了很多 http 发送时延，我们在切换页面的时候速度很快。</p>\n<h3 id=\"缺点：首屏时间慢，SEO-差\"><a href=\"#缺点：首屏时间慢，SEO-差\" class=\"headerlink\" title=\"缺点：首屏时间慢，SEO 差\"></a>缺点：首屏时间慢，SEO 差</h3><p>单页应用的首屏时间慢，首屏时需要请求一次 html，同时还要发送一次 js 请求，两次请求回来了，首屏才会展示出来。相对于多页应用，首屏时间慢。<br>SEO 效果差，因为搜索引擎只认识 html 里的内容，不认识 js 的内容，而单页应用的内容都是靠 js 渲染生成出来的，搜索引擎不识别这部分内容，也就不会给一个好的排名，会导致单页应用做出来的网页在百度和谷歌上的排名差。</p>\n<h3 id=\"优缺点，必有解决的对策\"><a href=\"#优缺点，必有解决的对策\" class=\"headerlink\" title=\"优缺点，必有解决的对策\"></a>优缺点，必有解决的对策</h3><p>比如说服务器端渲染技术(如 SSR)可以解决 SEO 问题，通过这些技术可以完美解决这些缺点，解决完这些问题，实际上单页面应用对于前端来说是非常完美的页面开发解决方案。</p>\n<h2 id=\"具体对比分析：\"><a href=\"#具体对比分析：\" class=\"headerlink\" title=\"具体对比分析：\"></a>具体对比分析：</h2><table><br>  <tr><br>    <th> </th><br>    <th>多页应用模式MPA</th><br>    <th>单页应用模式SPA</th><br>  </tr><br>  <tr><br>    <td>组成</td><br>    <td>多个完整页面构成</td><br>    <td>一个外壳页面和多个页面片段组成</td><br>  </tr><br>  <tr><br>    <td>资源共用(css,js)</td><br>    <td>不共用，每个页面都需要加载</td><br>    <td>共用，只需在外壳部分加载</td><br>  </tr><br>  <tr><br>    <td>刷新方式</td><br>    <td>整页刷新</td><br>    <td>页面局部刷新或更改</td><br>  </tr><br> <tr><br>    <td>URL模式</td><br>    <td><a href=\"http://xxx/page1.html\" target=\"_blank\" rel=\"noopener\">http://xxx/page1.html</a> 和 <a href=\"http://xxx/page2.html\" target=\"_blank\" rel=\"noopener\">http://xxx/page2.html</a></td><br>    <td><a href=\"http://xxx/shell.html#page1\" target=\"_blank\" rel=\"noopener\">http://xxx/shell.html#page1</a> 和 <a href=\"http://xxx/shell.html#page2\" target=\"_blank\" rel=\"noopener\">http://xxx/shell.html#page2</a></td><br>  </tr><br>  <tr><br>    <td>用户体验</td><br>    <td>页面间切换加载慢，不流畅，用户体验差，特别是在移动设备上</td><br>    <td>页面片段间的切换快，用户体验好，包括在移动设备上</td><br>  </tr><br>  <tr><br>    <td>能否实现转场动画</td><br>    <td>无法实现</td><br>    <td>容易实现（手机app动效）</td><br>  </tr><br>  <tr><br>    <td>页面间传递数据</td><br>    <td>依赖URL、cookie或者localstorage，实现麻烦</td><br>    <td>因为在一个页面内，页面间传递数据很容易实现(父子之间传值，或vuex或storage之类)</td><br>  </tr><br>  <tr><br>    <td>搜索引擎优化（SEO）</td><br>    <td>可以直接做</td><br>    <td>不利于SEO检索，可利用SSR来实现</td><br>  </tr><br>  <tr><br>    <td>特别适用的范围</td><br>    <td>需要对搜索引擎友好的网站</td><br>    <td>对体验要求高的应用，特别是移动应用 购物网站</td><br>  </tr><br></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>SPA(Single Page Application)，即单页应用，想必现在的前端对其早已耳熟能详，今天就来说道说道，SPA 的前世今生。</p>\n<h2 id=\"多页面应用（MultiPage-Application，MPA）\"><a href=\"#多页面应用（MultiPage-Application，MPA）\" class=\"headerlink\" title=\"多页面应用（MultiPage Application，MPA）\"></a>多页面应用（MultiPage Application，MPA）</h2><p>为什么先说多页面，因为传统网站都是多页面的，从大学第一次做网页，到工作使用 JQ 库，一个个 html 页面拼凑而成的网站都是多页面的。<br><br>每一次页面跳转的时候，后台服务器都会给返回一个新的 html 文档，这种类型的网站也就是多页网站，也叫做多页应用。<br><br>多页面跳转刷新所有资源，每个公共资源(js、css 等)需选择性重新加载。<br></p>\n<p><img src=\"http://tva3.sinaimg.cn/large/b535b7d3ly1g874l3qw95j20j7096dio.jpg\" alt=\"多页面应用\"></p>\n<p>页面结构如图：<br><img src=\"http://tva3.sinaimg.cn/large/b535b7d3ly1g8747ayh6oj20go089gld.jpg\" alt=\"多页面应用结构视图\"></p>\n<h3 id=\"为什么多页应用的首屏时间快？\"><a href=\"#为什么多页应用的首屏时间快？\" class=\"headerlink\" title=\"为什么多页应用的首屏时间快？\"></a>为什么多页应用的首屏时间快？</h3><p>首屏时间叫做页面首个屏幕的内容展现的时间，当我们访问页面的时候，服务器返回一个 html，页面就会展示出来，这个过程只经历了一个 HTTP 请求，所以页面展示的速度非常快。</p>\n<h3 id=\"为什么搜索引擎优化效果好（SEO）？\"><a href=\"#为什么搜索引擎优化效果好（SEO）？\" class=\"headerlink\" title=\"为什么搜索引擎优化效果好（SEO）？\"></a>为什么搜索引擎优化效果好（SEO）？</h3><p>搜索引擎在做网页排名的时候，要根据网页内容才能给网页权重，来进行网页的排名。搜索引擎是可以识别 html 内容的，而我们每个页面所有的内容都放在 Html 中，所以这种多页应用，seo 排名效果好。</p>\n<h3 id=\"但是它也有缺点，就是切换慢\"><a href=\"#但是它也有缺点，就是切换慢\" class=\"headerlink\" title=\"但是它也有缺点，就是切换慢\"></a>但是它也有缺点，就是切换慢</h3><p>因为每次跳转都需要发出一个 http 请求，如果网络比较慢，在页面之间来回跳转时，就会发现明显的卡顿。<br>新的需求促进新的技术诞生，随着业务量变大功能的复杂，前端对页面性能的要求越来越高，随之而来的就是单页面的应用。</p>\n<h2 id=\"单页应用（SinglePage-Web-Application，SPA）\"><a href=\"#单页应用（SinglePage-Web-Application，SPA）\" class=\"headerlink\" title=\"单页应用（SinglePage Web Application，SPA）\"></a>单页应用（SinglePage Web Application，SPA）</h2><p>第一次进入页面的时候会请求一个 html 文件，刷新清除一下。页面切换，也不是传统的请求另一个页面的 html,而是通过路由，改变组件，此时路径也相应变化，但是并没有新的 html 文件请求，页面内容也变化了。<br>原理是：JS 会感知到 url 的变化，通过这一点，可以用 js 动态的将当前页面的内容清除掉，然后将下一个页面的内容挂载到当前页面上，这个时候的路由不是后端来做了，而是前端来做，判断页面到底是显示哪个组件，清除不需要的，显示需要的组件。这种过程就是单页应用，每次跳转的时候不需要再请求 html 文件了。</p>\n<p><img src=\"http://tva4.sinaimg.cn/large/b535b7d3ly1g874l3vsyyj20ji08i0vd.jpg\" alt=\"单页面应用\"></p>\n<p>页面结构如图：<br><img src=\"http://tvax4.sinaimg.cn/large/b535b7d3ly1g878knhv7vj20go08v0se.jpg\" alt=\"单页面应用结构图\"></p>\n<h3 id=\"为什么页面切换快？\"><a href=\"#为什么页面切换快？\" class=\"headerlink\" title=\"为什么页面切换快？\"></a>为什么页面切换快？</h3><p>页面每次切换跳转时，并不需要做 html 文件的请求，这样就节约了很多 http 发送时延，我们在切换页面的时候速度很快。</p>\n<h3 id=\"缺点：首屏时间慢，SEO-差\"><a href=\"#缺点：首屏时间慢，SEO-差\" class=\"headerlink\" title=\"缺点：首屏时间慢，SEO 差\"></a>缺点：首屏时间慢，SEO 差</h3><p>单页应用的首屏时间慢，首屏时需要请求一次 html，同时还要发送一次 js 请求，两次请求回来了，首屏才会展示出来。相对于多页应用，首屏时间慢。<br>SEO 效果差，因为搜索引擎只认识 html 里的内容，不认识 js 的内容，而单页应用的内容都是靠 js 渲染生成出来的，搜索引擎不识别这部分内容，也就不会给一个好的排名，会导致单页应用做出来的网页在百度和谷歌上的排名差。</p>\n<h3 id=\"优缺点，必有解决的对策\"><a href=\"#优缺点，必有解决的对策\" class=\"headerlink\" title=\"优缺点，必有解决的对策\"></a>优缺点，必有解决的对策</h3><p>比如说服务器端渲染技术(如 SSR)可以解决 SEO 问题，通过这些技术可以完美解决这些缺点，解决完这些问题，实际上单页面应用对于前端来说是非常完美的页面开发解决方案。</p>\n<h2 id=\"具体对比分析：\"><a href=\"#具体对比分析：\" class=\"headerlink\" title=\"具体对比分析：\"></a>具体对比分析：</h2><table><br>  <tr><br>    <th> </th><br>    <th>多页应用模式MPA</th><br>    <th>单页应用模式SPA</th><br>  </tr><br>  <tr><br>    <td>组成</td><br>    <td>多个完整页面构成</td><br>    <td>一个外壳页面和多个页面片段组成</td><br>  </tr><br>  <tr><br>    <td>资源共用(css,js)</td><br>    <td>不共用，每个页面都需要加载</td><br>    <td>共用，只需在外壳部分加载</td><br>  </tr><br>  <tr><br>    <td>刷新方式</td><br>    <td>整页刷新</td><br>    <td>页面局部刷新或更改</td><br>  </tr><br> <tr><br>    <td>URL模式</td><br>    <td><a href=\"http://xxx/page1.html\" target=\"_blank\" rel=\"noopener\">http://xxx/page1.html</a> 和 <a href=\"http://xxx/page2.html\" target=\"_blank\" rel=\"noopener\">http://xxx/page2.html</a></td><br>    <td><a href=\"http://xxx/shell.html#page1\" target=\"_blank\" rel=\"noopener\">http://xxx/shell.html#page1</a> 和 <a href=\"http://xxx/shell.html#page2\" target=\"_blank\" rel=\"noopener\">http://xxx/shell.html#page2</a></td><br>  </tr><br>  <tr><br>    <td>用户体验</td><br>    <td>页面间切换加载慢，不流畅，用户体验差，特别是在移动设备上</td><br>    <td>页面片段间的切换快，用户体验好，包括在移动设备上</td><br>  </tr><br>  <tr><br>    <td>能否实现转场动画</td><br>    <td>无法实现</td><br>    <td>容易实现（手机app动效）</td><br>  </tr><br>  <tr><br>    <td>页面间传递数据</td><br>    <td>依赖URL、cookie或者localstorage，实现麻烦</td><br>    <td>因为在一个页面内，页面间传递数据很容易实现(父子之间传值，或vuex或storage之类)</td><br>  </tr><br>  <tr><br>    <td>搜索引擎优化（SEO）</td><br>    <td>可以直接做</td><br>    <td>不利于SEO检索，可利用SSR来实现</td><br>  </tr><br>  <tr><br>    <td>特别适用的范围</td><br>    <td>需要对搜索引擎友好的网站</td><br>    <td>对体验要求高的应用，特别是移动应用 购物网站</td><br>  </tr><br></table>\n"},{"title":"==的隐式转换","date":"2019-04-28T01:13:40.000Z","_content":"\n## 前言\n==在js中用到的很多，大家都知道两个等于号只判断值，===值和类型都会判断，接下来我们就来看看==是如何判断的\n \n```js\n     对象\n        \\\n        字符串   布尔值\n          \\      /\n            数值\n\n\n1. 对象和布尔值比较\n对象和布尔值进行比较时，对象先转换为字符串，然后再转换为数字，布尔值直接转换为数字\n[] == true;  //false  []转换为字符串'',然后转换为数字0,true转换为数字1，所以为false\n\n2. 对象和字符串比较\n对象和字符串进行比较时，对象转换为字符串，然后两者进行比较。\n[1,2,3] == '1,2,3' // true  [1,2,3]转化为'1,2,3'，然后和'1,2,3'， so结果为true;\n\n3. 对象和数字比较\n对象和数字进行比较时，对象先转换为字符串，然后转换为数字，再和数字进行比较。\n[1] == 1;  // true  `对象先转换为字符串再转换为数字，二者再比较 [1] => '1' => 1 所以结果为true\n\n4. 字符串和数字比较\n字符串和数字进行比较时，字符串转换成数字，二者再比较。\n'1' == 1 // true\n\n5. 字符串和布尔值比较\n字符串和布尔值进行比较时，二者全部转换成数值再比较。\n'1' == true; // true \n\n6. 布尔值和数字比较\n布尔值和数字进行比较时，布尔转换为数字，二者比较。\ntrue == 1 // true\n\n7. other\n来看一个有趣的题\n[] == false;\n![] == false;\n还有一些需要记住的，像：\nundefined == null //true undefined和null 比较返回true，二者和其他值比较返回false\nNumber(null) //0\n```","source":"_posts/==的隐式转换.md","raw":"---\ntitle: ==的隐式转换\ndate: 2019-04-28 09:13:40\ntags:\n---\n\n## 前言\n==在js中用到的很多，大家都知道两个等于号只判断值，===值和类型都会判断，接下来我们就来看看==是如何判断的\n \n```js\n     对象\n        \\\n        字符串   布尔值\n          \\      /\n            数值\n\n\n1. 对象和布尔值比较\n对象和布尔值进行比较时，对象先转换为字符串，然后再转换为数字，布尔值直接转换为数字\n[] == true;  //false  []转换为字符串'',然后转换为数字0,true转换为数字1，所以为false\n\n2. 对象和字符串比较\n对象和字符串进行比较时，对象转换为字符串，然后两者进行比较。\n[1,2,3] == '1,2,3' // true  [1,2,3]转化为'1,2,3'，然后和'1,2,3'， so结果为true;\n\n3. 对象和数字比较\n对象和数字进行比较时，对象先转换为字符串，然后转换为数字，再和数字进行比较。\n[1] == 1;  // true  `对象先转换为字符串再转换为数字，二者再比较 [1] => '1' => 1 所以结果为true\n\n4. 字符串和数字比较\n字符串和数字进行比较时，字符串转换成数字，二者再比较。\n'1' == 1 // true\n\n5. 字符串和布尔值比较\n字符串和布尔值进行比较时，二者全部转换成数值再比较。\n'1' == true; // true \n\n6. 布尔值和数字比较\n布尔值和数字进行比较时，布尔转换为数字，二者比较。\ntrue == 1 // true\n\n7. other\n来看一个有趣的题\n[] == false;\n![] == false;\n还有一些需要记住的，像：\nundefined == null //true undefined和null 比较返回true，二者和其他值比较返回false\nNumber(null) //0\n```","slug":"==的隐式转换","published":1,"updated":"2021-03-29T05:44:19.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hyoz0001y4tzizyfbubd","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>==在js中用到的很多，大家都知道两个等于号只判断值，===值和类型都会判断，接下来我们就来看看==是如何判断的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     对象</span><br><span class=\"line\">        \\</span><br><span class=\"line\">        字符串   布尔值</span><br><span class=\"line\">          \\      /</span><br><span class=\"line\">            数值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 对象和布尔值比较</span><br><span class=\"line\">对象和布尔值进行比较时，对象先转换为字符串，然后再转换为数字，布尔值直接转换为数字</span><br><span class=\"line\">[] == <span class=\"literal\">true</span>;  <span class=\"comment\">//false  []转换为字符串'',然后转换为数字0,true转换为数字1，所以为false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 对象和字符串比较</span><br><span class=\"line\">对象和字符串进行比较时，对象转换为字符串，然后两者进行比较。</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] == <span class=\"string\">'1,2,3'</span> <span class=\"comment\">// true  [1,2,3]转化为'1,2,3'，然后和'1,2,3'， so结果为true;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> 对象和数字比较</span><br><span class=\"line\">对象和数字进行比较时，对象先转换为字符串，然后转换为数字，再和数字进行比较。</span><br><span class=\"line\">[<span class=\"number\">1</span>] == <span class=\"number\">1</span>;  <span class=\"comment\">// true  `对象先转换为字符串再转换为数字，二者再比较 [1] =&gt; '1' =&gt; 1 所以结果为true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span> 字符串和数字比较</span><br><span class=\"line\">字符串和数字进行比较时，字符串转换成数字，二者再比较。</span><br><span class=\"line\"><span class=\"string\">'1'</span> == <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span> 字符串和布尔值比较</span><br><span class=\"line\">字符串和布尔值进行比较时，二者全部转换成数值再比较。</span><br><span class=\"line\"><span class=\"string\">'1'</span> == <span class=\"literal\">true</span>; <span class=\"comment\">// true </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span> 布尔值和数字比较</span><br><span class=\"line\">布尔值和数字进行比较时，布尔转换为数字，二者比较。</span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7.</span> other</span><br><span class=\"line\">来看一个有趣的题</span><br><span class=\"line\">[] == <span class=\"literal\">false</span>;</span><br><span class=\"line\">![] == <span class=\"literal\">false</span>;</span><br><span class=\"line\">还有一些需要记住的，像：</span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">null</span> <span class=\"comment\">//true undefined和null 比较返回true，二者和其他值比较返回false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">null</span>) <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>==在js中用到的很多，大家都知道两个等于号只判断值，===值和类型都会判断，接下来我们就来看看==是如何判断的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     对象</span><br><span class=\"line\">        \\</span><br><span class=\"line\">        字符串   布尔值</span><br><span class=\"line\">          \\      /</span><br><span class=\"line\">            数值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 对象和布尔值比较</span><br><span class=\"line\">对象和布尔值进行比较时，对象先转换为字符串，然后再转换为数字，布尔值直接转换为数字</span><br><span class=\"line\">[] == <span class=\"literal\">true</span>;  <span class=\"comment\">//false  []转换为字符串'',然后转换为数字0,true转换为数字1，所以为false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 对象和字符串比较</span><br><span class=\"line\">对象和字符串进行比较时，对象转换为字符串，然后两者进行比较。</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] == <span class=\"string\">'1,2,3'</span> <span class=\"comment\">// true  [1,2,3]转化为'1,2,3'，然后和'1,2,3'， so结果为true;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> 对象和数字比较</span><br><span class=\"line\">对象和数字进行比较时，对象先转换为字符串，然后转换为数字，再和数字进行比较。</span><br><span class=\"line\">[<span class=\"number\">1</span>] == <span class=\"number\">1</span>;  <span class=\"comment\">// true  `对象先转换为字符串再转换为数字，二者再比较 [1] =&gt; '1' =&gt; 1 所以结果为true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span> 字符串和数字比较</span><br><span class=\"line\">字符串和数字进行比较时，字符串转换成数字，二者再比较。</span><br><span class=\"line\"><span class=\"string\">'1'</span> == <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span> 字符串和布尔值比较</span><br><span class=\"line\">字符串和布尔值进行比较时，二者全部转换成数值再比较。</span><br><span class=\"line\"><span class=\"string\">'1'</span> == <span class=\"literal\">true</span>; <span class=\"comment\">// true </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span> 布尔值和数字比较</span><br><span class=\"line\">布尔值和数字进行比较时，布尔转换为数字，二者比较。</span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7.</span> other</span><br><span class=\"line\">来看一个有趣的题</span><br><span class=\"line\">[] == <span class=\"literal\">false</span>;</span><br><span class=\"line\">![] == <span class=\"literal\">false</span>;</span><br><span class=\"line\">还有一些需要记住的，像：</span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">null</span> <span class=\"comment\">//true undefined和null 比较返回true，二者和其他值比较返回false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">null</span>) <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>"},{"title":"Fetch与Promise","date":"2020-01-07T06:21:55.000Z","author":"胡豪","_content":"\n## 什么是Fecth\n\nFetch是一种HTTP数据请求的方式，是XMLHttpRequest的一种替代方案。Fetch不是ajax的进一步封装，它们是两个东西。Fetch函数就是原生js，没有使用XMLHttpRequest对象。\n\nXMLHttpRequest 是一个设计粗糙的API，配置和调用方式非常混乱，而且基于事件的异步模型写起来也没有现代的 Promise，generator/yield，async/await 友好。\n\nFetch 的出现就是为了解决 XHR 的问题，它实现了 Promise 规范，返回 Promise 实例；而 Promise 是为解决异步回调问题而摸索出的一套方案。\n\n## 简述Promise\n\n说Fetch，免不了谈及Promise，这里就再来回顾下/**Promise**/：\n\nPromise是一个对象，用作占位符，用于延迟（可能是异步）计算的最终结果。\n\n一个 Promise 就是一个对象，它代表了一个异步操作的最终完成或者失败。\n\n本质上，Promise 是一个绑定了回调的对象，而不是将回调传进函数内部。\n\nPromise的三种状态：\n- 初始化，状态：pending\n- 当调用resolve(成功)，状态：pengding=>fulfilled\n- 当调用reject(失败)，状态：pending=>rejected\n\n\n## 使用 Fetch \n基本操作：\n```js\nfetch(url).then(function(response) {\n  return response.json();\n}).then(function(data) {\n  console.log(data);\n}).catch(function(err) {\n  console.log(err);\n});\n\n//使用 ES6 的 箭头函数后： \nfetch(url).then(response => response.json())\n  .then(data => console.log(data))\n  .catch(err => console.log(\"error\", err)) \n\n//发送json\nfetch('/xxx', {\n  method: 'post',\n  body: JSON.stringify({\n      username: '',\n      password: ''\n  })\n});\n\n//发送form\nvar form = document.querySelector('form');\nfetch('/xxx', {\n    method: 'post',\n    body: new FormData(form)\n});  \n```\n\nResponse(res)对象成员\n- ok:是否成功\n- headers:响应头对象\n- status/statusText:状态码/状态文本\n- redirected:是否重定向过\n\n要获取响应头里面的Content-Type,调用方法：\n```js\nres.headers.get('Content-Type')\n```\n \n\n\n## 举个例子(登录接口)\n```js\nLogIn() {\n  let params = {\n    username: 'test',\n    password: '123456'\n  }\n  fetch('http://192.168.3.103:9999/api/users/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(params)\n  })\n  .then((res) => {\n    return res.json();\n  })\n  .then((json) => {\n    console.log(json)\n  })\n  .catch(e => {\n    console.log('errr', e);\n  });\n}\n\n//async,await使用\nasync LogIn() {\n  let params = {\n    username: 'test',\n    password: '123456'\n  }\n  try {\n      let response = await fetch('http://192.168.3.103:9999/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(params)\n      })\n      let dataPromise = await response.json();\n      console.log(dataPromise)\n  } catch(err) {\n      console.log(err)\n  }\n}\n```\n\n## 小结\nFetch 就是ES6提供的一个异步接口，这样省的自己封装了。一个基本的fetch操作很简单，就是通过fetch请求，返回一个promise对象，然后在promise对象的then方法里面用fetch的response.json()等方法进行解析数据，由于这个解析返回的也是一个promise对象，所以需要两个then才能得到我们需要的json数据。\n\n### fetch优势：\n1. 语法简洁，更加语义化\n2. 基于标准 Promise 实现，支持 async/await\n3. 同构方便，使用 isomorphic-fetch\n\n### 优雅的使用fetch \nfetch的确很好用，但是有的浏览器确是不支持的(比如IE)，这时就需要我们手动实现ajax作为替代，或者引入polyfill。\n1. 由于 IE8 是 ES3，需要引入 ES5 的 polyfill: es5-shim, es5-sham\n2. 引入 Promise 的 polyfill: es6-promise\n3. 引入 fetch 探测库：fetch-detector\n4. 引入 fetch 的 polyfill: fetch-ie8\n6. 使用 async/await \n7. 如需跨域，可使用fetch-jsonp\n\n### 为何不能直接使用Fetch基本操作\nfetch是一个低层次的API，你可以把它考虑成原生的XHR，所以使用起来并不是那么舒服，需要进行封装。\n\n1. 当接收到一个代表错误的 HTTP 状态码时,比如400, 500，fetch不会把promise标记为reject, 而是标记为resolve，仅当网络故障时或请求被阻止时，才会标记为 reject。\n\n2. 默认情况下，fetch 不会从服务端发送或接收任何 cookies, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 credentials 选项）。\n```js\nfetch(url, {credentials: 'include'})\n```\n\n3. fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费。\n原生不行，但可以用到 [bluebird](http://bluebirdjs.com/docs/api-reference.html) 查阅方法，通过可以取消 promise，去达到取消fetch的目的。\n\n4. fetch没有办法原生监测请求的进度，而XHR可以。\n\n从这里可以看出来，如果我们要在fetch请求出错的时候及时地捕获错误，是需要对response的状态码进行解析的。又由于fetch返回的数据不一定是json格式，我们可以从header里面Content-Type获取返回的数据类型，进而使用正确的解析方法。  \n\n接收到一个代表错误的 HTTP 状态码时通过抛出错误改进：\n```js\ncheckStatus(response) {//检查响应状态\n  if(response.status >= 200 && response.status < 300) {//响应成功\n      return response;\n  }\n  if(response.status === 301 || response.status === 302) {//重定向\n      window.location = response.headers.get('Location');\n  }\n  const error = new Error(response.statusText);\n  error.data = response;\n  throw error;\n}\n```\n\n判断数据类型，进而使用正确的解析：\n```js\nasync parseResult(response) {//解析返回的结果\n  const contentType = response.headers.get('Content-Type');\n  if(contentType != null) {\n      if(contentType.indexOf('text') > -1) {\n          return await response.text()\n      }\n      if(contentType.indexOf('form') > -1) {\n          return await response.formData();\n      }\n      if(contentType.indexOf('video') > -1) {\n          return await response.blob();\n      }\n      if(contentType.indexOf('json') > -1) {\n          return await response.json();\n      }\n  }\n  return await response.text();\n}\n```\n\n### 使用async/awiait的原因\n```js\n(async () => {\n  try {\n    let response = await fetch(url);\n    let data = await response.json();\n    console.log(data);\n  } catch(error) {\n    console.log(\"error:\", error);\n  }\n})()\n```\nPromise 将异步操作规范化。使用then连接, 使用catch捕获错误, 堪称完美, 美中不足的是, then和catch中传递的依然是回调函数。\n为此, ES7 提供了更标准的解决方案 — async/await.  \n使用 await 后，告别面条式调用。从代码可以看到 await 后面可以跟 Promise 对象，表示等待 Promise resolve() 才会继续向下执行，如果 Promise 被 reject() 或抛出异常则会被外面的 try...catch 捕获。\n\n#### Await b()与Promise.then(b)\n有的小伙伴可能很困惑.then()与await;可以参考一篇文章[从JS引擎理解Await b()与Promise.then(b)的堆栈处理](https://blog.csdn.net/fundebug/article/details/81127760)\n\n## 总结\n由此看出Fetch存在各种问题，实际使用中需要二次封装，相比于ajax、axios，现阶段更推荐使用axios\n","source":"_posts/Fetch与Promise.md","raw":"---\ntitle: Fetch与Promise\ndate: 2020-01-07 14:21:55\nauthor: 胡豪\ncategories: \n  - js\ntags:\n  - js \n---\n\n## 什么是Fecth\n\nFetch是一种HTTP数据请求的方式，是XMLHttpRequest的一种替代方案。Fetch不是ajax的进一步封装，它们是两个东西。Fetch函数就是原生js，没有使用XMLHttpRequest对象。\n\nXMLHttpRequest 是一个设计粗糙的API，配置和调用方式非常混乱，而且基于事件的异步模型写起来也没有现代的 Promise，generator/yield，async/await 友好。\n\nFetch 的出现就是为了解决 XHR 的问题，它实现了 Promise 规范，返回 Promise 实例；而 Promise 是为解决异步回调问题而摸索出的一套方案。\n\n## 简述Promise\n\n说Fetch，免不了谈及Promise，这里就再来回顾下/**Promise**/：\n\nPromise是一个对象，用作占位符，用于延迟（可能是异步）计算的最终结果。\n\n一个 Promise 就是一个对象，它代表了一个异步操作的最终完成或者失败。\n\n本质上，Promise 是一个绑定了回调的对象，而不是将回调传进函数内部。\n\nPromise的三种状态：\n- 初始化，状态：pending\n- 当调用resolve(成功)，状态：pengding=>fulfilled\n- 当调用reject(失败)，状态：pending=>rejected\n\n\n## 使用 Fetch \n基本操作：\n```js\nfetch(url).then(function(response) {\n  return response.json();\n}).then(function(data) {\n  console.log(data);\n}).catch(function(err) {\n  console.log(err);\n});\n\n//使用 ES6 的 箭头函数后： \nfetch(url).then(response => response.json())\n  .then(data => console.log(data))\n  .catch(err => console.log(\"error\", err)) \n\n//发送json\nfetch('/xxx', {\n  method: 'post',\n  body: JSON.stringify({\n      username: '',\n      password: ''\n  })\n});\n\n//发送form\nvar form = document.querySelector('form');\nfetch('/xxx', {\n    method: 'post',\n    body: new FormData(form)\n});  \n```\n\nResponse(res)对象成员\n- ok:是否成功\n- headers:响应头对象\n- status/statusText:状态码/状态文本\n- redirected:是否重定向过\n\n要获取响应头里面的Content-Type,调用方法：\n```js\nres.headers.get('Content-Type')\n```\n \n\n\n## 举个例子(登录接口)\n```js\nLogIn() {\n  let params = {\n    username: 'test',\n    password: '123456'\n  }\n  fetch('http://192.168.3.103:9999/api/users/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(params)\n  })\n  .then((res) => {\n    return res.json();\n  })\n  .then((json) => {\n    console.log(json)\n  })\n  .catch(e => {\n    console.log('errr', e);\n  });\n}\n\n//async,await使用\nasync LogIn() {\n  let params = {\n    username: 'test',\n    password: '123456'\n  }\n  try {\n      let response = await fetch('http://192.168.3.103:9999/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(params)\n      })\n      let dataPromise = await response.json();\n      console.log(dataPromise)\n  } catch(err) {\n      console.log(err)\n  }\n}\n```\n\n## 小结\nFetch 就是ES6提供的一个异步接口，这样省的自己封装了。一个基本的fetch操作很简单，就是通过fetch请求，返回一个promise对象，然后在promise对象的then方法里面用fetch的response.json()等方法进行解析数据，由于这个解析返回的也是一个promise对象，所以需要两个then才能得到我们需要的json数据。\n\n### fetch优势：\n1. 语法简洁，更加语义化\n2. 基于标准 Promise 实现，支持 async/await\n3. 同构方便，使用 isomorphic-fetch\n\n### 优雅的使用fetch \nfetch的确很好用，但是有的浏览器确是不支持的(比如IE)，这时就需要我们手动实现ajax作为替代，或者引入polyfill。\n1. 由于 IE8 是 ES3，需要引入 ES5 的 polyfill: es5-shim, es5-sham\n2. 引入 Promise 的 polyfill: es6-promise\n3. 引入 fetch 探测库：fetch-detector\n4. 引入 fetch 的 polyfill: fetch-ie8\n6. 使用 async/await \n7. 如需跨域，可使用fetch-jsonp\n\n### 为何不能直接使用Fetch基本操作\nfetch是一个低层次的API，你可以把它考虑成原生的XHR，所以使用起来并不是那么舒服，需要进行封装。\n\n1. 当接收到一个代表错误的 HTTP 状态码时,比如400, 500，fetch不会把promise标记为reject, 而是标记为resolve，仅当网络故障时或请求被阻止时，才会标记为 reject。\n\n2. 默认情况下，fetch 不会从服务端发送或接收任何 cookies, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 credentials 选项）。\n```js\nfetch(url, {credentials: 'include'})\n```\n\n3. fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费。\n原生不行，但可以用到 [bluebird](http://bluebirdjs.com/docs/api-reference.html) 查阅方法，通过可以取消 promise，去达到取消fetch的目的。\n\n4. fetch没有办法原生监测请求的进度，而XHR可以。\n\n从这里可以看出来，如果我们要在fetch请求出错的时候及时地捕获错误，是需要对response的状态码进行解析的。又由于fetch返回的数据不一定是json格式，我们可以从header里面Content-Type获取返回的数据类型，进而使用正确的解析方法。  \n\n接收到一个代表错误的 HTTP 状态码时通过抛出错误改进：\n```js\ncheckStatus(response) {//检查响应状态\n  if(response.status >= 200 && response.status < 300) {//响应成功\n      return response;\n  }\n  if(response.status === 301 || response.status === 302) {//重定向\n      window.location = response.headers.get('Location');\n  }\n  const error = new Error(response.statusText);\n  error.data = response;\n  throw error;\n}\n```\n\n判断数据类型，进而使用正确的解析：\n```js\nasync parseResult(response) {//解析返回的结果\n  const contentType = response.headers.get('Content-Type');\n  if(contentType != null) {\n      if(contentType.indexOf('text') > -1) {\n          return await response.text()\n      }\n      if(contentType.indexOf('form') > -1) {\n          return await response.formData();\n      }\n      if(contentType.indexOf('video') > -1) {\n          return await response.blob();\n      }\n      if(contentType.indexOf('json') > -1) {\n          return await response.json();\n      }\n  }\n  return await response.text();\n}\n```\n\n### 使用async/awiait的原因\n```js\n(async () => {\n  try {\n    let response = await fetch(url);\n    let data = await response.json();\n    console.log(data);\n  } catch(error) {\n    console.log(\"error:\", error);\n  }\n})()\n```\nPromise 将异步操作规范化。使用then连接, 使用catch捕获错误, 堪称完美, 美中不足的是, then和catch中传递的依然是回调函数。\n为此, ES7 提供了更标准的解决方案 — async/await.  \n使用 await 后，告别面条式调用。从代码可以看到 await 后面可以跟 Promise 对象，表示等待 Promise resolve() 才会继续向下执行，如果 Promise 被 reject() 或抛出异常则会被外面的 try...catch 捕获。\n\n#### Await b()与Promise.then(b)\n有的小伙伴可能很困惑.then()与await;可以参考一篇文章[从JS引擎理解Await b()与Promise.then(b)的堆栈处理](https://blog.csdn.net/fundebug/article/details/81127760)\n\n## 总结\n由此看出Fetch存在各种问题，实际使用中需要二次封装，相比于ajax、axios，现阶段更推荐使用axios\n","slug":"Fetch与Promise","published":1,"updated":"2021-03-29T05:44:19.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hyp60004y4tzrknic3ju","content":"<h2 id=\"什么是Fecth\"><a href=\"#什么是Fecth\" class=\"headerlink\" title=\"什么是Fecth\"></a>什么是Fecth</h2><p>Fetch是一种HTTP数据请求的方式，是XMLHttpRequest的一种替代方案。Fetch不是ajax的进一步封装，它们是两个东西。Fetch函数就是原生js，没有使用XMLHttpRequest对象。</p>\n<p>XMLHttpRequest 是一个设计粗糙的API，配置和调用方式非常混乱，而且基于事件的异步模型写起来也没有现代的 Promise，generator/yield，async/await 友好。</p>\n<p>Fetch 的出现就是为了解决 XHR 的问题，它实现了 Promise 规范，返回 Promise 实例；而 Promise 是为解决异步回调问题而摸索出的一套方案。</p>\n<h2 id=\"简述Promise\"><a href=\"#简述Promise\" class=\"headerlink\" title=\"简述Promise\"></a>简述Promise</h2><p>说Fetch，免不了谈及Promise，这里就再来回顾下/<strong>Promise</strong>/：</p>\n<p>Promise是一个对象，用作占位符，用于延迟（可能是异步）计算的最终结果。</p>\n<p>一个 Promise 就是一个对象，它代表了一个异步操作的最终完成或者失败。</p>\n<p>本质上，Promise 是一个绑定了回调的对象，而不是将回调传进函数内部。</p>\n<p>Promise的三种状态：</p>\n<ul>\n<li>初始化，状态：pending</li>\n<li>当调用resolve(成功)，状态：pengding=&gt;fulfilled</li>\n<li>当调用reject(失败)，状态：pending=&gt;rejected</li>\n</ul>\n<h2 id=\"使用-Fetch\"><a href=\"#使用-Fetch\" class=\"headerlink\" title=\"使用 Fetch\"></a>使用 Fetch</h2><p>基本操作：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> response.json();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用 ES6 的 箭头函数后： </span></span><br><span class=\"line\">fetch(url).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"error\"</span>, err)) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发送json</span></span><br><span class=\"line\">fetch(<span class=\"string\">'/xxx'</span>, &#123;</span><br><span class=\"line\">  method: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">  body: <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">      username: <span class=\"string\">''</span>,</span><br><span class=\"line\">      password: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发送form</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'form'</span>);</span><br><span class=\"line\">fetch(<span class=\"string\">'/xxx'</span>, &#123;</span><br><span class=\"line\">    method: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">    body: <span class=\"keyword\">new</span> FormData(form)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>Response(res)对象成员</p>\n<ul>\n<li>ok:是否成功</li>\n<li>headers:响应头对象</li>\n<li>status/statusText:状态码/状态文本</li>\n<li>redirected:是否重定向过</li>\n</ul>\n<p>要获取响应头里面的Content-Type,调用方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.headers.get(<span class=\"string\">'Content-Type'</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"举个例子-登录接口\"><a href=\"#举个例子-登录接口\" class=\"headerlink\" title=\"举个例子(登录接口)\"></a>举个例子(登录接口)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LogIn() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> params = &#123;</span><br><span class=\"line\">    username: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">    password: <span class=\"string\">'123456'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fetch(<span class=\"string\">'http://192.168.3.103:9999/api/users/login'</span>, &#123;</span><br><span class=\"line\">      method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">      headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      body: <span class=\"built_in\">JSON</span>.stringify(params)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.json();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">json</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(json)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'errr'</span>, e);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//async,await使用</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> LogIn() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> params = &#123;</span><br><span class=\"line\">    username: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">    password: <span class=\"string\">'123456'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"string\">'http://192.168.3.103:9999/api/users/login'</span>, &#123;</span><br><span class=\"line\">        method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">        headers: &#123;</span><br><span class=\"line\">          <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        body: <span class=\"built_in\">JSON</span>.stringify(params)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> dataPromise = <span class=\"keyword\">await</span> response.json();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(dataPromise)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>Fetch 就是ES6提供的一个异步接口，这样省的自己封装了。一个基本的fetch操作很简单，就是通过fetch请求，返回一个promise对象，然后在promise对象的then方法里面用fetch的response.json()等方法进行解析数据，由于这个解析返回的也是一个promise对象，所以需要两个then才能得到我们需要的json数据。</p>\n<h3 id=\"fetch优势：\"><a href=\"#fetch优势：\" class=\"headerlink\" title=\"fetch优势：\"></a>fetch优势：</h3><ol>\n<li>语法简洁，更加语义化</li>\n<li>基于标准 Promise 实现，支持 async/await</li>\n<li>同构方便，使用 isomorphic-fetch</li>\n</ol>\n<h3 id=\"优雅的使用fetch\"><a href=\"#优雅的使用fetch\" class=\"headerlink\" title=\"优雅的使用fetch\"></a>优雅的使用fetch</h3><p>fetch的确很好用，但是有的浏览器确是不支持的(比如IE)，这时就需要我们手动实现ajax作为替代，或者引入polyfill。</p>\n<ol>\n<li>由于 IE8 是 ES3，需要引入 ES5 的 polyfill: es5-shim, es5-sham</li>\n<li>引入 Promise 的 polyfill: es6-promise</li>\n<li>引入 fetch 探测库：fetch-detector</li>\n<li>引入 fetch 的 polyfill: fetch-ie8</li>\n<li>使用 async/await </li>\n<li>如需跨域，可使用fetch-jsonp</li>\n</ol>\n<h3 id=\"为何不能直接使用Fetch基本操作\"><a href=\"#为何不能直接使用Fetch基本操作\" class=\"headerlink\" title=\"为何不能直接使用Fetch基本操作\"></a>为何不能直接使用Fetch基本操作</h3><p>fetch是一个低层次的API，你可以把它考虑成原生的XHR，所以使用起来并不是那么舒服，需要进行封装。</p>\n<ol>\n<li><p>当接收到一个代表错误的 HTTP 状态码时,比如400, 500，fetch不会把promise标记为reject, 而是标记为resolve，仅当网络故障时或请求被阻止时，才会标记为 reject。</p>\n</li>\n<li><p>默认情况下，fetch 不会从服务端发送或接收任何 cookies, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 credentials 选项）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url, &#123;<span class=\"attr\">credentials</span>: <span class=\"string\">'include'</span>&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费。<br>原生不行，但可以用到 <a href=\"http://bluebirdjs.com/docs/api-reference.html\" target=\"_blank\" rel=\"noopener\">bluebird</a> 查阅方法，通过可以取消 promise，去达到取消fetch的目的。</p>\n</li>\n<li><p>fetch没有办法原生监测请求的进度，而XHR可以。</p>\n</li>\n</ol>\n<p>从这里可以看出来，如果我们要在fetch请求出错的时候及时地捕获错误，是需要对response的状态码进行解析的。又由于fetch返回的数据不一定是json格式，我们可以从header里面Content-Type获取返回的数据类型，进而使用正确的解析方法。  </p>\n<p>接收到一个代表错误的 HTTP 状态码时通过抛出错误改进：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checkStatus(response) &#123;<span class=\"comment\">//检查响应状态</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(response.status &gt;= <span class=\"number\">200</span> &amp;&amp; response.status &lt; <span class=\"number\">300</span>) &#123;<span class=\"comment\">//响应成功</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(response.status === <span class=\"number\">301</span> || response.status === <span class=\"number\">302</span>) &#123;<span class=\"comment\">//重定向</span></span><br><span class=\"line\">      <span class=\"built_in\">window</span>.location = response.headers.get(<span class=\"string\">'Location'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(response.statusText);</span><br><span class=\"line\">  error.data = response;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>判断数据类型，进而使用正确的解析：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> parseResult(response) &#123;<span class=\"comment\">//解析返回的结果</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> contentType = response.headers.get(<span class=\"string\">'Content-Type'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(contentType != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(contentType.indexOf(<span class=\"string\">'text'</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.text()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(contentType.indexOf(<span class=\"string\">'form'</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.formData();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(contentType.indexOf(<span class=\"string\">'video'</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.blob();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(contentType.indexOf(<span class=\"string\">'json'</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.json();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.text();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用async-awiait的原因\"><a href=\"#使用async-awiait的原因\" class=\"headerlink\" title=\"使用async/awiait的原因\"></a>使用async/awiait的原因</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> fetch(url);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> response.json();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"error:\"</span>, error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>Promise 将异步操作规范化。使用then连接, 使用catch捕获错误, 堪称完美, 美中不足的是, then和catch中传递的依然是回调函数。<br>为此, ES7 提供了更标准的解决方案 — async/await.<br>使用 await 后，告别面条式调用。从代码可以看到 await 后面可以跟 Promise 对象，表示等待 Promise resolve() 才会继续向下执行，如果 Promise 被 reject() 或抛出异常则会被外面的 try…catch 捕获。</p>\n<h4 id=\"Await-b-与Promise-then-b\"><a href=\"#Await-b-与Promise-then-b\" class=\"headerlink\" title=\"Await b()与Promise.then(b)\"></a>Await b()与Promise.then(b)</h4><p>有的小伙伴可能很困惑.then()与await;可以参考一篇文章<a href=\"https://blog.csdn.net/fundebug/article/details/81127760\" target=\"_blank\" rel=\"noopener\">从JS引擎理解Await b()与Promise.then(b)的堆栈处理</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>由此看出Fetch存在各种问题，实际使用中需要二次封装，相比于ajax、axios，现阶段更推荐使用axios</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是Fecth\"><a href=\"#什么是Fecth\" class=\"headerlink\" title=\"什么是Fecth\"></a>什么是Fecth</h2><p>Fetch是一种HTTP数据请求的方式，是XMLHttpRequest的一种替代方案。Fetch不是ajax的进一步封装，它们是两个东西。Fetch函数就是原生js，没有使用XMLHttpRequest对象。</p>\n<p>XMLHttpRequest 是一个设计粗糙的API，配置和调用方式非常混乱，而且基于事件的异步模型写起来也没有现代的 Promise，generator/yield，async/await 友好。</p>\n<p>Fetch 的出现就是为了解决 XHR 的问题，它实现了 Promise 规范，返回 Promise 实例；而 Promise 是为解决异步回调问题而摸索出的一套方案。</p>\n<h2 id=\"简述Promise\"><a href=\"#简述Promise\" class=\"headerlink\" title=\"简述Promise\"></a>简述Promise</h2><p>说Fetch，免不了谈及Promise，这里就再来回顾下/<strong>Promise</strong>/：</p>\n<p>Promise是一个对象，用作占位符，用于延迟（可能是异步）计算的最终结果。</p>\n<p>一个 Promise 就是一个对象，它代表了一个异步操作的最终完成或者失败。</p>\n<p>本质上，Promise 是一个绑定了回调的对象，而不是将回调传进函数内部。</p>\n<p>Promise的三种状态：</p>\n<ul>\n<li>初始化，状态：pending</li>\n<li>当调用resolve(成功)，状态：pengding=&gt;fulfilled</li>\n<li>当调用reject(失败)，状态：pending=&gt;rejected</li>\n</ul>\n<h2 id=\"使用-Fetch\"><a href=\"#使用-Fetch\" class=\"headerlink\" title=\"使用 Fetch\"></a>使用 Fetch</h2><p>基本操作：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> response.json();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用 ES6 的 箭头函数后： </span></span><br><span class=\"line\">fetch(url).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"built_in\">console</span>.log(data))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"error\"</span>, err)) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发送json</span></span><br><span class=\"line\">fetch(<span class=\"string\">'/xxx'</span>, &#123;</span><br><span class=\"line\">  method: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">  body: <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">      username: <span class=\"string\">''</span>,</span><br><span class=\"line\">      password: <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发送form</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'form'</span>);</span><br><span class=\"line\">fetch(<span class=\"string\">'/xxx'</span>, &#123;</span><br><span class=\"line\">    method: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">    body: <span class=\"keyword\">new</span> FormData(form)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>Response(res)对象成员</p>\n<ul>\n<li>ok:是否成功</li>\n<li>headers:响应头对象</li>\n<li>status/statusText:状态码/状态文本</li>\n<li>redirected:是否重定向过</li>\n</ul>\n<p>要获取响应头里面的Content-Type,调用方法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.headers.get(<span class=\"string\">'Content-Type'</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"举个例子-登录接口\"><a href=\"#举个例子-登录接口\" class=\"headerlink\" title=\"举个例子(登录接口)\"></a>举个例子(登录接口)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LogIn() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> params = &#123;</span><br><span class=\"line\">    username: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">    password: <span class=\"string\">'123456'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fetch(<span class=\"string\">'http://192.168.3.103:9999/api/users/login'</span>, &#123;</span><br><span class=\"line\">      method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">      headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      body: <span class=\"built_in\">JSON</span>.stringify(params)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.json();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">json</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(json)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'errr'</span>, e);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//async,await使用</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> LogIn() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> params = &#123;</span><br><span class=\"line\">    username: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">    password: <span class=\"string\">'123456'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"string\">'http://192.168.3.103:9999/api/users/login'</span>, &#123;</span><br><span class=\"line\">        method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">        headers: &#123;</span><br><span class=\"line\">          <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        body: <span class=\"built_in\">JSON</span>.stringify(params)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> dataPromise = <span class=\"keyword\">await</span> response.json();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(dataPromise)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>Fetch 就是ES6提供的一个异步接口，这样省的自己封装了。一个基本的fetch操作很简单，就是通过fetch请求，返回一个promise对象，然后在promise对象的then方法里面用fetch的response.json()等方法进行解析数据，由于这个解析返回的也是一个promise对象，所以需要两个then才能得到我们需要的json数据。</p>\n<h3 id=\"fetch优势：\"><a href=\"#fetch优势：\" class=\"headerlink\" title=\"fetch优势：\"></a>fetch优势：</h3><ol>\n<li>语法简洁，更加语义化</li>\n<li>基于标准 Promise 实现，支持 async/await</li>\n<li>同构方便，使用 isomorphic-fetch</li>\n</ol>\n<h3 id=\"优雅的使用fetch\"><a href=\"#优雅的使用fetch\" class=\"headerlink\" title=\"优雅的使用fetch\"></a>优雅的使用fetch</h3><p>fetch的确很好用，但是有的浏览器确是不支持的(比如IE)，这时就需要我们手动实现ajax作为替代，或者引入polyfill。</p>\n<ol>\n<li>由于 IE8 是 ES3，需要引入 ES5 的 polyfill: es5-shim, es5-sham</li>\n<li>引入 Promise 的 polyfill: es6-promise</li>\n<li>引入 fetch 探测库：fetch-detector</li>\n<li>引入 fetch 的 polyfill: fetch-ie8</li>\n<li>使用 async/await </li>\n<li>如需跨域，可使用fetch-jsonp</li>\n</ol>\n<h3 id=\"为何不能直接使用Fetch基本操作\"><a href=\"#为何不能直接使用Fetch基本操作\" class=\"headerlink\" title=\"为何不能直接使用Fetch基本操作\"></a>为何不能直接使用Fetch基本操作</h3><p>fetch是一个低层次的API，你可以把它考虑成原生的XHR，所以使用起来并不是那么舒服，需要进行封装。</p>\n<ol>\n<li><p>当接收到一个代表错误的 HTTP 状态码时,比如400, 500，fetch不会把promise标记为reject, 而是标记为resolve，仅当网络故障时或请求被阻止时，才会标记为 reject。</p>\n</li>\n<li><p>默认情况下，fetch 不会从服务端发送或接收任何 cookies, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 credentials 选项）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url, &#123;<span class=\"attr\">credentials</span>: <span class=\"string\">'include'</span>&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费。<br>原生不行，但可以用到 <a href=\"http://bluebirdjs.com/docs/api-reference.html\" target=\"_blank\" rel=\"noopener\">bluebird</a> 查阅方法，通过可以取消 promise，去达到取消fetch的目的。</p>\n</li>\n<li><p>fetch没有办法原生监测请求的进度，而XHR可以。</p>\n</li>\n</ol>\n<p>从这里可以看出来，如果我们要在fetch请求出错的时候及时地捕获错误，是需要对response的状态码进行解析的。又由于fetch返回的数据不一定是json格式，我们可以从header里面Content-Type获取返回的数据类型，进而使用正确的解析方法。  </p>\n<p>接收到一个代表错误的 HTTP 状态码时通过抛出错误改进：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checkStatus(response) &#123;<span class=\"comment\">//检查响应状态</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(response.status &gt;= <span class=\"number\">200</span> &amp;&amp; response.status &lt; <span class=\"number\">300</span>) &#123;<span class=\"comment\">//响应成功</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(response.status === <span class=\"number\">301</span> || response.status === <span class=\"number\">302</span>) &#123;<span class=\"comment\">//重定向</span></span><br><span class=\"line\">      <span class=\"built_in\">window</span>.location = response.headers.get(<span class=\"string\">'Location'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(response.statusText);</span><br><span class=\"line\">  error.data = response;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>判断数据类型，进而使用正确的解析：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> parseResult(response) &#123;<span class=\"comment\">//解析返回的结果</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> contentType = response.headers.get(<span class=\"string\">'Content-Type'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(contentType != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(contentType.indexOf(<span class=\"string\">'text'</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.text()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(contentType.indexOf(<span class=\"string\">'form'</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.formData();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(contentType.indexOf(<span class=\"string\">'video'</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.blob();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(contentType.indexOf(<span class=\"string\">'json'</span>) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.json();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.text();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用async-awiait的原因\"><a href=\"#使用async-awiait的原因\" class=\"headerlink\" title=\"使用async/awiait的原因\"></a>使用async/awiait的原因</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> fetch(url);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> response.json();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"error:\"</span>, error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>Promise 将异步操作规范化。使用then连接, 使用catch捕获错误, 堪称完美, 美中不足的是, then和catch中传递的依然是回调函数。<br>为此, ES7 提供了更标准的解决方案 — async/await.<br>使用 await 后，告别面条式调用。从代码可以看到 await 后面可以跟 Promise 对象，表示等待 Promise resolve() 才会继续向下执行，如果 Promise 被 reject() 或抛出异常则会被外面的 try…catch 捕获。</p>\n<h4 id=\"Await-b-与Promise-then-b\"><a href=\"#Await-b-与Promise-then-b\" class=\"headerlink\" title=\"Await b()与Promise.then(b)\"></a>Await b()与Promise.then(b)</h4><p>有的小伙伴可能很困惑.then()与await;可以参考一篇文章<a href=\"https://blog.csdn.net/fundebug/article/details/81127760\" target=\"_blank\" rel=\"noopener\">从JS引擎理解Await b()与Promise.then(b)的堆栈处理</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>由此看出Fetch存在各种问题，实际使用中需要二次封装，相比于ajax、axios，现阶段更推荐使用axios</p>\n"},{"title":"Vue之mixin","date":"2020-01-03T01:36:11.000Z","author":"胡豪","_content":"\n## 常见场景\n  何时需要使用到mixin呢?\n\n  通常遇到有两个非常相似的组件，他们的基本功能是一样的，但他们之间又存在着足够的差异性，此时的你就像是来到了一个分岔路口：我是把它拆分成两个不同的组件呢？还是使用一个组件，然后通过props传值？对于实现功能来说，这两者都可以做到，但是不够完美。拆成两个组件的写法，遇到功能变动就要在两个文件中去修改，无疑是增加了更新的风险，违反DRY原则。而一个组件，太多的props传值会使得简单的逻辑变得复杂，后期维护时使用组件必须理解一大段上下文，降低了工作效率;这时候使用Mixin就显得很合适；\n\n  Vue 中的Mixin对编写函数式风格的代码很有用，因为函数式编程就是通过减少移动的部分让代码更好理解（引自 Michael Feathers ）。Mixin允许你封装一块在应用的其他组件中都可以使用的函数。如果使用姿势得当，他们不会改变函数作用域外部的任何东西，因此哪怕执行多次，只要是同样的输入你总是能得到一样的值，真的很强大！\n\n  要注意的是 组件 /= mixin，新手可能会混为一谈\n  单纯组件引用：\n  父组件 + 子组件 >>> 父组件 + 子组件（父子组件相对而言是独立的）\n\n  mixins：\n  父组件 + 原本子组件的逻辑提取出来（mixin.js） >>> new父组件（mixin中的方法和属性也就并入到该组件中，可以直接使用。）钩子函数会两个都被调用，mixin中的钩子首先执行。\n\n\n## 简单用法\n\n定义一个 js 文件(mixin.js)  \n我们可以在这里提取逻辑并创建可以被重用的项：\n```\nexport default {\n data() {\n  return {\n   name: '我是mixin'\n  }\n },\n created() {\n  console.log(this.name);\n },\n mounted() {},   \n methods: {} \n}\n```\n\n一般为了清晰，我会在components文件夹内新建一个mixins文件夹，在这里面放mixin的js\n![图片1](http://tvax1.sinaimg.cn/large/b535b7d3ly1gamjtob0oxj21370n5jtz.jpg)\n\n在组件中使用\n```\nimport mixin from '@/components/mixins/mixin'; // 引入mixin文件\nexport default {\n mixins: [mixin]\n}\n```\n\n## 选项合并\n当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。\n\n一、数据冲突\n数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先。\n```\nvar mixin = {\n  data: function () {\n    return {\n      message: 'hello',\n      foo: 'abc'\n    }\n  }\n}\n\nnew Vue({\n  mixins: [mixin],\n  data: function () {\n    return {\n      message: 'goodbye',\n      bar: 'def'\n    }\n  },\n  created: function () {\n    console.log(this.$data)\n    // => { message: \"goodbye\", foo: \"abc\", bar: \"def\" }\n  }\n})\n```\n组件中的值会覆盖混入的数据值\n\n\n二、同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。\n```\nvar mixin = {\n  created: function () {\n    console.log('混入对象的钩子被调用')\n  }\n}\n\nnew Vue({\n  mixins: [mixin],\n  created: function () {\n    console.log('组件钩子被调用')\n  }\n})\n\n// => \"混入对象的钩子被调用\"\n// => \"组件钩子被调用\"\n```\n\n值为对象的选项，例如 methods、components 和 directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。\n```\nvar mixin = {\n  methods: {\n    foo: function () {\n      console.log('foo')\n    },\n    conflicting: function () {\n      console.log('from mixin')\n    }\n  }\n}\n\nvar vm = new Vue({\n  mixins: [mixin],\n  methods: {\n    bar: function () {\n      console.log('bar')\n    },\n    conflicting: function () {\n      console.log('from self')\n    }\n  }\n})\n\nvm.foo() // => \"foo\"\nvm.bar() // => \"bar\"\nvm.conflicting() // => \"from self\"\n```\n通俗地讲，混入先运行，组件权重大，冲突看组件\n\n## 总结\n混入提供给我们了一种实现方式，用组件还是混入，开头也已经提过，项目中还需具体问题具体分析，不可盲目","source":"_posts/Vue中使用mixin.md","raw":"---\ntitle: Vue之mixin\ndate: 2020-01-03 09:36:11\nauthor: 胡豪\ncategories: \n  - vue\ntags:\n  - vue \n---\n\n## 常见场景\n  何时需要使用到mixin呢?\n\n  通常遇到有两个非常相似的组件，他们的基本功能是一样的，但他们之间又存在着足够的差异性，此时的你就像是来到了一个分岔路口：我是把它拆分成两个不同的组件呢？还是使用一个组件，然后通过props传值？对于实现功能来说，这两者都可以做到，但是不够完美。拆成两个组件的写法，遇到功能变动就要在两个文件中去修改，无疑是增加了更新的风险，违反DRY原则。而一个组件，太多的props传值会使得简单的逻辑变得复杂，后期维护时使用组件必须理解一大段上下文，降低了工作效率;这时候使用Mixin就显得很合适；\n\n  Vue 中的Mixin对编写函数式风格的代码很有用，因为函数式编程就是通过减少移动的部分让代码更好理解（引自 Michael Feathers ）。Mixin允许你封装一块在应用的其他组件中都可以使用的函数。如果使用姿势得当，他们不会改变函数作用域外部的任何东西，因此哪怕执行多次，只要是同样的输入你总是能得到一样的值，真的很强大！\n\n  要注意的是 组件 /= mixin，新手可能会混为一谈\n  单纯组件引用：\n  父组件 + 子组件 >>> 父组件 + 子组件（父子组件相对而言是独立的）\n\n  mixins：\n  父组件 + 原本子组件的逻辑提取出来（mixin.js） >>> new父组件（mixin中的方法和属性也就并入到该组件中，可以直接使用。）钩子函数会两个都被调用，mixin中的钩子首先执行。\n\n\n## 简单用法\n\n定义一个 js 文件(mixin.js)  \n我们可以在这里提取逻辑并创建可以被重用的项：\n```\nexport default {\n data() {\n  return {\n   name: '我是mixin'\n  }\n },\n created() {\n  console.log(this.name);\n },\n mounted() {},   \n methods: {} \n}\n```\n\n一般为了清晰，我会在components文件夹内新建一个mixins文件夹，在这里面放mixin的js\n![图片1](http://tvax1.sinaimg.cn/large/b535b7d3ly1gamjtob0oxj21370n5jtz.jpg)\n\n在组件中使用\n```\nimport mixin from '@/components/mixins/mixin'; // 引入mixin文件\nexport default {\n mixins: [mixin]\n}\n```\n\n## 选项合并\n当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。\n\n一、数据冲突\n数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先。\n```\nvar mixin = {\n  data: function () {\n    return {\n      message: 'hello',\n      foo: 'abc'\n    }\n  }\n}\n\nnew Vue({\n  mixins: [mixin],\n  data: function () {\n    return {\n      message: 'goodbye',\n      bar: 'def'\n    }\n  },\n  created: function () {\n    console.log(this.$data)\n    // => { message: \"goodbye\", foo: \"abc\", bar: \"def\" }\n  }\n})\n```\n组件中的值会覆盖混入的数据值\n\n\n二、同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。\n```\nvar mixin = {\n  created: function () {\n    console.log('混入对象的钩子被调用')\n  }\n}\n\nnew Vue({\n  mixins: [mixin],\n  created: function () {\n    console.log('组件钩子被调用')\n  }\n})\n\n// => \"混入对象的钩子被调用\"\n// => \"组件钩子被调用\"\n```\n\n值为对象的选项，例如 methods、components 和 directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。\n```\nvar mixin = {\n  methods: {\n    foo: function () {\n      console.log('foo')\n    },\n    conflicting: function () {\n      console.log('from mixin')\n    }\n  }\n}\n\nvar vm = new Vue({\n  mixins: [mixin],\n  methods: {\n    bar: function () {\n      console.log('bar')\n    },\n    conflicting: function () {\n      console.log('from self')\n    }\n  }\n})\n\nvm.foo() // => \"foo\"\nvm.bar() // => \"bar\"\nvm.conflicting() // => \"from self\"\n```\n通俗地讲，混入先运行，组件权重大，冲突看组件\n\n## 总结\n混入提供给我们了一种实现方式，用组件还是混入，开头也已经提过，项目中还需具体问题具体分析，不可盲目","slug":"Vue中使用mixin","published":1,"updated":"2021-03-29T05:44:19.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hyp80005y4tzivl2h1w5","content":"<h2 id=\"常见场景\"><a href=\"#常见场景\" class=\"headerlink\" title=\"常见场景\"></a>常见场景</h2><p>  何时需要使用到mixin呢?</p>\n<p>  通常遇到有两个非常相似的组件，他们的基本功能是一样的，但他们之间又存在着足够的差异性，此时的你就像是来到了一个分岔路口：我是把它拆分成两个不同的组件呢？还是使用一个组件，然后通过props传值？对于实现功能来说，这两者都可以做到，但是不够完美。拆成两个组件的写法，遇到功能变动就要在两个文件中去修改，无疑是增加了更新的风险，违反DRY原则。而一个组件，太多的props传值会使得简单的逻辑变得复杂，后期维护时使用组件必须理解一大段上下文，降低了工作效率;这时候使用Mixin就显得很合适；</p>\n<p>  Vue 中的Mixin对编写函数式风格的代码很有用，因为函数式编程就是通过减少移动的部分让代码更好理解（引自 Michael Feathers ）。Mixin允许你封装一块在应用的其他组件中都可以使用的函数。如果使用姿势得当，他们不会改变函数作用域外部的任何东西，因此哪怕执行多次，只要是同样的输入你总是能得到一样的值，真的很强大！</p>\n<p>  要注意的是 组件 /= mixin，新手可能会混为一谈<br>  单纯组件引用：<br>  父组件 + 子组件 &gt;&gt;&gt; 父组件 + 子组件（父子组件相对而言是独立的）</p>\n<p>  mixins：<br>  父组件 + 原本子组件的逻辑提取出来（mixin.js） &gt;&gt;&gt; new父组件（mixin中的方法和属性也就并入到该组件中，可以直接使用。）钩子函数会两个都被调用，mixin中的钩子首先执行。</p>\n<h2 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h2><p>定义一个 js 文件(mixin.js)<br>我们可以在这里提取逻辑并创建可以被重用的项：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\"> data() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">   name: &apos;我是mixin&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> created() &#123;</span><br><span class=\"line\">  console.log(this.name);</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> mounted() &#123;&#125;,   </span><br><span class=\"line\"> methods: &#123;&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一般为了清晰，我会在components文件夹内新建一个mixins文件夹，在这里面放mixin的js<br><img src=\"http://tvax1.sinaimg.cn/large/b535b7d3ly1gamjtob0oxj21370n5jtz.jpg\" alt=\"图片1\"></p>\n<p>在组件中使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mixin from &apos;@/components/mixins/mixin&apos;; // 引入mixin文件</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\"> mixins: [mixin]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"选项合并\"><a href=\"#选项合并\" class=\"headerlink\" title=\"选项合并\"></a>选项合并</h2><p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。</p>\n<p>一、数据冲突<br>数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mixin = &#123;</span><br><span class=\"line\">  data: function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      message: &apos;hello&apos;,</span><br><span class=\"line\">      foo: &apos;abc&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  mixins: [mixin],</span><br><span class=\"line\">  data: function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      message: &apos;goodbye&apos;,</span><br><span class=\"line\">      bar: &apos;def&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: function () &#123;</span><br><span class=\"line\">    console.log(this.$data)</span><br><span class=\"line\">    // =&gt; &#123; message: &quot;goodbye&quot;, foo: &quot;abc&quot;, bar: &quot;def&quot; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>组件中的值会覆盖混入的数据值</p>\n<p>二、同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mixin = &#123;</span><br><span class=\"line\">  created: function () &#123;</span><br><span class=\"line\">    console.log(&apos;混入对象的钩子被调用&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  mixins: [mixin],</span><br><span class=\"line\">  created: function () &#123;</span><br><span class=\"line\">    console.log(&apos;组件钩子被调用&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// =&gt; &quot;混入对象的钩子被调用&quot;</span><br><span class=\"line\">// =&gt; &quot;组件钩子被调用&quot;</span><br></pre></td></tr></table></figure></p>\n<p>值为对象的选项，例如 methods、components 和 directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mixin = &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    foo: function () &#123;</span><br><span class=\"line\">      console.log(&apos;foo&apos;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    conflicting: function () &#123;</span><br><span class=\"line\">      console.log(&apos;from mixin&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var vm = new Vue(&#123;</span><br><span class=\"line\">  mixins: [mixin],</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    bar: function () &#123;</span><br><span class=\"line\">      console.log(&apos;bar&apos;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    conflicting: function () &#123;</span><br><span class=\"line\">      console.log(&apos;from self&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">vm.foo() // =&gt; &quot;foo&quot;</span><br><span class=\"line\">vm.bar() // =&gt; &quot;bar&quot;</span><br><span class=\"line\">vm.conflicting() // =&gt; &quot;from self&quot;</span><br></pre></td></tr></table></figure></p>\n<p>通俗地讲，混入先运行，组件权重大，冲突看组件</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>混入提供给我们了一种实现方式，用组件还是混入，开头也已经提过，项目中还需具体问题具体分析，不可盲目</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常见场景\"><a href=\"#常见场景\" class=\"headerlink\" title=\"常见场景\"></a>常见场景</h2><p>  何时需要使用到mixin呢?</p>\n<p>  通常遇到有两个非常相似的组件，他们的基本功能是一样的，但他们之间又存在着足够的差异性，此时的你就像是来到了一个分岔路口：我是把它拆分成两个不同的组件呢？还是使用一个组件，然后通过props传值？对于实现功能来说，这两者都可以做到，但是不够完美。拆成两个组件的写法，遇到功能变动就要在两个文件中去修改，无疑是增加了更新的风险，违反DRY原则。而一个组件，太多的props传值会使得简单的逻辑变得复杂，后期维护时使用组件必须理解一大段上下文，降低了工作效率;这时候使用Mixin就显得很合适；</p>\n<p>  Vue 中的Mixin对编写函数式风格的代码很有用，因为函数式编程就是通过减少移动的部分让代码更好理解（引自 Michael Feathers ）。Mixin允许你封装一块在应用的其他组件中都可以使用的函数。如果使用姿势得当，他们不会改变函数作用域外部的任何东西，因此哪怕执行多次，只要是同样的输入你总是能得到一样的值，真的很强大！</p>\n<p>  要注意的是 组件 /= mixin，新手可能会混为一谈<br>  单纯组件引用：<br>  父组件 + 子组件 &gt;&gt;&gt; 父组件 + 子组件（父子组件相对而言是独立的）</p>\n<p>  mixins：<br>  父组件 + 原本子组件的逻辑提取出来（mixin.js） &gt;&gt;&gt; new父组件（mixin中的方法和属性也就并入到该组件中，可以直接使用。）钩子函数会两个都被调用，mixin中的钩子首先执行。</p>\n<h2 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h2><p>定义一个 js 文件(mixin.js)<br>我们可以在这里提取逻辑并创建可以被重用的项：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\"> data() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">   name: &apos;我是mixin&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> created() &#123;</span><br><span class=\"line\">  console.log(this.name);</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> mounted() &#123;&#125;,   </span><br><span class=\"line\"> methods: &#123;&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一般为了清晰，我会在components文件夹内新建一个mixins文件夹，在这里面放mixin的js<br><img src=\"http://tvax1.sinaimg.cn/large/b535b7d3ly1gamjtob0oxj21370n5jtz.jpg\" alt=\"图片1\"></p>\n<p>在组件中使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mixin from &apos;@/components/mixins/mixin&apos;; // 引入mixin文件</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\"> mixins: [mixin]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"选项合并\"><a href=\"#选项合并\" class=\"headerlink\" title=\"选项合并\"></a>选项合并</h2><p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。</p>\n<p>一、数据冲突<br>数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mixin = &#123;</span><br><span class=\"line\">  data: function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      message: &apos;hello&apos;,</span><br><span class=\"line\">      foo: &apos;abc&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  mixins: [mixin],</span><br><span class=\"line\">  data: function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      message: &apos;goodbye&apos;,</span><br><span class=\"line\">      bar: &apos;def&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: function () &#123;</span><br><span class=\"line\">    console.log(this.$data)</span><br><span class=\"line\">    // =&gt; &#123; message: &quot;goodbye&quot;, foo: &quot;abc&quot;, bar: &quot;def&quot; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>组件中的值会覆盖混入的数据值</p>\n<p>二、同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mixin = &#123;</span><br><span class=\"line\">  created: function () &#123;</span><br><span class=\"line\">    console.log(&apos;混入对象的钩子被调用&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  mixins: [mixin],</span><br><span class=\"line\">  created: function () &#123;</span><br><span class=\"line\">    console.log(&apos;组件钩子被调用&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// =&gt; &quot;混入对象的钩子被调用&quot;</span><br><span class=\"line\">// =&gt; &quot;组件钩子被调用&quot;</span><br></pre></td></tr></table></figure></p>\n<p>值为对象的选项，例如 methods、components 和 directives，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mixin = &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    foo: function () &#123;</span><br><span class=\"line\">      console.log(&apos;foo&apos;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    conflicting: function () &#123;</span><br><span class=\"line\">      console.log(&apos;from mixin&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var vm = new Vue(&#123;</span><br><span class=\"line\">  mixins: [mixin],</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    bar: function () &#123;</span><br><span class=\"line\">      console.log(&apos;bar&apos;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    conflicting: function () &#123;</span><br><span class=\"line\">      console.log(&apos;from self&apos;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">vm.foo() // =&gt; &quot;foo&quot;</span><br><span class=\"line\">vm.bar() // =&gt; &quot;bar&quot;</span><br><span class=\"line\">vm.conflicting() // =&gt; &quot;from self&quot;</span><br></pre></td></tr></table></figure></p>\n<p>通俗地讲，混入先运行，组件权重大，冲突看组件</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>混入提供给我们了一种实现方式，用组件还是混入，开头也已经提过，项目中还需具体问题具体分析，不可盲目</p>\n"},{"title":"css3手写菜单图标变成X号","date":"2020-01-19T07:42:59.000Z","author":"胡豪","_content":"\n## 前言\n做项目中经常会遇到三条横线的菜单按钮，一般都是点击按钮出现菜单栏，再次点击关闭菜单栏，直接显示X号就显得很生硬，这里使用CSS3动画将这个过渡过程变得非线性感，更讨好眼球。\n例子里用的是hover更直接明显，在项目里可以用class来控制\n\n\n## 如何写\n代码如下：\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>CSS3 写菜单按钮变形小动画</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css\"></script>\n    <style>\n      .menu-button {\n        position: absolute;\n        top: 18px;\n        left: 24px;\n        width: 30px;\n        height: 24px;\n        padding: 0;\n        cursor: pointer;\n        border: none;\n        outline: none;\n        background: transparent;\n      }\n      button {\n        -webkit-appearance: button;\n      }\n      button,select {\n        text-transform: none;\n      }\n      button,input,optgroup,select,textarea {\n        font-family: inherit;\n        font-size: 100%;\n        line-height: 1.15;\n        margin: 0;\n      }\n      .menu-button:after,.menu-button:before {\n        content: \"\";\n        position: absolute;\n        top: 50%;\n        left: 0;\n        width: 100%;\n        height: 2px;\n        border-radius: 2px;\n        pointer-events: none;\n        -webkit-transition: -webkit-transform 0.25s;\n        transition: -webkit-transform 0.25s;\n        transition: transform 0.25s;\n        transition: transform 0.25s, -webkit-transform 0.25s;\n        -webkit-transform-origin: 50% 50%;\n        transform-origin: 50% 50%;\n      }\n      .menu-button:after,.menu-button:before,.menu-button span {\n        background: #5f656f;\n      }\n      .menu-button:before {\n        -webkit-transform: translate3d(0, -10px, 0) scaleX(0.8);\n        transform: translate3d(0, -10px, 0) scaleX(0.8);\n      }\n      .menu-button:after {\n        -webkit-transform: translate3d(0, 10px, 0) scaleX(0.8);\n        transform: translate3d(0, 10px, 0) scaleX(0.8);\n      }\n      .menu-button span {\n        position: absolute;\n        left: 0;\n        overflow: hidden;\n        width: 100%;\n        height: 2px;\n        text-indent: 200%;\n        -webkit-transition: opacity 0.25s;\n        transition: opacity 0.25s;\n      }\n      .header:hover .menu-button--open:before {\n        -webkit-transform: rotate(45deg);\n        transform: rotate(45deg);\n      }\n      .header:hover .menu-button--open:after {\n        -webkit-transform: rotate(-45deg);\n        transform: rotate(-45deg);\n      }\n      .header:hover .menu-button--open span {\n        opacity: 0;\n      }\n    </style>\n  </head>\n\n  <body>\n    <!--header-->\n    <div class=\"header\">\n      <button class=\"menu-button menu-button--open\"><span>Menu</span></button>\n    </div>\n  </body>\n</html>\n```\n\n## 知识要点总结\n1.transform 属性\n- rotate(deg)                     //顺时针旋转\n- translate3d(x,y,z)              //3D转换\n- scaleX(0.8);                    //按0.8比例X轴缩放\n- scale(1.1)                     //按1.1比例中心缩放  \nscale(X,Y)，X表示元素沿着水平方向（X轴）缩放的倍数，y表示元素沿着垂直方向（Y轴）缩放的倍数。只设置一个值（没有设置Y）,则表示X、Y两个方向的缩放倍数是一样的（同时放大相同倍数）。\n\n2.transition 属性\n实现过渡动画效果，和控制动画持续时间\ntransition: property duration timing-function delay;\n\n- property : 指定CSS属性的name，transition效果\n\n- duration : transition效果需要指定多少秒或毫秒才能完成,默认值为0,>0才有动画效果\n\n- timing-function: 指定transition效果的转速曲线\n  默认值为 ease\n| 值 | 效果描述 |\n| ------ | ------ |\n| ease | 慢速开始，然后变快，然后慢速结束的过渡效果 |\n| linear | 匀速 |\n| ease-in | 慢速开始的过渡效果 |\n| ease-out | 慢速结束的过渡效果 |\n| ease-in-out | 慢速开始和结束的过渡效果 |\n\n- delay: 延迟多久秒开始过渡效果，默认值0\n","source":"_posts/css3手写菜单图标变成X号.md","raw":"---\ntitle: css3手写菜单图标变成X号\ndate: 2020-01-19 15:42:59\nauthor: 胡豪\ncategories:\n  - CSS\ntags:\n  - CSS\n---\n\n## 前言\n做项目中经常会遇到三条横线的菜单按钮，一般都是点击按钮出现菜单栏，再次点击关闭菜单栏，直接显示X号就显得很生硬，这里使用CSS3动画将这个过渡过程变得非线性感，更讨好眼球。\n例子里用的是hover更直接明显，在项目里可以用class来控制\n\n\n## 如何写\n代码如下：\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>CSS3 写菜单按钮变形小动画</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css\"></script>\n    <style>\n      .menu-button {\n        position: absolute;\n        top: 18px;\n        left: 24px;\n        width: 30px;\n        height: 24px;\n        padding: 0;\n        cursor: pointer;\n        border: none;\n        outline: none;\n        background: transparent;\n      }\n      button {\n        -webkit-appearance: button;\n      }\n      button,select {\n        text-transform: none;\n      }\n      button,input,optgroup,select,textarea {\n        font-family: inherit;\n        font-size: 100%;\n        line-height: 1.15;\n        margin: 0;\n      }\n      .menu-button:after,.menu-button:before {\n        content: \"\";\n        position: absolute;\n        top: 50%;\n        left: 0;\n        width: 100%;\n        height: 2px;\n        border-radius: 2px;\n        pointer-events: none;\n        -webkit-transition: -webkit-transform 0.25s;\n        transition: -webkit-transform 0.25s;\n        transition: transform 0.25s;\n        transition: transform 0.25s, -webkit-transform 0.25s;\n        -webkit-transform-origin: 50% 50%;\n        transform-origin: 50% 50%;\n      }\n      .menu-button:after,.menu-button:before,.menu-button span {\n        background: #5f656f;\n      }\n      .menu-button:before {\n        -webkit-transform: translate3d(0, -10px, 0) scaleX(0.8);\n        transform: translate3d(0, -10px, 0) scaleX(0.8);\n      }\n      .menu-button:after {\n        -webkit-transform: translate3d(0, 10px, 0) scaleX(0.8);\n        transform: translate3d(0, 10px, 0) scaleX(0.8);\n      }\n      .menu-button span {\n        position: absolute;\n        left: 0;\n        overflow: hidden;\n        width: 100%;\n        height: 2px;\n        text-indent: 200%;\n        -webkit-transition: opacity 0.25s;\n        transition: opacity 0.25s;\n      }\n      .header:hover .menu-button--open:before {\n        -webkit-transform: rotate(45deg);\n        transform: rotate(45deg);\n      }\n      .header:hover .menu-button--open:after {\n        -webkit-transform: rotate(-45deg);\n        transform: rotate(-45deg);\n      }\n      .header:hover .menu-button--open span {\n        opacity: 0;\n      }\n    </style>\n  </head>\n\n  <body>\n    <!--header-->\n    <div class=\"header\">\n      <button class=\"menu-button menu-button--open\"><span>Menu</span></button>\n    </div>\n  </body>\n</html>\n```\n\n## 知识要点总结\n1.transform 属性\n- rotate(deg)                     //顺时针旋转\n- translate3d(x,y,z)              //3D转换\n- scaleX(0.8);                    //按0.8比例X轴缩放\n- scale(1.1)                     //按1.1比例中心缩放  \nscale(X,Y)，X表示元素沿着水平方向（X轴）缩放的倍数，y表示元素沿着垂直方向（Y轴）缩放的倍数。只设置一个值（没有设置Y）,则表示X、Y两个方向的缩放倍数是一样的（同时放大相同倍数）。\n\n2.transition 属性\n实现过渡动画效果，和控制动画持续时间\ntransition: property duration timing-function delay;\n\n- property : 指定CSS属性的name，transition效果\n\n- duration : transition效果需要指定多少秒或毫秒才能完成,默认值为0,>0才有动画效果\n\n- timing-function: 指定transition效果的转速曲线\n  默认值为 ease\n| 值 | 效果描述 |\n| ------ | ------ |\n| ease | 慢速开始，然后变快，然后慢速结束的过渡效果 |\n| linear | 匀速 |\n| ease-in | 慢速开始的过渡效果 |\n| ease-out | 慢速结束的过渡效果 |\n| ease-in-out | 慢速开始和结束的过渡效果 |\n\n- delay: 延迟多久秒开始过渡效果，默认值0\n","slug":"css3手写菜单图标变成X号","published":1,"updated":"2020-02-03T13:18:06.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hypa0006y4tzwyi2o5fj","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>做项目中经常会遇到三条横线的菜单按钮，一般都是点击按钮出现菜单栏，再次点击关闭菜单栏，直接显示X号就显得很生硬，这里使用CSS3动画将这个过渡过程变得非线性感，更讨好眼球。<br>例子里用的是hover更直接明显，在项目里可以用class来控制</p>\n<h2 id=\"如何写\"><a href=\"#如何写\" class=\"headerlink\" title=\"如何写\"></a>如何写</h2><p>代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CSS3 写菜单按钮变形小动画<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">      .menu-button &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 18px;</span><br><span class=\"line\">        left: 24px;</span><br><span class=\"line\">        width: 30px;</span><br><span class=\"line\">        height: 24px;</span><br><span class=\"line\">        padding: 0;</span><br><span class=\"line\">        cursor: pointer;</span><br><span class=\"line\">        border: none;</span><br><span class=\"line\">        outline: none;</span><br><span class=\"line\">        background: transparent;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      button &#123;</span><br><span class=\"line\">        -webkit-appearance: button;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      button,select &#123;</span><br><span class=\"line\">        text-transform: none;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      button,input,optgroup,select,textarea &#123;</span><br><span class=\"line\">        font-family: inherit;</span><br><span class=\"line\">        font-size: 100%;</span><br><span class=\"line\">        line-height: 1.15;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .menu-button:after,.menu-button:before &#123;</span><br><span class=\"line\">        content: \"\";</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        height: 2px;</span><br><span class=\"line\">        border-radius: 2px;</span><br><span class=\"line\">        pointer-events: none;</span><br><span class=\"line\">        -webkit-transition: -webkit-transform 0.25s;</span><br><span class=\"line\">        transition: -webkit-transform 0.25s;</span><br><span class=\"line\">        transition: transform 0.25s;</span><br><span class=\"line\">        transition: transform 0.25s, -webkit-transform 0.25s;</span><br><span class=\"line\">        -webkit-transform-origin: 50% 50%;</span><br><span class=\"line\">        transform-origin: 50% 50%;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .menu-button:after,.menu-button:before,.menu-button span &#123;</span><br><span class=\"line\">        background: #5f656f;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .menu-button:before &#123;</span><br><span class=\"line\">        -webkit-transform: translate3d(0, -10px, 0) scaleX(0.8);</span><br><span class=\"line\">        transform: translate3d(0, -10px, 0) scaleX(0.8);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .menu-button:after &#123;</span><br><span class=\"line\">        -webkit-transform: translate3d(0, 10px, 0) scaleX(0.8);</span><br><span class=\"line\">        transform: translate3d(0, 10px, 0) scaleX(0.8);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .menu-button span &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        overflow: hidden;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        height: 2px;</span><br><span class=\"line\">        text-indent: 200%;</span><br><span class=\"line\">        -webkit-transition: opacity 0.25s;</span><br><span class=\"line\">        transition: opacity 0.25s;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .header:hover .menu-button--open:before &#123;</span><br><span class=\"line\">        -webkit-transform: rotate(45deg);</span><br><span class=\"line\">        transform: rotate(45deg);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .header:hover .menu-button--open:after &#123;</span><br><span class=\"line\">        -webkit-transform: rotate(-45deg);</span><br><span class=\"line\">        transform: rotate(-45deg);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .header:hover .menu-button--open span &#123;</span><br><span class=\"line\">        opacity: 0;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--header--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu-button menu-button--open\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Menu<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"知识要点总结\"><a href=\"#知识要点总结\" class=\"headerlink\" title=\"知识要点总结\"></a>知识要点总结</h2><p>1.transform 属性</p>\n<ul>\n<li>rotate(deg)                     //顺时针旋转</li>\n<li>translate3d(x,y,z)              //3D转换</li>\n<li>scaleX(0.8);                    //按0.8比例X轴缩放</li>\n<li>scale(1.1)                     //按1.1比例中心缩放<br>scale(X,Y)，X表示元素沿着水平方向（X轴）缩放的倍数，y表示元素沿着垂直方向（Y轴）缩放的倍数。只设置一个值（没有设置Y）,则表示X、Y两个方向的缩放倍数是一样的（同时放大相同倍数）。</li>\n</ul>\n<p>2.transition 属性<br>实现过渡动画效果，和控制动画持续时间<br>transition: property duration timing-function delay;</p>\n<ul>\n<li><p>property : 指定CSS属性的name，transition效果</p>\n</li>\n<li><p>duration : transition效果需要指定多少秒或毫秒才能完成,默认值为0,&gt;0才有动画效果</p>\n</li>\n<li><p>timing-function: 指定transition效果的转速曲线<br>默认值为 ease<br>| 值 | 效果描述 |<br>| —— | —— |<br>| ease | 慢速开始，然后变快，然后慢速结束的过渡效果 |<br>| linear | 匀速 |<br>| ease-in | 慢速开始的过渡效果 |<br>| ease-out | 慢速结束的过渡效果 |<br>| ease-in-out | 慢速开始和结束的过渡效果 |</p>\n</li>\n<li><p>delay: 延迟多久秒开始过渡效果，默认值0</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>做项目中经常会遇到三条横线的菜单按钮，一般都是点击按钮出现菜单栏，再次点击关闭菜单栏，直接显示X号就显得很生硬，这里使用CSS3动画将这个过渡过程变得非线性感，更讨好眼球。<br>例子里用的是hover更直接明显，在项目里可以用class来控制</p>\n<h2 id=\"如何写\"><a href=\"#如何写\" class=\"headerlink\" title=\"如何写\"></a>如何写</h2><p>代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CSS3 写菜单按钮变形小动画<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">      .menu-button &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 18px;</span><br><span class=\"line\">        left: 24px;</span><br><span class=\"line\">        width: 30px;</span><br><span class=\"line\">        height: 24px;</span><br><span class=\"line\">        padding: 0;</span><br><span class=\"line\">        cursor: pointer;</span><br><span class=\"line\">        border: none;</span><br><span class=\"line\">        outline: none;</span><br><span class=\"line\">        background: transparent;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      button &#123;</span><br><span class=\"line\">        -webkit-appearance: button;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      button,select &#123;</span><br><span class=\"line\">        text-transform: none;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      button,input,optgroup,select,textarea &#123;</span><br><span class=\"line\">        font-family: inherit;</span><br><span class=\"line\">        font-size: 100%;</span><br><span class=\"line\">        line-height: 1.15;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .menu-button:after,.menu-button:before &#123;</span><br><span class=\"line\">        content: \"\";</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        top: 50%;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        height: 2px;</span><br><span class=\"line\">        border-radius: 2px;</span><br><span class=\"line\">        pointer-events: none;</span><br><span class=\"line\">        -webkit-transition: -webkit-transform 0.25s;</span><br><span class=\"line\">        transition: -webkit-transform 0.25s;</span><br><span class=\"line\">        transition: transform 0.25s;</span><br><span class=\"line\">        transition: transform 0.25s, -webkit-transform 0.25s;</span><br><span class=\"line\">        -webkit-transform-origin: 50% 50%;</span><br><span class=\"line\">        transform-origin: 50% 50%;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .menu-button:after,.menu-button:before,.menu-button span &#123;</span><br><span class=\"line\">        background: #5f656f;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .menu-button:before &#123;</span><br><span class=\"line\">        -webkit-transform: translate3d(0, -10px, 0) scaleX(0.8);</span><br><span class=\"line\">        transform: translate3d(0, -10px, 0) scaleX(0.8);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .menu-button:after &#123;</span><br><span class=\"line\">        -webkit-transform: translate3d(0, 10px, 0) scaleX(0.8);</span><br><span class=\"line\">        transform: translate3d(0, 10px, 0) scaleX(0.8);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .menu-button span &#123;</span><br><span class=\"line\">        position: absolute;</span><br><span class=\"line\">        left: 0;</span><br><span class=\"line\">        overflow: hidden;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        height: 2px;</span><br><span class=\"line\">        text-indent: 200%;</span><br><span class=\"line\">        -webkit-transition: opacity 0.25s;</span><br><span class=\"line\">        transition: opacity 0.25s;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .header:hover .menu-button--open:before &#123;</span><br><span class=\"line\">        -webkit-transform: rotate(45deg);</span><br><span class=\"line\">        transform: rotate(45deg);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .header:hover .menu-button--open:after &#123;</span><br><span class=\"line\">        -webkit-transform: rotate(-45deg);</span><br><span class=\"line\">        transform: rotate(-45deg);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .header:hover .menu-button--open span &#123;</span><br><span class=\"line\">        opacity: 0;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--header--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu-button menu-button--open\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Menu<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"知识要点总结\"><a href=\"#知识要点总结\" class=\"headerlink\" title=\"知识要点总结\"></a>知识要点总结</h2><p>1.transform 属性</p>\n<ul>\n<li>rotate(deg)                     //顺时针旋转</li>\n<li>translate3d(x,y,z)              //3D转换</li>\n<li>scaleX(0.8);                    //按0.8比例X轴缩放</li>\n<li>scale(1.1)                     //按1.1比例中心缩放<br>scale(X,Y)，X表示元素沿着水平方向（X轴）缩放的倍数，y表示元素沿着垂直方向（Y轴）缩放的倍数。只设置一个值（没有设置Y）,则表示X、Y两个方向的缩放倍数是一样的（同时放大相同倍数）。</li>\n</ul>\n<p>2.transition 属性<br>实现过渡动画效果，和控制动画持续时间<br>transition: property duration timing-function delay;</p>\n<ul>\n<li><p>property : 指定CSS属性的name，transition效果</p>\n</li>\n<li><p>duration : transition效果需要指定多少秒或毫秒才能完成,默认值为0,&gt;0才有动画效果</p>\n</li>\n<li><p>timing-function: 指定transition效果的转速曲线<br>默认值为 ease<br>| 值 | 效果描述 |<br>| —— | —— |<br>| ease | 慢速开始，然后变快，然后慢速结束的过渡效果 |<br>| linear | 匀速 |<br>| ease-in | 慢速开始的过渡效果 |<br>| ease-out | 慢速结束的过渡效果 |<br>| ease-in-out | 慢速开始和结束的过渡效果 |</p>\n</li>\n<li><p>delay: 延迟多久秒开始过渡效果，默认值0</p>\n</li>\n</ul>\n"},{"title":"Vue写tab选项卡","date":"2019-12-17T01:22:18.000Z","author":"胡豪","_content":"\n## Vue写tab选项卡\n### 固定选项的写法\n遇到UI上只有2个或者3个固定选项的写法\n```js\n//2个的情况只要用一个开关字段来控制显示隐藏即可\n//3个及以上的写法，可以价格tabId来控制\n<div id=\"app\">\n  <!-- tab 选项 -->\n  <div class=\"tab\">\n    <div class=\"tag\" :class=\"{ active: tabId==0 }\" @click=\"tabId=0\">\n      已出账单\n    </div>\n    <div class=\"tag\" :class=\"{ active: tabId==1 }\" @click=\"tabId=1\">\n      未出账单\n    </div>\n    <div class=\"tag\" :class=\"{ active: tabId==2 }\" @click=\"tabId=2\">\n      定金\n    </div>  \n  </div> \n  <!-- box 内容 -->\n  <div class=\"box\" >\n      <!-- 制作选项卡内容 === 是判断 -->\n      <div v-show=\"tabId===0\">\n        内容块\n      </div>\n      <div v-show=\"tabId===1\">\n        内容块\n      </div>\n      <div v-show=\"tabId===2\">\n        内容块\n      </div>\n  </div>\n</div>\n\ndata(){\n  return { \n    //表格切换 \n    toggleTable:true,   //2个tab切换使用\n    tabId:0,            //3个及以上tab切换使用\n  }\n},\n\n```\n\n### 非固定选项的写法\n常常我们也会遇到tab选项没有具体固定有几个项，需要我们根据接口数据生成对应的tab项\n```js\n<div id=\"app\">\n  <ul>        \n    <li @click=\"toggle(index ,tab.view)\" v-for=\"(tab,index) in tabs\" :class=\"{active:active===index}\">\n      {{tab.type}}       \n    </li>    \n  </ul>   \n  <component :is=\"currentView\"></component>\n</div>\n\n<script>\nVue.component('child1', { \n  template: \"<p>this is child1</p>\"\n})\nVue.component('child2', { \n  template: \"<p>this is child2</p>\"\n})\nnew Vue({ \n  el: \"#app\", \n  data: {   \n      active: 0, \n      currentView: 'child1',   \n      tabs: [   \n          {       \n              type: 'tab1',   \n              view: 'child1'  \n          },     \n          {       \n              type: 'tab2',    \n              view: 'child2'    \n          }  \n      ]  \n  }, \n  methods: {  \n      toggle(i, v){    \n          this.active = i   \n          this.currentView = v  \n      } \n  }\n})\n</script>\n```","source":"_posts/Vue写tab选项卡.md","raw":"---\ntitle: Vue写tab选项卡\ndate: 2019-12-17 09:22:18\nauthor: 胡豪\ncategories: \n  - vue\ntags:\n  - vue \n---\n\n## Vue写tab选项卡\n### 固定选项的写法\n遇到UI上只有2个或者3个固定选项的写法\n```js\n//2个的情况只要用一个开关字段来控制显示隐藏即可\n//3个及以上的写法，可以价格tabId来控制\n<div id=\"app\">\n  <!-- tab 选项 -->\n  <div class=\"tab\">\n    <div class=\"tag\" :class=\"{ active: tabId==0 }\" @click=\"tabId=0\">\n      已出账单\n    </div>\n    <div class=\"tag\" :class=\"{ active: tabId==1 }\" @click=\"tabId=1\">\n      未出账单\n    </div>\n    <div class=\"tag\" :class=\"{ active: tabId==2 }\" @click=\"tabId=2\">\n      定金\n    </div>  \n  </div> \n  <!-- box 内容 -->\n  <div class=\"box\" >\n      <!-- 制作选项卡内容 === 是判断 -->\n      <div v-show=\"tabId===0\">\n        内容块\n      </div>\n      <div v-show=\"tabId===1\">\n        内容块\n      </div>\n      <div v-show=\"tabId===2\">\n        内容块\n      </div>\n  </div>\n</div>\n\ndata(){\n  return { \n    //表格切换 \n    toggleTable:true,   //2个tab切换使用\n    tabId:0,            //3个及以上tab切换使用\n  }\n},\n\n```\n\n### 非固定选项的写法\n常常我们也会遇到tab选项没有具体固定有几个项，需要我们根据接口数据生成对应的tab项\n```js\n<div id=\"app\">\n  <ul>        \n    <li @click=\"toggle(index ,tab.view)\" v-for=\"(tab,index) in tabs\" :class=\"{active:active===index}\">\n      {{tab.type}}       \n    </li>    \n  </ul>   \n  <component :is=\"currentView\"></component>\n</div>\n\n<script>\nVue.component('child1', { \n  template: \"<p>this is child1</p>\"\n})\nVue.component('child2', { \n  template: \"<p>this is child2</p>\"\n})\nnew Vue({ \n  el: \"#app\", \n  data: {   \n      active: 0, \n      currentView: 'child1',   \n      tabs: [   \n          {       \n              type: 'tab1',   \n              view: 'child1'  \n          },     \n          {       \n              type: 'tab2',    \n              view: 'child2'    \n          }  \n      ]  \n  }, \n  methods: {  \n      toggle(i, v){    \n          this.active = i   \n          this.currentView = v  \n      } \n  }\n})\n</script>\n```","slug":"Vue写tab选项卡","published":1,"updated":"2021-03-29T05:44:19.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hypd000ay4tza8l3t081","content":"<h2 id=\"Vue写tab选项卡\"><a href=\"#Vue写tab选项卡\" class=\"headerlink\" title=\"Vue写tab选项卡\"></a>Vue写tab选项卡</h2><h3 id=\"固定选项的写法\"><a href=\"#固定选项的写法\" class=\"headerlink\" title=\"固定选项的写法\"></a>固定选项的写法</h3><p>遇到UI上只有2个或者3个固定选项的写法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//2个的情况只要用一个开关字段来控制显示隐藏即可</span></span><br><span class=\"line\"><span class=\"comment\">//3个及以上的写法，可以价格tabId来控制</span></span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">  &lt;!-- tab 选项 --&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"tab\"</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"tag\"</span> :<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123; active: tabId==0 &#125;\"</span> @click=<span class=\"string\">\"tabId=0\"</span>&gt;</span><br><span class=\"line\">      已出账单</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div class=\"tag\" :class=\"&#123; active: tabId==1 &#125;\" @click=\"tabId=1\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      未出账单</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"tag\"</span> :<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123; active: tabId==2 &#125;\"</span> @click=<span class=\"string\">\"tabId=2\"</span>&gt;</span><br><span class=\"line\">      定金</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;  </span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt; </span><br><span class=\"line\">  &lt;!-- box 内容 --&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"box\"</span> &gt;</span><br><span class=\"line\">      &lt;!-- 制作选项卡内容 === 是判断 --&gt;</span><br><span class=\"line\">      &lt;div v-show=<span class=\"string\">\"tabId===0\"</span>&gt;</span><br><span class=\"line\">        内容块</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div v-show=\"tabId===1\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        内容块</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;div v-show=<span class=\"string\">\"tabId===2\"</span>&gt;</span><br><span class=\"line\">        内容块</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">data()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return &#123; </span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/表格切换 </span></span><br><span class=\"line\"><span class=\"regexp\">    toggleTable:true,   /</span><span class=\"regexp\">/2个tab切换使用</span></span><br><span class=\"line\"><span class=\"regexp\">    tabId:0,            /</span><span class=\"regexp\">/3个及以上tab切换使用</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;,</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"非固定选项的写法\"><a href=\"#非固定选项的写法\" class=\"headerlink\" title=\"非固定选项的写法\"></a>非固定选项的写法</h3><p>常常我们也会遇到tab选项没有具体固定有几个项，需要我们根据接口数据生成对应的tab项<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">  &lt;ul&gt;        </span><br><span class=\"line\">    &lt;li @click=<span class=\"string\">\"toggle(index ,tab.view)\"</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(tab,index) in tabs\"</span> :<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;active:active===index&#125;\"</span>&gt;</span><br><span class=\"line\">      &#123;&#123;tab.type&#125;&#125;       </span><br><span class=\"line\">    &lt;<span class=\"regexp\">/li&gt;    </span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/u</span>l&gt;   </span><br><span class=\"line\">  &lt;component :is=<span class=\"string\">\"currentView\"</span>&gt;&lt;<span class=\"regexp\">/component&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">Vue.component(<span class=\"string\">'child1'</span>, &#123; </span><br><span class=\"line\">  template: <span class=\"string\">\"&lt;p&gt;this is child1&lt;/p&gt;\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Vue.component(<span class=\"string\">'child2'</span>, &#123; </span><br><span class=\"line\">  template: <span class=\"string\">\"&lt;p&gt;this is child2&lt;/p&gt;\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123; </span><br><span class=\"line\">  el: <span class=\"string\">\"#app\"</span>, </span><br><span class=\"line\">  data: &#123;   </span><br><span class=\"line\">      active: <span class=\"number\">0</span>, </span><br><span class=\"line\">      currentView: <span class=\"string\">'child1'</span>,   </span><br><span class=\"line\">      tabs: [   </span><br><span class=\"line\">          &#123;       </span><br><span class=\"line\">              type: <span class=\"string\">'tab1'</span>,   </span><br><span class=\"line\">              view: <span class=\"string\">'child1'</span>  </span><br><span class=\"line\">          &#125;,     </span><br><span class=\"line\">          &#123;       </span><br><span class=\"line\">              type: <span class=\"string\">'tab2'</span>,    </span><br><span class=\"line\">              view: <span class=\"string\">'child2'</span>    </span><br><span class=\"line\">          &#125;  </span><br><span class=\"line\">      ]  </span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  methods: &#123;  </span><br><span class=\"line\">      toggle(i, v)&#123;    </span><br><span class=\"line\">          <span class=\"keyword\">this</span>.active = i   </span><br><span class=\"line\">          <span class=\"keyword\">this</span>.currentView = v  </span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue写tab选项卡\"><a href=\"#Vue写tab选项卡\" class=\"headerlink\" title=\"Vue写tab选项卡\"></a>Vue写tab选项卡</h2><h3 id=\"固定选项的写法\"><a href=\"#固定选项的写法\" class=\"headerlink\" title=\"固定选项的写法\"></a>固定选项的写法</h3><p>遇到UI上只有2个或者3个固定选项的写法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//2个的情况只要用一个开关字段来控制显示隐藏即可</span></span><br><span class=\"line\"><span class=\"comment\">//3个及以上的写法，可以价格tabId来控制</span></span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">  &lt;!-- tab 选项 --&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"tab\"</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"tag\"</span> :<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123; active: tabId==0 &#125;\"</span> @click=<span class=\"string\">\"tabId=0\"</span>&gt;</span><br><span class=\"line\">      已出账单</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div class=\"tag\" :class=\"&#123; active: tabId==1 &#125;\" @click=\"tabId=1\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      未出账单</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"tag\"</span> :<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123; active: tabId==2 &#125;\"</span> @click=<span class=\"string\">\"tabId=2\"</span>&gt;</span><br><span class=\"line\">      定金</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;  </span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt; </span><br><span class=\"line\">  &lt;!-- box 内容 --&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"box\"</span> &gt;</span><br><span class=\"line\">      &lt;!-- 制作选项卡内容 === 是判断 --&gt;</span><br><span class=\"line\">      &lt;div v-show=<span class=\"string\">\"tabId===0\"</span>&gt;</span><br><span class=\"line\">        内容块</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div v-show=\"tabId===1\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        内容块</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;div v-show=<span class=\"string\">\"tabId===2\"</span>&gt;</span><br><span class=\"line\">        内容块</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">data()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return &#123; </span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/表格切换 </span></span><br><span class=\"line\"><span class=\"regexp\">    toggleTable:true,   /</span><span class=\"regexp\">/2个tab切换使用</span></span><br><span class=\"line\"><span class=\"regexp\">    tabId:0,            /</span><span class=\"regexp\">/3个及以上tab切换使用</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;,</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"非固定选项的写法\"><a href=\"#非固定选项的写法\" class=\"headerlink\" title=\"非固定选项的写法\"></a>非固定选项的写法</h3><p>常常我们也会遇到tab选项没有具体固定有几个项，需要我们根据接口数据生成对应的tab项<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">  &lt;ul&gt;        </span><br><span class=\"line\">    &lt;li @click=<span class=\"string\">\"toggle(index ,tab.view)\"</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(tab,index) in tabs\"</span> :<span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;active:active===index&#125;\"</span>&gt;</span><br><span class=\"line\">      &#123;&#123;tab.type&#125;&#125;       </span><br><span class=\"line\">    &lt;<span class=\"regexp\">/li&gt;    </span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/u</span>l&gt;   </span><br><span class=\"line\">  &lt;component :is=<span class=\"string\">\"currentView\"</span>&gt;&lt;<span class=\"regexp\">/component&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">Vue.component(<span class=\"string\">'child1'</span>, &#123; </span><br><span class=\"line\">  template: <span class=\"string\">\"&lt;p&gt;this is child1&lt;/p&gt;\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">Vue.component(<span class=\"string\">'child2'</span>, &#123; </span><br><span class=\"line\">  template: <span class=\"string\">\"&lt;p&gt;this is child2&lt;/p&gt;\"</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123; </span><br><span class=\"line\">  el: <span class=\"string\">\"#app\"</span>, </span><br><span class=\"line\">  data: &#123;   </span><br><span class=\"line\">      active: <span class=\"number\">0</span>, </span><br><span class=\"line\">      currentView: <span class=\"string\">'child1'</span>,   </span><br><span class=\"line\">      tabs: [   </span><br><span class=\"line\">          &#123;       </span><br><span class=\"line\">              type: <span class=\"string\">'tab1'</span>,   </span><br><span class=\"line\">              view: <span class=\"string\">'child1'</span>  </span><br><span class=\"line\">          &#125;,     </span><br><span class=\"line\">          &#123;       </span><br><span class=\"line\">              type: <span class=\"string\">'tab2'</span>,    </span><br><span class=\"line\">              view: <span class=\"string\">'child2'</span>    </span><br><span class=\"line\">          &#125;  </span><br><span class=\"line\">      ]  </span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  methods: &#123;  </span><br><span class=\"line\">      toggle(i, v)&#123;    </span><br><span class=\"line\">          <span class=\"keyword\">this</span>.active = i   </span><br><span class=\"line\">          <span class=\"keyword\">this</span>.currentView = v  </span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"gulp入门(一)","date":"2019-11-07T05:31:50.000Z","author":"胡豪","_content":"\n## 前言\n说到前端常见的构建工具，有Webpack/Grunt/Gulp  \n这里简述一下它们都是干什么的：  \nGrunt 和 Gulp 是非常相似的东西，能实现的功能是一样的，当然你可能 Gulp 听的 Grunt 多，通俗的讲，可以把 Gulp 看作 Grunt 的加强版。相对于 Grunt，Gulp增加了监听文件、读写文件、流式处理的功能。  \nWebpack 是一个打包模块化 JavaScript 的工具，在 Webpack 里一切文件皆模块(JavaScript、CSS、SCSS、图片、模板)，通过 Loader 转换文件，通过 Plugin 注入钩子，最后输出由多个模块组合成的文件。经过 Webpack 的处理，最终会输出浏览器能使用的静态资源。使用Vue的小伙伴再熟悉不过，Webpack 专注于构建模块化项目。Webpack的缺点也很明显是只能用于采用模块化开发的项目。  \n今天重点讲gulp；\n\n\n## Gulp是什么？\n\nGulp是前端自动化的工具，它能用来做很多很多繁琐的事情，大大便利了前端开发工作流程\n\n1. 搭建web服务器\n2. 使用预处理器Sass，Less\n3. 压缩优化，可以压缩JS CSS Html 图片\n4. 自动将更新变化的代码实时显示在浏览器\n5. 前端测试  \n...... \n\n## 快速入门\nGulp 是一个基于流的自动化构建工具。 除了可以管理和执行任务，还支持监听文件、读写文件。Gulp 被设计得非常简单，只通过下面5种个方法就可以胜任几乎所有构建场景：\n\n- 通过 gulp.task 注册一个任务；\n- 通过 gulp.run 执行任务；\n- 通过 gulp.watch 监听文件变化；\n- 通过 gulp.src 读取文件；\n- 通过 gulp.dest 写文件。\n\n### 简单语法\n1. gulp.task(name[,deps],fn)\n说明：定义一个gulp任务\nname: 类型(必填)：String 指定任务的名称（不应该有空格）\ndeps:类型(可选)：StringArray，该任务依赖的任务（执行name任务要先去执行的任务）\n```js\ngulp.task('A' , function(){\n   console.log('A') \n});\ngulp.task('B' , ['A'] , function(){ //运行B之前先去运行A\n   console.log('B')\n});\n```\n\n2. gulp.src(globs[, options])\n说明：src方法指定需要处理的源文件路径，返回当前文件流至可用插件  \n\nglobs: 类型(必填)：String/StringArray  需要处理的源文件匹配符路径  \n\n通配符路径匹配示例：\n　　“src/a.js”：指定具体文件；  \n　　“*”：匹配所有文件    例：src/*.js(包含src下的所有js文件)；  \n　　“**”：匹配0个或多个子文件夹    例：src/**/*.js(包含src的0个或多个子文件夹下的js文件)；  \n　　“{}”：匹配多个属性    例：src/{a,b}.js(包含a.js和b.js文件)  src/*.{jpg,png,gif}(src下的所有jpg/png/gif文件)；  \n　　“!”：排除文件    例：!src/a.js(不包含src下的a.js文件)；  \n\noptions:类型(可选)：Object 三个属性 buffer read base  \n　　options.buffer：类型：Boolean  默认：true 设置为false，将返回file.content的流并且不缓冲文件，处理大文件时非常有用；  \n　　options.read：  类型：Boolean  默认：true 设置false，将不执行读取文件操作，返回null；  \n　　options.base：  类型：String  设置输出路径以某个路径的某个组成部分为基础向后拼接\n```js\ngulp.src('client/js/**/*.js') \n  .pipe(minify())\n  .pipe(gulp.dest('build'));   \n \ngulp.src('client/js/**/*.js', { base: 'client' })\n  .pipe(minify())\n  .pipe(gulp.dest('build'));   \n```\n\n3. gulp.dest(path[,options])  \n说明：watch方法用于监听文件变化，一被变化就执行指定任务  \nglob：  需要处理的源文件匹配符路径。类型(必填)：String or StringArray；  \nopts：  类型(可选)：Object 具体参看https://github.com/shama/gaze；  \ntasks：  类型(必填)：StringArray 需要执行的任务的名称数组；  \ncb(event)：  类型(可选)：Function 每个文件变化执行的回调函数；\n```js\n.pipe(gulp.dest('build')); \n```\n\n4. gulp.watch(glob[,opts],tasks) or gulp.task(glob [,opts ,cd])  \n说明：watch方法用于监听文件变化，一被变化就执行指定任务  \nglob：  需要处理的源文件匹配符路径。类型(必填)：String or StringArray；  \nopts：  类型(可选)：Object 具体参看https://github.com/shama/gaze；  \ntasks：  类型(必填)：StringArray 需要执行的任务的名称数组；  \ncb(event)：  类型(可选)：Function 每个文件变化执行的回调函数；\n\n\n## 如何写\n首先创建 gulpfile 文件  \n利用任何文本编辑器在项目大的根目录下创建一个名为 gulpfile.js 的文件  \n各个API就不讲了，官网都有，[Gulp官网直通车](https://www.gulpjs.com.cn/docs/api/concepts/) \n\n\n1. 项目初始化 `npm init` \n2. 安装全局gulp \n```js\nnpm install gulp -g //全局安装\nnpm install gulp --save-dev //本地安装并加入package.json\n```\n3. 这里用了一个gulp插件 gulp-uglify，安装 `npm i gulp-uglify -D`\n4. 定义一个gulp任务`gulp.task(name[,deps],fn)`   \n\n就先写个压缩 js 吧\n```js\nconst gulp = require(\"gulp\");//全局gulp\nconst uglify = require(\"gulp-uglify\"); //压缩js\n\n  //压缩js文件\n  gulp.task(\"script\", function() {\n    //找到文件\n    gulp\n      .src(\"js/*.js\")\n      //压缩文件\n      .pipe(uglify())\n      //保存压缩后的文件\n      .pipe(gulp.dest(\"dist/js\"));\n  });\n```\n5. 运行gulp\ngulpfile统计目录下终端运行`gulp.script`\n\n\n\n","source":"_posts/gulp入门（一）.md","raw":"---\ntitle: gulp入门(一)\ndate: 2019-11-07 13:31:50\nauthor: 胡豪\ncategories:\n  - gulp\ntags:\n  - gulp\n---\n\n## 前言\n说到前端常见的构建工具，有Webpack/Grunt/Gulp  \n这里简述一下它们都是干什么的：  \nGrunt 和 Gulp 是非常相似的东西，能实现的功能是一样的，当然你可能 Gulp 听的 Grunt 多，通俗的讲，可以把 Gulp 看作 Grunt 的加强版。相对于 Grunt，Gulp增加了监听文件、读写文件、流式处理的功能。  \nWebpack 是一个打包模块化 JavaScript 的工具，在 Webpack 里一切文件皆模块(JavaScript、CSS、SCSS、图片、模板)，通过 Loader 转换文件，通过 Plugin 注入钩子，最后输出由多个模块组合成的文件。经过 Webpack 的处理，最终会输出浏览器能使用的静态资源。使用Vue的小伙伴再熟悉不过，Webpack 专注于构建模块化项目。Webpack的缺点也很明显是只能用于采用模块化开发的项目。  \n今天重点讲gulp；\n\n\n## Gulp是什么？\n\nGulp是前端自动化的工具，它能用来做很多很多繁琐的事情，大大便利了前端开发工作流程\n\n1. 搭建web服务器\n2. 使用预处理器Sass，Less\n3. 压缩优化，可以压缩JS CSS Html 图片\n4. 自动将更新变化的代码实时显示在浏览器\n5. 前端测试  \n...... \n\n## 快速入门\nGulp 是一个基于流的自动化构建工具。 除了可以管理和执行任务，还支持监听文件、读写文件。Gulp 被设计得非常简单，只通过下面5种个方法就可以胜任几乎所有构建场景：\n\n- 通过 gulp.task 注册一个任务；\n- 通过 gulp.run 执行任务；\n- 通过 gulp.watch 监听文件变化；\n- 通过 gulp.src 读取文件；\n- 通过 gulp.dest 写文件。\n\n### 简单语法\n1. gulp.task(name[,deps],fn)\n说明：定义一个gulp任务\nname: 类型(必填)：String 指定任务的名称（不应该有空格）\ndeps:类型(可选)：StringArray，该任务依赖的任务（执行name任务要先去执行的任务）\n```js\ngulp.task('A' , function(){\n   console.log('A') \n});\ngulp.task('B' , ['A'] , function(){ //运行B之前先去运行A\n   console.log('B')\n});\n```\n\n2. gulp.src(globs[, options])\n说明：src方法指定需要处理的源文件路径，返回当前文件流至可用插件  \n\nglobs: 类型(必填)：String/StringArray  需要处理的源文件匹配符路径  \n\n通配符路径匹配示例：\n　　“src/a.js”：指定具体文件；  \n　　“*”：匹配所有文件    例：src/*.js(包含src下的所有js文件)；  \n　　“**”：匹配0个或多个子文件夹    例：src/**/*.js(包含src的0个或多个子文件夹下的js文件)；  \n　　“{}”：匹配多个属性    例：src/{a,b}.js(包含a.js和b.js文件)  src/*.{jpg,png,gif}(src下的所有jpg/png/gif文件)；  \n　　“!”：排除文件    例：!src/a.js(不包含src下的a.js文件)；  \n\noptions:类型(可选)：Object 三个属性 buffer read base  \n　　options.buffer：类型：Boolean  默认：true 设置为false，将返回file.content的流并且不缓冲文件，处理大文件时非常有用；  \n　　options.read：  类型：Boolean  默认：true 设置false，将不执行读取文件操作，返回null；  \n　　options.base：  类型：String  设置输出路径以某个路径的某个组成部分为基础向后拼接\n```js\ngulp.src('client/js/**/*.js') \n  .pipe(minify())\n  .pipe(gulp.dest('build'));   \n \ngulp.src('client/js/**/*.js', { base: 'client' })\n  .pipe(minify())\n  .pipe(gulp.dest('build'));   \n```\n\n3. gulp.dest(path[,options])  \n说明：watch方法用于监听文件变化，一被变化就执行指定任务  \nglob：  需要处理的源文件匹配符路径。类型(必填)：String or StringArray；  \nopts：  类型(可选)：Object 具体参看https://github.com/shama/gaze；  \ntasks：  类型(必填)：StringArray 需要执行的任务的名称数组；  \ncb(event)：  类型(可选)：Function 每个文件变化执行的回调函数；\n```js\n.pipe(gulp.dest('build')); \n```\n\n4. gulp.watch(glob[,opts],tasks) or gulp.task(glob [,opts ,cd])  \n说明：watch方法用于监听文件变化，一被变化就执行指定任务  \nglob：  需要处理的源文件匹配符路径。类型(必填)：String or StringArray；  \nopts：  类型(可选)：Object 具体参看https://github.com/shama/gaze；  \ntasks：  类型(必填)：StringArray 需要执行的任务的名称数组；  \ncb(event)：  类型(可选)：Function 每个文件变化执行的回调函数；\n\n\n## 如何写\n首先创建 gulpfile 文件  \n利用任何文本编辑器在项目大的根目录下创建一个名为 gulpfile.js 的文件  \n各个API就不讲了，官网都有，[Gulp官网直通车](https://www.gulpjs.com.cn/docs/api/concepts/) \n\n\n1. 项目初始化 `npm init` \n2. 安装全局gulp \n```js\nnpm install gulp -g //全局安装\nnpm install gulp --save-dev //本地安装并加入package.json\n```\n3. 这里用了一个gulp插件 gulp-uglify，安装 `npm i gulp-uglify -D`\n4. 定义一个gulp任务`gulp.task(name[,deps],fn)`   \n\n就先写个压缩 js 吧\n```js\nconst gulp = require(\"gulp\");//全局gulp\nconst uglify = require(\"gulp-uglify\"); //压缩js\n\n  //压缩js文件\n  gulp.task(\"script\", function() {\n    //找到文件\n    gulp\n      .src(\"js/*.js\")\n      //压缩文件\n      .pipe(uglify())\n      //保存压缩后的文件\n      .pipe(gulp.dest(\"dist/js\"));\n  });\n```\n5. 运行gulp\ngulpfile统计目录下终端运行`gulp.script`\n\n\n\n","slug":"gulp入门（一）","published":1,"updated":"2021-03-29T05:44:19.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hypf000by4tzec79cz1n","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>说到前端常见的构建工具，有Webpack/Grunt/Gulp<br>这里简述一下它们都是干什么的：<br>Grunt 和 Gulp 是非常相似的东西，能实现的功能是一样的，当然你可能 Gulp 听的 Grunt 多，通俗的讲，可以把 Gulp 看作 Grunt 的加强版。相对于 Grunt，Gulp增加了监听文件、读写文件、流式处理的功能。<br>Webpack 是一个打包模块化 JavaScript 的工具，在 Webpack 里一切文件皆模块(JavaScript、CSS、SCSS、图片、模板)，通过 Loader 转换文件，通过 Plugin 注入钩子，最后输出由多个模块组合成的文件。经过 Webpack 的处理，最终会输出浏览器能使用的静态资源。使用Vue的小伙伴再熟悉不过，Webpack 专注于构建模块化项目。Webpack的缺点也很明显是只能用于采用模块化开发的项目。<br>今天重点讲gulp；</p>\n<h2 id=\"Gulp是什么？\"><a href=\"#Gulp是什么？\" class=\"headerlink\" title=\"Gulp是什么？\"></a>Gulp是什么？</h2><p>Gulp是前端自动化的工具，它能用来做很多很多繁琐的事情，大大便利了前端开发工作流程</p>\n<ol>\n<li>搭建web服务器</li>\n<li>使用预处理器Sass，Less</li>\n<li>压缩优化，可以压缩JS CSS Html 图片</li>\n<li>自动将更新变化的代码实时显示在浏览器</li>\n<li>前端测试<br>…… </li>\n</ol>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><p>Gulp 是一个基于流的自动化构建工具。 除了可以管理和执行任务，还支持监听文件、读写文件。Gulp 被设计得非常简单，只通过下面5种个方法就可以胜任几乎所有构建场景：</p>\n<ul>\n<li>通过 gulp.task 注册一个任务；</li>\n<li>通过 gulp.run 执行任务；</li>\n<li>通过 gulp.watch 监听文件变化；</li>\n<li>通过 gulp.src 读取文件；</li>\n<li>通过 gulp.dest 写文件。</li>\n</ul>\n<h3 id=\"简单语法\"><a href=\"#简单语法\" class=\"headerlink\" title=\"简单语法\"></a>简单语法</h3><ol>\n<li><p>gulp.task(name[,deps],fn)<br>说明：定义一个gulp任务<br>name: 类型(必填)：String 指定任务的名称（不应该有空格）<br>deps:类型(可选)：StringArray，该任务依赖的任务（执行name任务要先去执行的任务）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'A'</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'A'</span>) </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gulp.task(<span class=\"string\">'B'</span> , [<span class=\"string\">'A'</span>] , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//运行B之前先去运行A</span></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'B'</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>gulp.src(globs[, options])<br>说明：src方法指定需要处理的源文件路径，返回当前文件流至可用插件  </p>\n</li>\n</ol>\n<p>globs: 类型(必填)：String/StringArray  需要处理的源文件匹配符路径  </p>\n<p>通配符路径匹配示例：<br>　　“src/a.js”：指定具体文件；<br>　　“<em>”：匹配所有文件    例：src/</em>.js(包含src下的所有js文件)；<br>　　“<strong>”：匹配0个或多个子文件夹    例：src/</strong>/<em>.js(包含src的0个或多个子文件夹下的js文件)；<br>　　“{}”：匹配多个属性    例：src/{a,b}.js(包含a.js和b.js文件)  src/</em>.{jpg,png,gif}(src下的所有jpg/png/gif文件)；<br>　　“!”：排除文件    例：!src/a.js(不包含src下的a.js文件)；  </p>\n<p>options:类型(可选)：Object 三个属性 buffer read base<br>　　options.buffer：类型：Boolean  默认：true 设置为false，将返回file.content的流并且不缓冲文件，处理大文件时非常有用；<br>　　options.read：  类型：Boolean  默认：true 设置false，将不执行读取文件操作，返回null；<br>　　options.base：  类型：String  设置输出路径以某个路径的某个组成部分为基础向后拼接<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src(<span class=\"string\">'client/js/**/*.js'</span>) </span><br><span class=\"line\">  .pipe(minify())</span><br><span class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'build'</span>));   </span><br><span class=\"line\"> </span><br><span class=\"line\">gulp.src(<span class=\"string\">'client/js/**/*.js'</span>, &#123; <span class=\"attr\">base</span>: <span class=\"string\">'client'</span> &#125;)</span><br><span class=\"line\">  .pipe(minify())</span><br><span class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'build'</span>));</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li><p>gulp.dest(path[,options])<br>说明：watch方法用于监听文件变化，一被变化就执行指定任务<br>glob：  需要处理的源文件匹配符路径。类型(必填)：String or StringArray；<br>opts：  类型(可选)：Object 具体参看<a href=\"https://github.com/shama/gaze；\" target=\"_blank\" rel=\"noopener\">https://github.com/shama/gaze；</a><br>tasks：  类型(必填)：StringArray 需要执行的任务的名称数组；<br>cb(event)：  类型(可选)：Function 每个文件变化执行的回调函数；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.pipe(gulp.dest(<span class=\"string\">'build'</span>));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>gulp.watch(glob[,opts],tasks) or gulp.task(glob [,opts ,cd])<br>说明：watch方法用于监听文件变化，一被变化就执行指定任务<br>glob：  需要处理的源文件匹配符路径。类型(必填)：String or StringArray；<br>opts：  类型(可选)：Object 具体参看<a href=\"https://github.com/shama/gaze；\" target=\"_blank\" rel=\"noopener\">https://github.com/shama/gaze；</a><br>tasks：  类型(必填)：StringArray 需要执行的任务的名称数组；<br>cb(event)：  类型(可选)：Function 每个文件变化执行的回调函数；</p>\n</li>\n</ol>\n<h2 id=\"如何写\"><a href=\"#如何写\" class=\"headerlink\" title=\"如何写\"></a>如何写</h2><p>首先创建 gulpfile 文件<br>利用任何文本编辑器在项目大的根目录下创建一个名为 gulpfile.js 的文件<br>各个API就不讲了，官网都有，<a href=\"https://www.gulpjs.com.cn/docs/api/concepts/\" target=\"_blank\" rel=\"noopener\">Gulp官网直通车</a> </p>\n<ol>\n<li>项目初始化 <code>npm init</code> </li>\n<li><p>安装全局gulp </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp -g <span class=\"comment\">//全局安装</span></span><br><span class=\"line\">npm install gulp --save-dev <span class=\"comment\">//本地安装并加入package.json</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这里用了一个gulp插件 gulp-uglify，安装 <code>npm i gulp-uglify -D</code></p>\n</li>\n<li>定义一个gulp任务<code>gulp.task(name[,deps],fn)</code>   </li>\n</ol>\n<p>就先写个压缩 js 吧<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp\"</span>);<span class=\"comment\">//全局gulp</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-uglify\"</span>); <span class=\"comment\">//压缩js</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//压缩js文件</span></span><br><span class=\"line\">  gulp.task(<span class=\"string\">\"script\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//找到文件</span></span><br><span class=\"line\">    gulp</span><br><span class=\"line\">      .src(<span class=\"string\">\"js/*.js\"</span>)</span><br><span class=\"line\">      <span class=\"comment\">//压缩文件</span></span><br><span class=\"line\">      .pipe(uglify())</span><br><span class=\"line\">      <span class=\"comment\">//保存压缩后的文件</span></span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/js\"</span>));</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"5\">\n<li>运行gulp<br>gulpfile统计目录下终端运行<code>gulp.script</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>说到前端常见的构建工具，有Webpack/Grunt/Gulp<br>这里简述一下它们都是干什么的：<br>Grunt 和 Gulp 是非常相似的东西，能实现的功能是一样的，当然你可能 Gulp 听的 Grunt 多，通俗的讲，可以把 Gulp 看作 Grunt 的加强版。相对于 Grunt，Gulp增加了监听文件、读写文件、流式处理的功能。<br>Webpack 是一个打包模块化 JavaScript 的工具，在 Webpack 里一切文件皆模块(JavaScript、CSS、SCSS、图片、模板)，通过 Loader 转换文件，通过 Plugin 注入钩子，最后输出由多个模块组合成的文件。经过 Webpack 的处理，最终会输出浏览器能使用的静态资源。使用Vue的小伙伴再熟悉不过，Webpack 专注于构建模块化项目。Webpack的缺点也很明显是只能用于采用模块化开发的项目。<br>今天重点讲gulp；</p>\n<h2 id=\"Gulp是什么？\"><a href=\"#Gulp是什么？\" class=\"headerlink\" title=\"Gulp是什么？\"></a>Gulp是什么？</h2><p>Gulp是前端自动化的工具，它能用来做很多很多繁琐的事情，大大便利了前端开发工作流程</p>\n<ol>\n<li>搭建web服务器</li>\n<li>使用预处理器Sass，Less</li>\n<li>压缩优化，可以压缩JS CSS Html 图片</li>\n<li>自动将更新变化的代码实时显示在浏览器</li>\n<li>前端测试<br>…… </li>\n</ol>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><p>Gulp 是一个基于流的自动化构建工具。 除了可以管理和执行任务，还支持监听文件、读写文件。Gulp 被设计得非常简单，只通过下面5种个方法就可以胜任几乎所有构建场景：</p>\n<ul>\n<li>通过 gulp.task 注册一个任务；</li>\n<li>通过 gulp.run 执行任务；</li>\n<li>通过 gulp.watch 监听文件变化；</li>\n<li>通过 gulp.src 读取文件；</li>\n<li>通过 gulp.dest 写文件。</li>\n</ul>\n<h3 id=\"简单语法\"><a href=\"#简单语法\" class=\"headerlink\" title=\"简单语法\"></a>简单语法</h3><ol>\n<li><p>gulp.task(name[,deps],fn)<br>说明：定义一个gulp任务<br>name: 类型(必填)：String 指定任务的名称（不应该有空格）<br>deps:类型(可选)：StringArray，该任务依赖的任务（执行name任务要先去执行的任务）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'A'</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'A'</span>) </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gulp.task(<span class=\"string\">'B'</span> , [<span class=\"string\">'A'</span>] , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//运行B之前先去运行A</span></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'B'</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>gulp.src(globs[, options])<br>说明：src方法指定需要处理的源文件路径，返回当前文件流至可用插件  </p>\n</li>\n</ol>\n<p>globs: 类型(必填)：String/StringArray  需要处理的源文件匹配符路径  </p>\n<p>通配符路径匹配示例：<br>　　“src/a.js”：指定具体文件；<br>　　“<em>”：匹配所有文件    例：src/</em>.js(包含src下的所有js文件)；<br>　　“<strong>”：匹配0个或多个子文件夹    例：src/</strong>/<em>.js(包含src的0个或多个子文件夹下的js文件)；<br>　　“{}”：匹配多个属性    例：src/{a,b}.js(包含a.js和b.js文件)  src/</em>.{jpg,png,gif}(src下的所有jpg/png/gif文件)；<br>　　“!”：排除文件    例：!src/a.js(不包含src下的a.js文件)；  </p>\n<p>options:类型(可选)：Object 三个属性 buffer read base<br>　　options.buffer：类型：Boolean  默认：true 设置为false，将返回file.content的流并且不缓冲文件，处理大文件时非常有用；<br>　　options.read：  类型：Boolean  默认：true 设置false，将不执行读取文件操作，返回null；<br>　　options.base：  类型：String  设置输出路径以某个路径的某个组成部分为基础向后拼接<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.src(<span class=\"string\">'client/js/**/*.js'</span>) </span><br><span class=\"line\">  .pipe(minify())</span><br><span class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'build'</span>));   </span><br><span class=\"line\"> </span><br><span class=\"line\">gulp.src(<span class=\"string\">'client/js/**/*.js'</span>, &#123; <span class=\"attr\">base</span>: <span class=\"string\">'client'</span> &#125;)</span><br><span class=\"line\">  .pipe(minify())</span><br><span class=\"line\">  .pipe(gulp.dest(<span class=\"string\">'build'</span>));</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li><p>gulp.dest(path[,options])<br>说明：watch方法用于监听文件变化，一被变化就执行指定任务<br>glob：  需要处理的源文件匹配符路径。类型(必填)：String or StringArray；<br>opts：  类型(可选)：Object 具体参看<a href=\"https://github.com/shama/gaze；\" target=\"_blank\" rel=\"noopener\">https://github.com/shama/gaze；</a><br>tasks：  类型(必填)：StringArray 需要执行的任务的名称数组；<br>cb(event)：  类型(可选)：Function 每个文件变化执行的回调函数；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.pipe(gulp.dest(<span class=\"string\">'build'</span>));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>gulp.watch(glob[,opts],tasks) or gulp.task(glob [,opts ,cd])<br>说明：watch方法用于监听文件变化，一被变化就执行指定任务<br>glob：  需要处理的源文件匹配符路径。类型(必填)：String or StringArray；<br>opts：  类型(可选)：Object 具体参看<a href=\"https://github.com/shama/gaze；\" target=\"_blank\" rel=\"noopener\">https://github.com/shama/gaze；</a><br>tasks：  类型(必填)：StringArray 需要执行的任务的名称数组；<br>cb(event)：  类型(可选)：Function 每个文件变化执行的回调函数；</p>\n</li>\n</ol>\n<h2 id=\"如何写\"><a href=\"#如何写\" class=\"headerlink\" title=\"如何写\"></a>如何写</h2><p>首先创建 gulpfile 文件<br>利用任何文本编辑器在项目大的根目录下创建一个名为 gulpfile.js 的文件<br>各个API就不讲了，官网都有，<a href=\"https://www.gulpjs.com.cn/docs/api/concepts/\" target=\"_blank\" rel=\"noopener\">Gulp官网直通车</a> </p>\n<ol>\n<li>项目初始化 <code>npm init</code> </li>\n<li><p>安装全局gulp </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp -g <span class=\"comment\">//全局安装</span></span><br><span class=\"line\">npm install gulp --save-dev <span class=\"comment\">//本地安装并加入package.json</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这里用了一个gulp插件 gulp-uglify，安装 <code>npm i gulp-uglify -D</code></p>\n</li>\n<li>定义一个gulp任务<code>gulp.task(name[,deps],fn)</code>   </li>\n</ol>\n<p>就先写个压缩 js 吧<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp\"</span>);<span class=\"comment\">//全局gulp</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-uglify\"</span>); <span class=\"comment\">//压缩js</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//压缩js文件</span></span><br><span class=\"line\">  gulp.task(<span class=\"string\">\"script\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//找到文件</span></span><br><span class=\"line\">    gulp</span><br><span class=\"line\">      .src(<span class=\"string\">\"js/*.js\"</span>)</span><br><span class=\"line\">      <span class=\"comment\">//压缩文件</span></span><br><span class=\"line\">      .pipe(uglify())</span><br><span class=\"line\">      <span class=\"comment\">//保存压缩后的文件</span></span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/js\"</span>));</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<ol start=\"5\">\n<li>运行gulp<br>gulpfile统计目录下终端运行<code>gulp.script</code></li>\n</ol>\n"},{"title":"gulp入门(三)","date":"2019-11-13T05:52:14.000Z","author":"胡豪","_content":"\n## gulp3改造gulp4\ngulp3与gulp4的写法存在区别，此篇用来对比整个项目gulpfile.js文件的异同。\n如果你安装的是gulp3，想升级使用gulp4，可以使用命令`npm install gulp@4.0`\n\n如果你安装的是gulp4，想h回退使用gulp3，可以使用命令`npm install gulp@3.9.1 `\n\n## 一下是简单的项目gulpfile.js文件实例\n### gulp@3.9.1版本\n```js\nconst gulp = require(\"gulp\");//全局gulp\nconst uglify = require(\"gulp-uglify\"); //压缩js\nconst gulpif = require(\"gulp-if\");//if条件\nconst cssUglify = require('gulp-minify-css');//压缩css\nconst gulpclean = require(\"gulp-clean\");//清除文件\n\n\n//过滤条件\nvar conditionJs = function(f) { \n  if (f.path.indexOf(\".min.js\", f.path.length - \".min.js\".length) !== -1) {\n    return false;\n  } \n  return true;\n};\nvar conditionCss = function(f) { \n  if (f.path.indexOf(\".min.css\", f.path.length - \".min.css\".length) !== -1) {\n    return false;\n  } \n  return true;\n};\n\n\ngulp.task('clean' , function(){\n  gulp.src([\n     //'dist', //删除dist整个文件夹\n     'dist/*', //删除dist下的test写任意子文件夹里的文件\n     '!package.json'  //不删除package.json文件\n    ] ).pipe(gulpclean());\n});\n\ngulp.task('html', function () {\n  gulp.src([\"src/*.html\",\"src/favicon.ico\"])\n      .pipe(gulp.dest(\"dist/\"))\n})\n\ngulp.task('css',function(){\n  gulp.src('src/css/*.css')\n      .pipe(gulpif(conditionCss, cssUglify())) \n      .pipe(gulp.dest('dist/css'))\n})\ngulp.task('cssmin',['css'], function () {\n  gulp.src('src/css/font/*')\n      .pipe(gulp.dest(\"dist/css/font\"));\n})\n\n//压缩js文件\ngulp.task(\"js\", function() {\n  gulp.src(\"src/js/*.js\")\n      .pipe(gulpif(conditionJs, uglify()))\n      .pipe(gulp.dest(\"dist/js\"));\n});\n//拷贝不需要处理js的文件\ngulp.task('jsmin',['js'], function () {\n  gulp.src('src/js/layer/**')\n      .pipe(gulp.dest(\"dist/js/layer\"));\n})\n\ngulp.task('copyImage',['js'], function () {\n  gulp.src('src/img/**/* ') \n      .pipe(gulp.dest(\"dist/img\"));\n})\n\ngulp.task(\"build\", [\"html\",\"cssmin\",\"jsmin\",\"copyImage\"]);\n```\n\n### gulp@4版本\n```js\nconst gulp = require(\"gulp\");//全局gulp\nconst uglify = require(\"gulp-uglify\"); //压缩js\nconst gulpif = require(\"gulp-if\");//if条件\nconst cssUglify = require('gulp-minify-css');//压缩css\nconst gulpclean = require(\"gulp-clean\");//清除文件\n\n//过滤条件\nvar conditionJs = function(f) { \n  if (f.path.indexOf(\".min.js\", f.path.length - \".min.js\".length) !== -1) {\n    return false;\n  } \n  return true;\n};\nvar conditionCss = function(f) { \n  if (f.path.indexOf(\".min.css\", f.path.length - \".min.css\".length) !== -1) {\n    return false;\n  } \n  return true;\n};\n\n\n//执行任务\ngulp.task('clean' , function(){\n  return gulp.src([\n     //'dist', //删除dist整个文件夹\n     'dist/*', //删除dist下的test写任意子文件夹里的文件\n     '!package.json'  //不删除package.json文件\n    ] ).pipe(gulpclean());\n});\n\ngulp.task('html', function () {\n  return gulp.src([\"src/*.html\",\"src/favicon.ico\"])\n      .pipe(gulp.dest(\"dist/\"))\n})\n\ngulp.task('css',function(){\n  return gulp.src('src/css/*.css')\n      .pipe(gulpif(conditionCss, cssUglify())) \n      .pipe(gulp.dest('dist/css'))\n})\ngulp.task('cssmin',gulp.series('css', function () {\n  return gulp.src('src/css/font/*')\n      .pipe(gulp.dest(\"dist/css/font\"));\n}))\n\n//压缩js文件\ngulp.task(\"js\", function() { \n  return gulp.src(\"src/js/*.js\")\n      .pipe(gulpif(conditionJs, uglify()))\n      .pipe(gulp.dest(\"dist/js\"));\n});\n//拷贝不需要处理js的文件\ngulp.task('jsmin',gulp.series('js', function () {\n  return gulp.src('src/js/layer/**')\n      .pipe(gulp.dest(\"dist/js/layer\"));\n}))\n\ngulp.task('copyImage', function () {\n  return gulp.src('src/img/**/* ') \n      .pipe(gulp.dest(\"dist/img\"));\n})\n\ngulp.task('build',gulp.series('clean',gulp.parallel('html','cssmin','jsmin','copyImage')));\n```\n\n## 总结\ngulp系列到此为止，介绍的也是一些常规的基础用法，万丈高楼平地起，高楼怎么造就看砖头怎么码了。有兴趣的去看看前辈grunt [click to link](https://www.gruntjs.net/)","source":"_posts/gulp入门（三）.md","raw":"---\ntitle: gulp入门(三)\ndate: 2019-11-13 13:52:14\nauthor: 胡豪\ncategories:\n  - gulp\ntags:\n  - gulp\n---\n\n## gulp3改造gulp4\ngulp3与gulp4的写法存在区别，此篇用来对比整个项目gulpfile.js文件的异同。\n如果你安装的是gulp3，想升级使用gulp4，可以使用命令`npm install gulp@4.0`\n\n如果你安装的是gulp4，想h回退使用gulp3，可以使用命令`npm install gulp@3.9.1 `\n\n## 一下是简单的项目gulpfile.js文件实例\n### gulp@3.9.1版本\n```js\nconst gulp = require(\"gulp\");//全局gulp\nconst uglify = require(\"gulp-uglify\"); //压缩js\nconst gulpif = require(\"gulp-if\");//if条件\nconst cssUglify = require('gulp-minify-css');//压缩css\nconst gulpclean = require(\"gulp-clean\");//清除文件\n\n\n//过滤条件\nvar conditionJs = function(f) { \n  if (f.path.indexOf(\".min.js\", f.path.length - \".min.js\".length) !== -1) {\n    return false;\n  } \n  return true;\n};\nvar conditionCss = function(f) { \n  if (f.path.indexOf(\".min.css\", f.path.length - \".min.css\".length) !== -1) {\n    return false;\n  } \n  return true;\n};\n\n\ngulp.task('clean' , function(){\n  gulp.src([\n     //'dist', //删除dist整个文件夹\n     'dist/*', //删除dist下的test写任意子文件夹里的文件\n     '!package.json'  //不删除package.json文件\n    ] ).pipe(gulpclean());\n});\n\ngulp.task('html', function () {\n  gulp.src([\"src/*.html\",\"src/favicon.ico\"])\n      .pipe(gulp.dest(\"dist/\"))\n})\n\ngulp.task('css',function(){\n  gulp.src('src/css/*.css')\n      .pipe(gulpif(conditionCss, cssUglify())) \n      .pipe(gulp.dest('dist/css'))\n})\ngulp.task('cssmin',['css'], function () {\n  gulp.src('src/css/font/*')\n      .pipe(gulp.dest(\"dist/css/font\"));\n})\n\n//压缩js文件\ngulp.task(\"js\", function() {\n  gulp.src(\"src/js/*.js\")\n      .pipe(gulpif(conditionJs, uglify()))\n      .pipe(gulp.dest(\"dist/js\"));\n});\n//拷贝不需要处理js的文件\ngulp.task('jsmin',['js'], function () {\n  gulp.src('src/js/layer/**')\n      .pipe(gulp.dest(\"dist/js/layer\"));\n})\n\ngulp.task('copyImage',['js'], function () {\n  gulp.src('src/img/**/* ') \n      .pipe(gulp.dest(\"dist/img\"));\n})\n\ngulp.task(\"build\", [\"html\",\"cssmin\",\"jsmin\",\"copyImage\"]);\n```\n\n### gulp@4版本\n```js\nconst gulp = require(\"gulp\");//全局gulp\nconst uglify = require(\"gulp-uglify\"); //压缩js\nconst gulpif = require(\"gulp-if\");//if条件\nconst cssUglify = require('gulp-minify-css');//压缩css\nconst gulpclean = require(\"gulp-clean\");//清除文件\n\n//过滤条件\nvar conditionJs = function(f) { \n  if (f.path.indexOf(\".min.js\", f.path.length - \".min.js\".length) !== -1) {\n    return false;\n  } \n  return true;\n};\nvar conditionCss = function(f) { \n  if (f.path.indexOf(\".min.css\", f.path.length - \".min.css\".length) !== -1) {\n    return false;\n  } \n  return true;\n};\n\n\n//执行任务\ngulp.task('clean' , function(){\n  return gulp.src([\n     //'dist', //删除dist整个文件夹\n     'dist/*', //删除dist下的test写任意子文件夹里的文件\n     '!package.json'  //不删除package.json文件\n    ] ).pipe(gulpclean());\n});\n\ngulp.task('html', function () {\n  return gulp.src([\"src/*.html\",\"src/favicon.ico\"])\n      .pipe(gulp.dest(\"dist/\"))\n})\n\ngulp.task('css',function(){\n  return gulp.src('src/css/*.css')\n      .pipe(gulpif(conditionCss, cssUglify())) \n      .pipe(gulp.dest('dist/css'))\n})\ngulp.task('cssmin',gulp.series('css', function () {\n  return gulp.src('src/css/font/*')\n      .pipe(gulp.dest(\"dist/css/font\"));\n}))\n\n//压缩js文件\ngulp.task(\"js\", function() { \n  return gulp.src(\"src/js/*.js\")\n      .pipe(gulpif(conditionJs, uglify()))\n      .pipe(gulp.dest(\"dist/js\"));\n});\n//拷贝不需要处理js的文件\ngulp.task('jsmin',gulp.series('js', function () {\n  return gulp.src('src/js/layer/**')\n      .pipe(gulp.dest(\"dist/js/layer\"));\n}))\n\ngulp.task('copyImage', function () {\n  return gulp.src('src/img/**/* ') \n      .pipe(gulp.dest(\"dist/img\"));\n})\n\ngulp.task('build',gulp.series('clean',gulp.parallel('html','cssmin','jsmin','copyImage')));\n```\n\n## 总结\ngulp系列到此为止，介绍的也是一些常规的基础用法，万丈高楼平地起，高楼怎么造就看砖头怎么码了。有兴趣的去看看前辈grunt [click to link](https://www.gruntjs.net/)","slug":"gulp入门（三）","published":1,"updated":"2021-03-29T05:44:19.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hypi000fy4tzae3zbvfi","content":"<h2 id=\"gulp3改造gulp4\"><a href=\"#gulp3改造gulp4\" class=\"headerlink\" title=\"gulp3改造gulp4\"></a>gulp3改造gulp4</h2><p>gulp3与gulp4的写法存在区别，此篇用来对比整个项目gulpfile.js文件的异同。<br>如果你安装的是gulp3，想升级使用gulp4，可以使用命令<code>npm install gulp@4.0</code></p>\n<p>如果你安装的是gulp4，想h回退使用gulp3，可以使用命令<code>npm install gulp@3.9.1</code></p>\n<h2 id=\"一下是简单的项目gulpfile-js文件实例\"><a href=\"#一下是简单的项目gulpfile-js文件实例\" class=\"headerlink\" title=\"一下是简单的项目gulpfile.js文件实例\"></a>一下是简单的项目gulpfile.js文件实例</h2><h3 id=\"gulp-3-9-1版本\"><a href=\"#gulp-3-9-1版本\" class=\"headerlink\" title=\"gulp@3.9.1版本\"></a><a href=\"mailto:gulp@3.9.1\" target=\"_blank\" rel=\"noopener\">gulp@3.9.1</a>版本</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp\"</span>);<span class=\"comment\">//全局gulp</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-uglify\"</span>); <span class=\"comment\">//压缩js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gulpif = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-if\"</span>);<span class=\"comment\">//if条件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cssUglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);<span class=\"comment\">//压缩css</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gulpclean = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-clean\"</span>);<span class=\"comment\">//清除文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//过滤条件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> conditionJs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (f.path.indexOf(<span class=\"string\">\".min.js\"</span>, f.path.length - <span class=\"string\">\".min.js\"</span>.length) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> conditionCss = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (f.path.indexOf(<span class=\"string\">\".min.css\"</span>, f.path.length - <span class=\"string\">\".min.css\"</span>.length) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src([</span><br><span class=\"line\">     <span class=\"comment\">//'dist', //删除dist整个文件夹</span></span><br><span class=\"line\">     <span class=\"string\">'dist/*'</span>, <span class=\"comment\">//删除dist下的test写任意子文件夹里的文件</span></span><br><span class=\"line\">     <span class=\"string\">'!package.json'</span>  <span class=\"comment\">//不删除package.json文件</span></span><br><span class=\"line\">    ] ).pipe(gulpclean());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.src([<span class=\"string\">\"src/*.html\"</span>,<span class=\"string\">\"src/favicon.ico\"</span>])</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/\"</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'css'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'src/css/*.css'</span>)</span><br><span class=\"line\">      .pipe(gulpif(conditionCss, cssUglify())) </span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">gulp.task(<span class=\"string\">'cssmin'</span>,[<span class=\"string\">'css'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'src/css/font/*'</span>)</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/css/font\"</span>));</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//压缩js文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"js\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">\"src/js/*.js\"</span>)</span><br><span class=\"line\">      .pipe(gulpif(conditionJs, uglify()))</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/js\"</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//拷贝不需要处理js的文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'jsmin'</span>,[<span class=\"string\">'js'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'src/js/layer/**'</span>)</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/js/layer\"</span>));</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'copyImage'</span>,[<span class=\"string\">'js'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'src/img/**/* '</span>) </span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/img\"</span>));</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"build\"</span>, [<span class=\"string\">\"html\"</span>,<span class=\"string\">\"cssmin\"</span>,<span class=\"string\">\"jsmin\"</span>,<span class=\"string\">\"copyImage\"</span>]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"gulp-4版本\"><a href=\"#gulp-4版本\" class=\"headerlink\" title=\"gulp@4版本\"></a>gulp@4版本</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp\"</span>);<span class=\"comment\">//全局gulp</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-uglify\"</span>); <span class=\"comment\">//压缩js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gulpif = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-if\"</span>);<span class=\"comment\">//if条件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cssUglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);<span class=\"comment\">//压缩css</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gulpclean = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-clean\"</span>);<span class=\"comment\">//清除文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//过滤条件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> conditionJs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (f.path.indexOf(<span class=\"string\">\".min.js\"</span>, f.path.length - <span class=\"string\">\".min.js\"</span>.length) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> conditionCss = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (f.path.indexOf(<span class=\"string\">\".min.css\"</span>, f.path.length - <span class=\"string\">\".min.css\"</span>.length) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([</span><br><span class=\"line\">     <span class=\"comment\">//'dist', //删除dist整个文件夹</span></span><br><span class=\"line\">     <span class=\"string\">'dist/*'</span>, <span class=\"comment\">//删除dist下的test写任意子文件夹里的文件</span></span><br><span class=\"line\">     <span class=\"string\">'!package.json'</span>  <span class=\"comment\">//不删除package.json文件</span></span><br><span class=\"line\">    ] ).pipe(gulpclean());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">\"src/*.html\"</span>,<span class=\"string\">\"src/favicon.ico\"</span>])</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/\"</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'css'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/css/*.css'</span>)</span><br><span class=\"line\">      .pipe(gulpif(conditionCss, cssUglify())) </span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">gulp.task(<span class=\"string\">'cssmin'</span>,gulp.series(<span class=\"string\">'css'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/css/font/*'</span>)</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/css/font\"</span>));</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//压缩js文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"js\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">\"src/js/*.js\"</span>)</span><br><span class=\"line\">      .pipe(gulpif(conditionJs, uglify()))</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/js\"</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//拷贝不需要处理js的文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'jsmin'</span>,gulp.series(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/js/layer/**'</span>)</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/js/layer\"</span>));</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'copyImage'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/img/**/* '</span>) </span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/img\"</span>));</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build'</span>,gulp.series(<span class=\"string\">'clean'</span>,gulp.parallel(<span class=\"string\">'html'</span>,<span class=\"string\">'cssmin'</span>,<span class=\"string\">'jsmin'</span>,<span class=\"string\">'copyImage'</span>)));</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>gulp系列到此为止，介绍的也是一些常规的基础用法，万丈高楼平地起，高楼怎么造就看砖头怎么码了。有兴趣的去看看前辈grunt <a href=\"https://www.gruntjs.net/\" target=\"_blank\" rel=\"noopener\">click to link</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"gulp3改造gulp4\"><a href=\"#gulp3改造gulp4\" class=\"headerlink\" title=\"gulp3改造gulp4\"></a>gulp3改造gulp4</h2><p>gulp3与gulp4的写法存在区别，此篇用来对比整个项目gulpfile.js文件的异同。<br>如果你安装的是gulp3，想升级使用gulp4，可以使用命令<code>npm install gulp@4.0</code></p>\n<p>如果你安装的是gulp4，想h回退使用gulp3，可以使用命令<code>npm install gulp@3.9.1</code></p>\n<h2 id=\"一下是简单的项目gulpfile-js文件实例\"><a href=\"#一下是简单的项目gulpfile-js文件实例\" class=\"headerlink\" title=\"一下是简单的项目gulpfile.js文件实例\"></a>一下是简单的项目gulpfile.js文件实例</h2><h3 id=\"gulp-3-9-1版本\"><a href=\"#gulp-3-9-1版本\" class=\"headerlink\" title=\"gulp@3.9.1版本\"></a><a href=\"mailto:gulp@3.9.1\" target=\"_blank\" rel=\"noopener\">gulp@3.9.1</a>版本</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp\"</span>);<span class=\"comment\">//全局gulp</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-uglify\"</span>); <span class=\"comment\">//压缩js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gulpif = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-if\"</span>);<span class=\"comment\">//if条件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cssUglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);<span class=\"comment\">//压缩css</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gulpclean = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-clean\"</span>);<span class=\"comment\">//清除文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//过滤条件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> conditionJs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (f.path.indexOf(<span class=\"string\">\".min.js\"</span>, f.path.length - <span class=\"string\">\".min.js\"</span>.length) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> conditionCss = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (f.path.indexOf(<span class=\"string\">\".min.css\"</span>, f.path.length - <span class=\"string\">\".min.css\"</span>.length) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src([</span><br><span class=\"line\">     <span class=\"comment\">//'dist', //删除dist整个文件夹</span></span><br><span class=\"line\">     <span class=\"string\">'dist/*'</span>, <span class=\"comment\">//删除dist下的test写任意子文件夹里的文件</span></span><br><span class=\"line\">     <span class=\"string\">'!package.json'</span>  <span class=\"comment\">//不删除package.json文件</span></span><br><span class=\"line\">    ] ).pipe(gulpclean());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.src([<span class=\"string\">\"src/*.html\"</span>,<span class=\"string\">\"src/favicon.ico\"</span>])</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/\"</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'css'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'src/css/*.css'</span>)</span><br><span class=\"line\">      .pipe(gulpif(conditionCss, cssUglify())) </span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">gulp.task(<span class=\"string\">'cssmin'</span>,[<span class=\"string\">'css'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'src/css/font/*'</span>)</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/css/font\"</span>));</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//压缩js文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"js\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">\"src/js/*.js\"</span>)</span><br><span class=\"line\">      .pipe(gulpif(conditionJs, uglify()))</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/js\"</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//拷贝不需要处理js的文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'jsmin'</span>,[<span class=\"string\">'js'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'src/js/layer/**'</span>)</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/js/layer\"</span>));</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'copyImage'</span>,[<span class=\"string\">'js'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'src/img/**/* '</span>) </span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/img\"</span>));</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"build\"</span>, [<span class=\"string\">\"html\"</span>,<span class=\"string\">\"cssmin\"</span>,<span class=\"string\">\"jsmin\"</span>,<span class=\"string\">\"copyImage\"</span>]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"gulp-4版本\"><a href=\"#gulp-4版本\" class=\"headerlink\" title=\"gulp@4版本\"></a>gulp@4版本</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp\"</span>);<span class=\"comment\">//全局gulp</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-uglify\"</span>); <span class=\"comment\">//压缩js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gulpif = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-if\"</span>);<span class=\"comment\">//if条件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cssUglify = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-minify-css'</span>);<span class=\"comment\">//压缩css</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> gulpclean = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-clean\"</span>);<span class=\"comment\">//清除文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//过滤条件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> conditionJs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (f.path.indexOf(<span class=\"string\">\".min.js\"</span>, f.path.length - <span class=\"string\">\".min.js\"</span>.length) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> conditionCss = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (f.path.indexOf(<span class=\"string\">\".min.css\"</span>, f.path.length - <span class=\"string\">\".min.css\"</span>.length) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'clean'</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([</span><br><span class=\"line\">     <span class=\"comment\">//'dist', //删除dist整个文件夹</span></span><br><span class=\"line\">     <span class=\"string\">'dist/*'</span>, <span class=\"comment\">//删除dist下的test写任意子文件夹里的文件</span></span><br><span class=\"line\">     <span class=\"string\">'!package.json'</span>  <span class=\"comment\">//不删除package.json文件</span></span><br><span class=\"line\">    ] ).pipe(gulpclean());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'html'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src([<span class=\"string\">\"src/*.html\"</span>,<span class=\"string\">\"src/favicon.ico\"</span>])</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/\"</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'css'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/css/*.css'</span>)</span><br><span class=\"line\">      .pipe(gulpif(conditionCss, cssUglify())) </span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">'dist/css'</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">gulp.task(<span class=\"string\">'cssmin'</span>,gulp.series(<span class=\"string\">'css'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/css/font/*'</span>)</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/css/font\"</span>));</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//压缩js文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"js\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">\"src/js/*.js\"</span>)</span><br><span class=\"line\">      .pipe(gulpif(conditionJs, uglify()))</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/js\"</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//拷贝不需要处理js的文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'jsmin'</span>,gulp.series(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/js/layer/**'</span>)</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/js/layer\"</span>));</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'copyImage'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/img/**/* '</span>) </span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/img\"</span>));</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build'</span>,gulp.series(<span class=\"string\">'clean'</span>,gulp.parallel(<span class=\"string\">'html'</span>,<span class=\"string\">'cssmin'</span>,<span class=\"string\">'jsmin'</span>,<span class=\"string\">'copyImage'</span>)));</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>gulp系列到此为止，介绍的也是一些常规的基础用法，万丈高楼平地起，高楼怎么造就看砖头怎么码了。有兴趣的去看看前辈grunt <a href=\"https://www.gruntjs.net/\" target=\"_blank\" rel=\"noopener\">click to link</a></p>\n"},{"title":"for循环创建多个elementUI表单遇到的问题","date":"2019-12-11T07:02:30.000Z","author":"胡豪","_content":"\n## 前言\n\n目前有一个需求就是：点击添加按钮创建一个表单，可以保存删除修改等一系列操作。\n因为是表单所以涉及到需要表单验证。差了很多资料发现都是点击之后添加一条可输入的input框之类，并没整体循环一整个表单的。\n\n![QQ浏览器截图20191210161509](http://tvax2.sinaimg.cn/large/b535b7d3ly1g9sx2vtpvsj20py0f7dgp.jpg)\n\n上图是一个商品列表，商品列表的每一项的授权按钮，都会弹出一个授权的表单，遇到的问题是，elementUI的表单放在for循环里渲染出来,那么常规的提交表单和清空表单会报错，显示`this.$refs[formName].validate()方法不存在`，组件引入都没有问题;但表单放在for循环外面就没有问题，经过试验发现是form表单放在for循环里出现的问题;\n\n改动如下,就不会出现问题：\n```js\n<template>\n  <div v-for=\"(item,index) in ProductList\" :key=\"index\" class=\"customCenList\">\n    <div class=\"list\">\n      <img src=\"~assets/images/rankCar.png\">\n      <span style=\"width:200px;\">{{ item.name }}</span>\n      <span><nuxt-link to=\"/\">\n        <span class=\"downFont\">下载样品</span>\n      </nuxt-link></span>\n      <span style=\"width: 100px;\">{{ item.number }}台</span>\n      <span style=\"width: 140px;\">￥{{ item.customizedDeposit }}</span>\n      <span style=\"width: 140px;\">￥{{ item.stockDeposit }}</span>\n      <div v-if=\"item.isHead\" class=\"listButton\">\n        <span @click=\"showLicense1(item.id)\">查看授权客户</span><br>\n        <span @click=\"showLicense2(item.id)\">授权</span>\n      </div>\n    </div>\n\n    <!-- 授权 --> \n    <div v-show=\"item.id==currentId&&showItem1\" class=\"license1\">\n      <div class=\"boxName\">\n        <span>授权</span><span @click=\"retract1\">收起</span>\n      </div> \n      <ElForm ref=\"myform\" :model=\"myform\" :rules=\"rules\" :inline=\"true\">\n        <FormItem prop=\"price\" label=\"购买价格:\" style=\"margin-right:30px;\">\n          <ElInput v-model=\"myform.price\" size=\"small\" style=\"width:100px\" oninput=\"value=value.replace(/[^\\d.]/g,'')\" /> \n        </FormItem>\n        <FormItem prop=\"phone\" label=\"手机号:\" style=\"margin-right:30px;\">\n          <ElInput v-model=\"myform.phone\" size=\"small\" style=\"width:200px\" />\n        </FormItem>\n        <FormItem prop=\"company\" label=\"公司名称:\">\n          <ElInput v-model=\"myform.company\" size=\"small\" style=\"width:250px\" />\n        </FormItem>  \n        <div class=\"bottom\">\n          <span>注：授权客户直接向中力购买产品，客户手机号应为注册账户使用手机号</span>\n          <div class=\"bottomBtns clear\">\n            <div class=\"sure\" @click=\"submitForm('myform',index)\">确定</div>\n            <div class=\"cancel\" @click=\"resetForm('myform',index)\">取消</div>\n          </div>\n        </div>\n      </ElForm>\n    </div>\n  </div>\n</template>\n\ndata() {\n  return {\n    formDate: [\n      {\n        id: 0,\n        price: \"\",\n        phone: \"\", \n        company: \"\"\n      },\n      {\n        id: 0,\n        price: \"\",\n        phone: \"\", \n        company: \"\"\n      }\n    ],\n    rules: {\n      price: [\n        { required: true, message: \"请输入价格\", trigger: \"blur\" }\n      ],\n      company: [\n        { required: true, message: \"请输入公司名称\", trigger: \"blur\" }\n      ],\n      phone: [\n        { required: true, message: \"请输入手机号码\", trigger: \"blur\" },\n        {\n          len: 11,\n          pattern: /^1[3-9][0-9]{9}/,\n          message: \"请输入正确的手机号\",\n          trigger: \"blur\"\n        }\n      ]\n    },\n  };\n},\n\n//重置表单\nresetForm(formName,index) {\n  this.$refs[formName][index].resetFields();\n  this.myform.id = 0;\n},\n//表单保存\nsaveForm(formName, index) {\n  this.$refs[formName][index].validate((valid) => {\n    if (valid) {\n      console.log('验证成功！');\n    } else {\n      console.log('error submit!!');\n      return false;\n    }\n  });\n}\n\n```\n\n首先当验证时报错时先看你表单上的ref和保存时refs是否一致。\n```js\n<el-form ref=\"myform\" :model=\"formDate\" :rules=\"rules\">\n\nthis.$refs[formName][index].validate((valid) => {}\n```\n\n\n如果要是循环出多个表单。那么refs输出就是一个数组。所以在验证的时候需要获取到当前表单的下标。\n```js\n<div class=\"sure\" @click=\"submitForm('myform',index)\">确定</div>\n\nthis.$refs[formName][index].validate((valid) => {}\n```\n\n[参考文章](https://blog.csdn.net/weixin_40121676/article/details/101269362 \"参考文章\")","source":"_posts/for循环创建多个elementUI表单遇到的问题.md","raw":"---\ntitle: for循环创建多个elementUI表单遇到的问题\ndate: 2019-12-11 15:02:30\nauthor: 胡豪\ncategories: elementUI\ntags: elementUI\n---\n\n## 前言\n\n目前有一个需求就是：点击添加按钮创建一个表单，可以保存删除修改等一系列操作。\n因为是表单所以涉及到需要表单验证。差了很多资料发现都是点击之后添加一条可输入的input框之类，并没整体循环一整个表单的。\n\n![QQ浏览器截图20191210161509](http://tvax2.sinaimg.cn/large/b535b7d3ly1g9sx2vtpvsj20py0f7dgp.jpg)\n\n上图是一个商品列表，商品列表的每一项的授权按钮，都会弹出一个授权的表单，遇到的问题是，elementUI的表单放在for循环里渲染出来,那么常规的提交表单和清空表单会报错，显示`this.$refs[formName].validate()方法不存在`，组件引入都没有问题;但表单放在for循环外面就没有问题，经过试验发现是form表单放在for循环里出现的问题;\n\n改动如下,就不会出现问题：\n```js\n<template>\n  <div v-for=\"(item,index) in ProductList\" :key=\"index\" class=\"customCenList\">\n    <div class=\"list\">\n      <img src=\"~assets/images/rankCar.png\">\n      <span style=\"width:200px;\">{{ item.name }}</span>\n      <span><nuxt-link to=\"/\">\n        <span class=\"downFont\">下载样品</span>\n      </nuxt-link></span>\n      <span style=\"width: 100px;\">{{ item.number }}台</span>\n      <span style=\"width: 140px;\">￥{{ item.customizedDeposit }}</span>\n      <span style=\"width: 140px;\">￥{{ item.stockDeposit }}</span>\n      <div v-if=\"item.isHead\" class=\"listButton\">\n        <span @click=\"showLicense1(item.id)\">查看授权客户</span><br>\n        <span @click=\"showLicense2(item.id)\">授权</span>\n      </div>\n    </div>\n\n    <!-- 授权 --> \n    <div v-show=\"item.id==currentId&&showItem1\" class=\"license1\">\n      <div class=\"boxName\">\n        <span>授权</span><span @click=\"retract1\">收起</span>\n      </div> \n      <ElForm ref=\"myform\" :model=\"myform\" :rules=\"rules\" :inline=\"true\">\n        <FormItem prop=\"price\" label=\"购买价格:\" style=\"margin-right:30px;\">\n          <ElInput v-model=\"myform.price\" size=\"small\" style=\"width:100px\" oninput=\"value=value.replace(/[^\\d.]/g,'')\" /> \n        </FormItem>\n        <FormItem prop=\"phone\" label=\"手机号:\" style=\"margin-right:30px;\">\n          <ElInput v-model=\"myform.phone\" size=\"small\" style=\"width:200px\" />\n        </FormItem>\n        <FormItem prop=\"company\" label=\"公司名称:\">\n          <ElInput v-model=\"myform.company\" size=\"small\" style=\"width:250px\" />\n        </FormItem>  \n        <div class=\"bottom\">\n          <span>注：授权客户直接向中力购买产品，客户手机号应为注册账户使用手机号</span>\n          <div class=\"bottomBtns clear\">\n            <div class=\"sure\" @click=\"submitForm('myform',index)\">确定</div>\n            <div class=\"cancel\" @click=\"resetForm('myform',index)\">取消</div>\n          </div>\n        </div>\n      </ElForm>\n    </div>\n  </div>\n</template>\n\ndata() {\n  return {\n    formDate: [\n      {\n        id: 0,\n        price: \"\",\n        phone: \"\", \n        company: \"\"\n      },\n      {\n        id: 0,\n        price: \"\",\n        phone: \"\", \n        company: \"\"\n      }\n    ],\n    rules: {\n      price: [\n        { required: true, message: \"请输入价格\", trigger: \"blur\" }\n      ],\n      company: [\n        { required: true, message: \"请输入公司名称\", trigger: \"blur\" }\n      ],\n      phone: [\n        { required: true, message: \"请输入手机号码\", trigger: \"blur\" },\n        {\n          len: 11,\n          pattern: /^1[3-9][0-9]{9}/,\n          message: \"请输入正确的手机号\",\n          trigger: \"blur\"\n        }\n      ]\n    },\n  };\n},\n\n//重置表单\nresetForm(formName,index) {\n  this.$refs[formName][index].resetFields();\n  this.myform.id = 0;\n},\n//表单保存\nsaveForm(formName, index) {\n  this.$refs[formName][index].validate((valid) => {\n    if (valid) {\n      console.log('验证成功！');\n    } else {\n      console.log('error submit!!');\n      return false;\n    }\n  });\n}\n\n```\n\n首先当验证时报错时先看你表单上的ref和保存时refs是否一致。\n```js\n<el-form ref=\"myform\" :model=\"formDate\" :rules=\"rules\">\n\nthis.$refs[formName][index].validate((valid) => {}\n```\n\n\n如果要是循环出多个表单。那么refs输出就是一个数组。所以在验证的时候需要获取到当前表单的下标。\n```js\n<div class=\"sure\" @click=\"submitForm('myform',index)\">确定</div>\n\nthis.$refs[formName][index].validate((valid) => {}\n```\n\n[参考文章](https://blog.csdn.net/weixin_40121676/article/details/101269362 \"参考文章\")","slug":"for循环创建多个elementUI表单遇到的问题","published":1,"updated":"2021-03-29T05:44:19.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hypk000hy4tz51im3n1l","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>目前有一个需求就是：点击添加按钮创建一个表单，可以保存删除修改等一系列操作。<br>因为是表单所以涉及到需要表单验证。差了很多资料发现都是点击之后添加一条可输入的input框之类，并没整体循环一整个表单的。</p>\n<p><img src=\"http://tvax2.sinaimg.cn/large/b535b7d3ly1g9sx2vtpvsj20py0f7dgp.jpg\" alt=\"QQ浏览器截图20191210161509\"></p>\n<p>上图是一个商品列表，商品列表的每一项的授权按钮，都会弹出一个授权的表单，遇到的问题是，elementUI的表单放在for循环里渲染出来,那么常规的提交表单和清空表单会报错，显示<code>this.$refs[formName].validate()方法不存在</code>，组件引入都没有问题;但表单放在for循环外面就没有问题，经过试验发现是form表单放在for循环里出现的问题;</p>\n<p>改动如下,就不会出现问题：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(item,index) in ProductList\"</span> :key=<span class=\"string\">\"index\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"customCenList\"</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"list\"</span>&gt;</span><br><span class=\"line\">      &lt;img src=<span class=\"string\">\"~assets/images/rankCar.png\"</span>&gt;</span><br><span class=\"line\">      &lt;span style=<span class=\"string\">\"width:200px;\"</span>&gt;&#123;&#123; item.name &#125;&#125;&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;span&gt;&lt;nuxt-link to=\"/</span><span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;span class=\"</span>downFont<span class=\"string\">\"&gt;下载样品&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/nuxt-link&gt;&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;span style=\"</span>width: <span class=\"number\">100</span>px;<span class=\"string\">\"&gt;&#123;&#123; item.number &#125;&#125;台&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;span style=\"</span>width: <span class=\"number\">140</span>px;<span class=\"string\">\"&gt;￥&#123;&#123; item.customizedDeposit &#125;&#125;&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;span style=\"</span>width: <span class=\"number\">140</span>px;<span class=\"string\">\"&gt;￥&#123;&#123; item.stockDeposit &#125;&#125;&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div v-if=\"</span>item.isHead<span class=\"string\">\" class=\"</span>listButton<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;span @click=\"</span>showLicense1(item.id)<span class=\"string\">\"&gt;查看授权客户&lt;/span&gt;&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;span @click=\"</span>showLicense2(item.id)<span class=\"string\">\"&gt;授权&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;!-- 授权 --&gt; </span></span><br><span class=\"line\"><span class=\"string\">    &lt;div v-show=\"</span>item.id==currentId&amp;&amp;showItem1<span class=\"string\">\" class=\"</span>license1<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div class=\"</span>boxName<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;span&gt;授权&lt;/span&gt;&lt;span @click=\"</span>retract1<span class=\"string\">\"&gt;收起&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt; </span></span><br><span class=\"line\"><span class=\"string\">      &lt;ElForm ref=\"</span>myform<span class=\"string\">\" :model=\"</span>myform<span class=\"string\">\" :rules=\"</span>rules<span class=\"string\">\" :inline=\"</span><span class=\"literal\">true</span><span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;FormItem prop=\"</span>price<span class=\"string\">\" label=\"</span>购买价格:<span class=\"string\">\" style=\"</span>margin-right:<span class=\"number\">30</span>px;<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;ElInput v-model=\"</span>myform.price<span class=\"string\">\" size=\"</span>small<span class=\"string\">\" style=\"</span>width:<span class=\"number\">100</span>px<span class=\"string\">\" oninput=\"</span>value=value.replace(<span class=\"regexp\">/[^\\d.]/g</span>,<span class=\"string\">''</span>)<span class=\"string\">\" /&gt; </span></span><br><span class=\"line\"><span class=\"string\">        &lt;/FormItem&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;FormItem prop=\"</span>phone<span class=\"string\">\" label=\"</span>手机号:<span class=\"string\">\" style=\"</span>margin-right:<span class=\"number\">30</span>px;<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;ElInput v-model=\"</span>myform.phone<span class=\"string\">\" size=\"</span>small<span class=\"string\">\" style=\"</span>width:<span class=\"number\">200</span>px<span class=\"string\">\" /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/FormItem&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;FormItem prop=\"</span>company<span class=\"string\">\" label=\"</span>公司名称:<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;ElInput v-model=\"</span>myform.company<span class=\"string\">\" size=\"</span>small<span class=\"string\">\" style=\"</span>width:<span class=\"number\">250</span>px<span class=\"string\">\" /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/FormItem&gt;  </span></span><br><span class=\"line\"><span class=\"string\">        &lt;div class=\"</span>bottom<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;span&gt;注：授权客户直接向中力购买产品，客户手机号应为注册账户使用手机号&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;div class=\"</span>bottomBtns clear<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;div class=\"</span>sure<span class=\"string\">\" @click=\"</span>submitForm(<span class=\"string\">'myform'</span>,index)<span class=\"string\">\"&gt;确定&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;div class=\"</span>cancel<span class=\"string\">\" @click=\"</span>resetForm(<span class=\"string\">'myform'</span>,index)<span class=\"string\">\"&gt;取消&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/ElForm&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/template&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">data() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &#123;</span></span><br><span class=\"line\"><span class=\"string\">    formDate: [</span></span><br><span class=\"line\"><span class=\"string\">      &#123;</span></span><br><span class=\"line\"><span class=\"string\">        id: 0,</span></span><br><span class=\"line\"><span class=\"string\">        price: \"</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">        phone: \"</span><span class=\"string\">\", </span></span><br><span class=\"line\"><span class=\"string\">        company: \"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">      &#125;,</span></span><br><span class=\"line\"><span class=\"string\">      &#123;</span></span><br><span class=\"line\"><span class=\"string\">        id: 0,</span></span><br><span class=\"line\"><span class=\"string\">        price: \"</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">        phone: \"</span><span class=\"string\">\", </span></span><br><span class=\"line\"><span class=\"string\">        company: \"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    rules: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      price: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123; required: true, message: \"</span>请输入价格<span class=\"string\">\", trigger: \"</span>blur<span class=\"string\">\" &#125;</span></span><br><span class=\"line\"><span class=\"string\">      ],</span></span><br><span class=\"line\"><span class=\"string\">      company: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123; required: true, message: \"</span>请输入公司名称<span class=\"string\">\", trigger: \"</span>blur<span class=\"string\">\" &#125;</span></span><br><span class=\"line\"><span class=\"string\">      ],</span></span><br><span class=\"line\"><span class=\"string\">      phone: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123; required: true, message: \"</span>请输入手机号码<span class=\"string\">\", trigger: \"</span>blur<span class=\"string\">\" &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">          len: 11,</span></span><br><span class=\"line\"><span class=\"string\">          pattern: /^1[3-9][0-9]&#123;9&#125;/,</span></span><br><span class=\"line\"><span class=\"string\">          message: \"</span>请输入正确的手机号<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">          trigger: \"</span>blur<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">      ]</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &#125;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">//重置表单</span></span><br><span class=\"line\"><span class=\"string\">resetForm(formName,index) &#123;</span></span><br><span class=\"line\"><span class=\"string\">  this.$refs[formName][index].resetFields();</span></span><br><span class=\"line\"><span class=\"string\">  this.myform.id = 0;</span></span><br><span class=\"line\"><span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"string\">//表单保存</span></span><br><span class=\"line\"><span class=\"string\">saveForm(formName, index) &#123;</span></span><br><span class=\"line\"><span class=\"string\">  this.$refs[formName][index].validate((valid) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    if (valid) &#123;</span></span><br><span class=\"line\"><span class=\"string\">      console.log('验证成功！');</span></span><br><span class=\"line\"><span class=\"string\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"string\">      console.log('error submit!!');</span></span><br><span class=\"line\"><span class=\"string\">      return false;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>首先当验证时报错时先看你表单上的ref和保存时refs是否一致。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form ref=<span class=\"string\">\"myform\"</span> :model=<span class=\"string\">\"formDate\"</span> :rules=<span class=\"string\">\"rules\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$refs[formName][index].validate(<span class=\"function\">(<span class=\"params\">valid</span>) =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果要是循环出多个表单。那么refs输出就是一个数组。所以在验证的时候需要获取到当前表单的下标。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"sure\"</span> @click=<span class=\"string\">\"submitForm('myform',index)\"</span>&gt;确定&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">this.$refs[formName][index].validate((valid) =&gt; &#123;&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://blog.csdn.net/weixin_40121676/article/details/101269362\" title=\"参考文章\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>目前有一个需求就是：点击添加按钮创建一个表单，可以保存删除修改等一系列操作。<br>因为是表单所以涉及到需要表单验证。差了很多资料发现都是点击之后添加一条可输入的input框之类，并没整体循环一整个表单的。</p>\n<p><img src=\"http://tvax2.sinaimg.cn/large/b535b7d3ly1g9sx2vtpvsj20py0f7dgp.jpg\" alt=\"QQ浏览器截图20191210161509\"></p>\n<p>上图是一个商品列表，商品列表的每一项的授权按钮，都会弹出一个授权的表单，遇到的问题是，elementUI的表单放在for循环里渲染出来,那么常规的提交表单和清空表单会报错，显示<code>this.$refs[formName].validate()方法不存在</code>，组件引入都没有问题;但表单放在for循环外面就没有问题，经过试验发现是form表单放在for循环里出现的问题;</p>\n<p>改动如下,就不会出现问题：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div v-<span class=\"keyword\">for</span>=<span class=\"string\">\"(item,index) in ProductList\"</span> :key=<span class=\"string\">\"index\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"customCenList\"</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"list\"</span>&gt;</span><br><span class=\"line\">      &lt;img src=<span class=\"string\">\"~assets/images/rankCar.png\"</span>&gt;</span><br><span class=\"line\">      &lt;span style=<span class=\"string\">\"width:200px;\"</span>&gt;&#123;&#123; item.name &#125;&#125;&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;span&gt;&lt;nuxt-link to=\"/</span><span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;span class=\"</span>downFont<span class=\"string\">\"&gt;下载样品&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/nuxt-link&gt;&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;span style=\"</span>width: <span class=\"number\">100</span>px;<span class=\"string\">\"&gt;&#123;&#123; item.number &#125;&#125;台&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;span style=\"</span>width: <span class=\"number\">140</span>px;<span class=\"string\">\"&gt;￥&#123;&#123; item.customizedDeposit &#125;&#125;&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;span style=\"</span>width: <span class=\"number\">140</span>px;<span class=\"string\">\"&gt;￥&#123;&#123; item.stockDeposit &#125;&#125;&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div v-if=\"</span>item.isHead<span class=\"string\">\" class=\"</span>listButton<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;span @click=\"</span>showLicense1(item.id)<span class=\"string\">\"&gt;查看授权客户&lt;/span&gt;&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;span @click=\"</span>showLicense2(item.id)<span class=\"string\">\"&gt;授权&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &lt;!-- 授权 --&gt; </span></span><br><span class=\"line\"><span class=\"string\">    &lt;div v-show=\"</span>item.id==currentId&amp;&amp;showItem1<span class=\"string\">\" class=\"</span>license1<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div class=\"</span>boxName<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;span&gt;授权&lt;/span&gt;&lt;span @click=\"</span>retract1<span class=\"string\">\"&gt;收起&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/div&gt; </span></span><br><span class=\"line\"><span class=\"string\">      &lt;ElForm ref=\"</span>myform<span class=\"string\">\" :model=\"</span>myform<span class=\"string\">\" :rules=\"</span>rules<span class=\"string\">\" :inline=\"</span><span class=\"literal\">true</span><span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;FormItem prop=\"</span>price<span class=\"string\">\" label=\"</span>购买价格:<span class=\"string\">\" style=\"</span>margin-right:<span class=\"number\">30</span>px;<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;ElInput v-model=\"</span>myform.price<span class=\"string\">\" size=\"</span>small<span class=\"string\">\" style=\"</span>width:<span class=\"number\">100</span>px<span class=\"string\">\" oninput=\"</span>value=value.replace(<span class=\"regexp\">/[^\\d.]/g</span>,<span class=\"string\">''</span>)<span class=\"string\">\" /&gt; </span></span><br><span class=\"line\"><span class=\"string\">        &lt;/FormItem&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;FormItem prop=\"</span>phone<span class=\"string\">\" label=\"</span>手机号:<span class=\"string\">\" style=\"</span>margin-right:<span class=\"number\">30</span>px;<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;ElInput v-model=\"</span>myform.phone<span class=\"string\">\" size=\"</span>small<span class=\"string\">\" style=\"</span>width:<span class=\"number\">200</span>px<span class=\"string\">\" /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/FormItem&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;FormItem prop=\"</span>company<span class=\"string\">\" label=\"</span>公司名称:<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;ElInput v-model=\"</span>myform.company<span class=\"string\">\" size=\"</span>small<span class=\"string\">\" style=\"</span>width:<span class=\"number\">250</span>px<span class=\"string\">\" /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/FormItem&gt;  </span></span><br><span class=\"line\"><span class=\"string\">        &lt;div class=\"</span>bottom<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;span&gt;注：授权客户直接向中力购买产品，客户手机号应为注册账户使用手机号&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;div class=\"</span>bottomBtns clear<span class=\"string\">\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;div class=\"</span>sure<span class=\"string\">\" @click=\"</span>submitForm(<span class=\"string\">'myform'</span>,index)<span class=\"string\">\"&gt;确定&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;div class=\"</span>cancel<span class=\"string\">\" @click=\"</span>resetForm(<span class=\"string\">'myform'</span>,index)<span class=\"string\">\"&gt;取消&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/ElForm&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/template&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">data() &#123;</span></span><br><span class=\"line\"><span class=\"string\">  return &#123;</span></span><br><span class=\"line\"><span class=\"string\">    formDate: [</span></span><br><span class=\"line\"><span class=\"string\">      &#123;</span></span><br><span class=\"line\"><span class=\"string\">        id: 0,</span></span><br><span class=\"line\"><span class=\"string\">        price: \"</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">        phone: \"</span><span class=\"string\">\", </span></span><br><span class=\"line\"><span class=\"string\">        company: \"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">      &#125;,</span></span><br><span class=\"line\"><span class=\"string\">      &#123;</span></span><br><span class=\"line\"><span class=\"string\">        id: 0,</span></span><br><span class=\"line\"><span class=\"string\">        price: \"</span><span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">        phone: \"</span><span class=\"string\">\", </span></span><br><span class=\"line\"><span class=\"string\">        company: \"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    rules: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      price: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123; required: true, message: \"</span>请输入价格<span class=\"string\">\", trigger: \"</span>blur<span class=\"string\">\" &#125;</span></span><br><span class=\"line\"><span class=\"string\">      ],</span></span><br><span class=\"line\"><span class=\"string\">      company: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123; required: true, message: \"</span>请输入公司名称<span class=\"string\">\", trigger: \"</span>blur<span class=\"string\">\" &#125;</span></span><br><span class=\"line\"><span class=\"string\">      ],</span></span><br><span class=\"line\"><span class=\"string\">      phone: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123; required: true, message: \"</span>请输入手机号码<span class=\"string\">\", trigger: \"</span>blur<span class=\"string\">\" &#125;,</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">          len: 11,</span></span><br><span class=\"line\"><span class=\"string\">          pattern: /^1[3-9][0-9]&#123;9&#125;/,</span></span><br><span class=\"line\"><span class=\"string\">          message: \"</span>请输入正确的手机号<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">          trigger: \"</span>blur<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">      ]</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &#125;;</span></span><br><span class=\"line\"><span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">//重置表单</span></span><br><span class=\"line\"><span class=\"string\">resetForm(formName,index) &#123;</span></span><br><span class=\"line\"><span class=\"string\">  this.$refs[formName][index].resetFields();</span></span><br><span class=\"line\"><span class=\"string\">  this.myform.id = 0;</span></span><br><span class=\"line\"><span class=\"string\">&#125;,</span></span><br><span class=\"line\"><span class=\"string\">//表单保存</span></span><br><span class=\"line\"><span class=\"string\">saveForm(formName, index) &#123;</span></span><br><span class=\"line\"><span class=\"string\">  this.$refs[formName][index].validate((valid) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    if (valid) &#123;</span></span><br><span class=\"line\"><span class=\"string\">      console.log('验证成功！');</span></span><br><span class=\"line\"><span class=\"string\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"string\">      console.log('error submit!!');</span></span><br><span class=\"line\"><span class=\"string\">      return false;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;);</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>首先当验证时报错时先看你表单上的ref和保存时refs是否一致。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form ref=<span class=\"string\">\"myform\"</span> :model=<span class=\"string\">\"formDate\"</span> :rules=<span class=\"string\">\"rules\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$refs[formName][index].validate(<span class=\"function\">(<span class=\"params\">valid</span>) =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果要是循环出多个表单。那么refs输出就是一个数组。所以在验证的时候需要获取到当前表单的下标。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"sure\"</span> @click=<span class=\"string\">\"submitForm('myform',index)\"</span>&gt;确定&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">this.$refs[formName][index].validate((valid) =&gt; &#123;&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://blog.csdn.net/weixin_40121676/article/details/101269362\" title=\"参考文章\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n"},{"title":"gulp入门(二)","date":"2019-11-11T08:54:02.000Z","author":"胡豪","_content":"\n## 实践过程遇到的问题\n\n- ### 压缩js \n  gulp 压缩遇到已经压缩过的 min.js 文件无法再继续压缩会报错跳除压缩程序;  \n  解决方法一：先把压缩过的js文件提前剪切到dist/js文件下;执行完gulp要记得吧dist里的js覆盖原项目js文件夹  \n  当然这种手动的方法比较麻烦，使用gulp插件自动化处理更加优雅\n  解决方法二：添加gulp-if判断\n  ```js\n  var condition = function(f) {\n    //这里网上用的是endsWith()方法虽然方便，但是是es6的方法，es5下使用indexOf也同样可以实现\n    if (f.path.indexOf(\".min.js\", f.path.length - \".min.js\".length) !== -1) { \n      return false;\n    } \n    return true;\n  };\n\n  //压缩js文件\n  gulp.task(\"jsmin\", function() {\n    //找到文件\n    return gulp.src(\"src/js/*.js\") \n      //压缩文件\n      .pipe(gulpif(condition, uglify()))\n      //保存压缩后的文件 \n      .pipe(gulp.dest(\"dist/js\"));\n  });\n  ```\n  * 知识补充：\n  includes()：返回布尔值，表示是否找到了参数字符串；\n  startsWith()：返回布尔值，表示参数字符串是否在查找字符串的头部；\n  endsWith()：返回布尔值，表示参数字符串是否在查找字符串的尾部。\n  ```js\n  let str = 'Hello world!';\n \n  str.startsWith('Hello') // true\n  str.endsWith('!') // true\n  str.includes('o') // true\n  ```\n  同时这三个方法都支持第二个参数，表示开始搜索的位置。endsWith 的行为与其他两个方法有所不同，它针对的是前n个字符,其他两个方法都是针对从第n个位置（不包含n）直到字符串结束。\n  ```js\n  let str = 'Hello world!';\n \n  str.startsWith('world', 6) // true\n  str.endsWith('Hello', 5) // true\n  str.includes('Hello', 6) // false\n  ```\n\n- ### gulp4与gulp3\n\n  #### gulp3的写法运行遇到运行报错  \n  ```js\n    The following tasks did not complete: script\n    Did you forget to signal async completion?\n  ```\n  主要原因是一开始装的gulp是gulp4版本，gulp3版本使用原代码就行\n\n  原代码：\n  ```js\n  //压缩js文件\n  gulp.task(\"script\", function() {\n    //找到文件\n    gulp\n      .src(\"js/*.js\")\n      //压缩文件\n      .pipe(uglify())\n      //保存压缩后的文件\n      .pipe(gulp.dest(\"dist/js\"));\n  });\n  ```\n\n  解决方法一：\n\n  ```js\n  //压缩js文件\n  gulp.task(\"script\", done => {\n    //找到文件\n    gulp \n      .src(\"js/*.js\")\n      //压缩文件\n      .pipe(uglify())\n      //保存压缩后的文件\n      .pipe(gulp.dest(\"dist/js\"));\n    done();\n  });\n  ```\n\n  解决方法二：\n\n  ```js\n  //压缩js文件\n  gulp.task(\"script\", function() {\n    //找到文件\n    return gulp .src(\"js/*.js\")\n      //压缩文件\n      .pipe(uglify())\n      //保存压缩后的文件\n      .pipe(gulp.dest(\"dist/js\")); \n  });\n  ```\n\n  #### 关于gulp3与gulp4版本对于写串行方式运行任务也有不同 \n\n  gulp3，数组方式，例如：\n  ```js\n  gulp.task(\"build\", [\"html\",\"cssmin\",\"jsmin\",\"copyImage\"]);\n  ``` \n  和\n  ```js\n  gulp.task('jsmin',['js'], function () {\n    gulp.src('src/js/layer/**')\n        .pipe(gulp.dest(\"dist/js/layer\"));\n  }))\n    ```\n  gulp4，需用`gulp.series`，例如： \n  ```js\n  gulp.task('build',gulp.series(gulp.parallel('html','cssmin','jsmin','copyImage')));\n  ```\n  和\n  ```js\n  gulp.task('jsmin',gulp.series('js', function () {\n    return gulp.src('src/js/layer/**')\n        .pipe(gulp.dest(\"dist/js/layer\"));\n  }))\n  ```\n- ## 压缩图片报错\n  一开始怎么试都报错，以为自己代码写错了，后面网上找了半天代码应该没有问题\n  ```js\n  //图片压缩\n  gulp.task(\"imagemin\",function(){\n    return gulp.src(\"src/img/**/*.{png,jpg,gif,ico}\")\n        .pipe(imagemin())\n        .on('error', function(err){ // 报错防止中断\n          console.error(err)\n          this.emit('end');\n        })\n        .pipe(gulp.dest(\"dist/img\"));  //放入到dist目录下面的images文件\n  })\n  ```\n  这个时候我想代码没问题，难道是依赖出问题了，我就把node_modules全删了再装一遍，图片压缩就不报错了，可以输出压缩好的图片文件。  ","source":"_posts/gulp入门（二）.md","raw":"---\ntitle: gulp入门(二)\ndate: 2019-11-11 16:54:02\nauthor: 胡豪\ncategories:\n  - gulp\ntags:\n  - gulp\n---\n\n## 实践过程遇到的问题\n\n- ### 压缩js \n  gulp 压缩遇到已经压缩过的 min.js 文件无法再继续压缩会报错跳除压缩程序;  \n  解决方法一：先把压缩过的js文件提前剪切到dist/js文件下;执行完gulp要记得吧dist里的js覆盖原项目js文件夹  \n  当然这种手动的方法比较麻烦，使用gulp插件自动化处理更加优雅\n  解决方法二：添加gulp-if判断\n  ```js\n  var condition = function(f) {\n    //这里网上用的是endsWith()方法虽然方便，但是是es6的方法，es5下使用indexOf也同样可以实现\n    if (f.path.indexOf(\".min.js\", f.path.length - \".min.js\".length) !== -1) { \n      return false;\n    } \n    return true;\n  };\n\n  //压缩js文件\n  gulp.task(\"jsmin\", function() {\n    //找到文件\n    return gulp.src(\"src/js/*.js\") \n      //压缩文件\n      .pipe(gulpif(condition, uglify()))\n      //保存压缩后的文件 \n      .pipe(gulp.dest(\"dist/js\"));\n  });\n  ```\n  * 知识补充：\n  includes()：返回布尔值，表示是否找到了参数字符串；\n  startsWith()：返回布尔值，表示参数字符串是否在查找字符串的头部；\n  endsWith()：返回布尔值，表示参数字符串是否在查找字符串的尾部。\n  ```js\n  let str = 'Hello world!';\n \n  str.startsWith('Hello') // true\n  str.endsWith('!') // true\n  str.includes('o') // true\n  ```\n  同时这三个方法都支持第二个参数，表示开始搜索的位置。endsWith 的行为与其他两个方法有所不同，它针对的是前n个字符,其他两个方法都是针对从第n个位置（不包含n）直到字符串结束。\n  ```js\n  let str = 'Hello world!';\n \n  str.startsWith('world', 6) // true\n  str.endsWith('Hello', 5) // true\n  str.includes('Hello', 6) // false\n  ```\n\n- ### gulp4与gulp3\n\n  #### gulp3的写法运行遇到运行报错  \n  ```js\n    The following tasks did not complete: script\n    Did you forget to signal async completion?\n  ```\n  主要原因是一开始装的gulp是gulp4版本，gulp3版本使用原代码就行\n\n  原代码：\n  ```js\n  //压缩js文件\n  gulp.task(\"script\", function() {\n    //找到文件\n    gulp\n      .src(\"js/*.js\")\n      //压缩文件\n      .pipe(uglify())\n      //保存压缩后的文件\n      .pipe(gulp.dest(\"dist/js\"));\n  });\n  ```\n\n  解决方法一：\n\n  ```js\n  //压缩js文件\n  gulp.task(\"script\", done => {\n    //找到文件\n    gulp \n      .src(\"js/*.js\")\n      //压缩文件\n      .pipe(uglify())\n      //保存压缩后的文件\n      .pipe(gulp.dest(\"dist/js\"));\n    done();\n  });\n  ```\n\n  解决方法二：\n\n  ```js\n  //压缩js文件\n  gulp.task(\"script\", function() {\n    //找到文件\n    return gulp .src(\"js/*.js\")\n      //压缩文件\n      .pipe(uglify())\n      //保存压缩后的文件\n      .pipe(gulp.dest(\"dist/js\")); \n  });\n  ```\n\n  #### 关于gulp3与gulp4版本对于写串行方式运行任务也有不同 \n\n  gulp3，数组方式，例如：\n  ```js\n  gulp.task(\"build\", [\"html\",\"cssmin\",\"jsmin\",\"copyImage\"]);\n  ``` \n  和\n  ```js\n  gulp.task('jsmin',['js'], function () {\n    gulp.src('src/js/layer/**')\n        .pipe(gulp.dest(\"dist/js/layer\"));\n  }))\n    ```\n  gulp4，需用`gulp.series`，例如： \n  ```js\n  gulp.task('build',gulp.series(gulp.parallel('html','cssmin','jsmin','copyImage')));\n  ```\n  和\n  ```js\n  gulp.task('jsmin',gulp.series('js', function () {\n    return gulp.src('src/js/layer/**')\n        .pipe(gulp.dest(\"dist/js/layer\"));\n  }))\n  ```\n- ## 压缩图片报错\n  一开始怎么试都报错，以为自己代码写错了，后面网上找了半天代码应该没有问题\n  ```js\n  //图片压缩\n  gulp.task(\"imagemin\",function(){\n    return gulp.src(\"src/img/**/*.{png,jpg,gif,ico}\")\n        .pipe(imagemin())\n        .on('error', function(err){ // 报错防止中断\n          console.error(err)\n          this.emit('end');\n        })\n        .pipe(gulp.dest(\"dist/img\"));  //放入到dist目录下面的images文件\n  })\n  ```\n  这个时候我想代码没问题，难道是依赖出问题了，我就把node_modules全删了再装一遍，图片压缩就不报错了，可以输出压缩好的图片文件。  ","slug":"gulp入门（二）","published":1,"updated":"2021-03-29T05:44:19.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hypp000ly4tzh5cw1k01","content":"<h2 id=\"实践过程遇到的问题\"><a href=\"#实践过程遇到的问题\" class=\"headerlink\" title=\"实践过程遇到的问题\"></a>实践过程遇到的问题</h2><ul>\n<li><h3 id=\"压缩js\"><a href=\"#压缩js\" class=\"headerlink\" title=\"压缩js\"></a>压缩js</h3><p>gulp 压缩遇到已经压缩过的 min.js 文件无法再继续压缩会报错跳除压缩程序;<br>解决方法一：先把压缩过的js文件提前剪切到dist/js文件下;执行完gulp要记得吧dist里的js覆盖原项目js文件夹<br>当然这种手动的方法比较麻烦，使用gulp插件自动化处理更加优雅<br>解决方法二：添加gulp-if判断</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> condition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//这里网上用的是endsWith()方法虽然方便，但是是es6的方法，es5下使用indexOf也同样可以实现</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (f.path.indexOf(<span class=\"string\">\".min.js\"</span>, f.path.length - <span class=\"string\">\".min.js\"</span>.length) !== <span class=\"number\">-1</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//压缩js文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"jsmin\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//找到文件</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">\"src/js/*.js\"</span>) </span><br><span class=\"line\">    <span class=\"comment\">//压缩文件</span></span><br><span class=\"line\">    .pipe(gulpif(condition, uglify()))</span><br><span class=\"line\">    <span class=\"comment\">//保存压缩后的文件 </span></span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">\"dist/js\"</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>知识补充：<br>includes()：返回布尔值，表示是否找到了参数字符串；<br>startsWith()：返回布尔值，表示参数字符串是否在查找字符串的头部；<br>endsWith()：返回布尔值，表示参数字符串是否在查找字符串的尾部。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">str.startsWith(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">str.endsWith(<span class=\"string\">'!'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">str.includes(<span class=\"string\">'o'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>同时这三个方法都支持第二个参数，表示开始搜索的位置。endsWith 的行为与其他两个方法有所不同，它针对的是前n个字符,其他两个方法都是针对从第n个位置（不包含n）直到字符串结束。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">str.startsWith(<span class=\"string\">'world'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">str.endsWith(<span class=\"string\">'Hello'</span>, <span class=\"number\">5</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">str.includes(<span class=\"string\">'Hello'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"gulp4与gulp3\"><a href=\"#gulp4与gulp3\" class=\"headerlink\" title=\"gulp4与gulp3\"></a>gulp4与gulp3</h3><h4 id=\"gulp3的写法运行遇到运行报错\"><a href=\"#gulp3的写法运行遇到运行报错\" class=\"headerlink\" title=\"gulp3的写法运行遇到运行报错\"></a>gulp3的写法运行遇到运行报错</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The following tasks did not complete: script</span><br><span class=\"line\">Did you forget to signal <span class=\"keyword\">async</span> completion?</span><br></pre></td></tr></table></figure>\n<p>主要原因是一开始装的gulp是gulp4版本，gulp3版本使用原代码就行</p>\n<p>原代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//压缩js文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"script\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//找到文件</span></span><br><span class=\"line\">  gulp</span><br><span class=\"line\">    .src(<span class=\"string\">\"js/*.js\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//压缩文件</span></span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    <span class=\"comment\">//保存压缩后的文件</span></span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">\"dist/js\"</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>解决方法一：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//压缩js文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"script\"</span>, done =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">//找到文件</span></span><br><span class=\"line\">  gulp </span><br><span class=\"line\">    .src(<span class=\"string\">\"js/*.js\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//压缩文件</span></span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    <span class=\"comment\">//保存压缩后的文件</span></span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">\"dist/js\"</span>));</span><br><span class=\"line\">  done();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>解决方法二：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//压缩js文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"script\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//找到文件</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp .src(<span class=\"string\">\"js/*.js\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//压缩文件</span></span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    <span class=\"comment\">//保存压缩后的文件</span></span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">\"dist/js\"</span>)); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"关于gulp3与gulp4版本对于写串行方式运行任务也有不同\"><a href=\"#关于gulp3与gulp4版本对于写串行方式运行任务也有不同\" class=\"headerlink\" title=\"关于gulp3与gulp4版本对于写串行方式运行任务也有不同\"></a>关于gulp3与gulp4版本对于写串行方式运行任务也有不同</h4><p>gulp3，数组方式，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">\"build\"</span>, [<span class=\"string\">\"html\"</span>,<span class=\"string\">\"cssmin\"</span>,<span class=\"string\">\"jsmin\"</span>,<span class=\"string\">\"copyImage\"</span>]);</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\">和</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\">gulp.task(<span class=\"string\">'jsmin'</span>,[<span class=\"string\">'js'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'src/js/layer/**'</span>)</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/js/layer\"</span>));</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<p>gulp4，需用<code>gulp.series</code>，例如： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'build'</span>,gulp.series(gulp.parallel(<span class=\"string\">'html'</span>,<span class=\"string\">'cssmin'</span>,<span class=\"string\">'jsmin'</span>,<span class=\"string\">'copyImage'</span>)));</span><br></pre></td></tr></table></figure>\n<p>和</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'jsmin'</span>,gulp.series(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/js/layer/**'</span>)</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/js/layer\"</span>));</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n</li>\n<li><h2 id=\"压缩图片报错\"><a href=\"#压缩图片报错\" class=\"headerlink\" title=\"压缩图片报错\"></a>压缩图片报错</h2><p>一开始怎么试都报错，以为自己代码写错了，后面网上找了半天代码应该没有问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//图片压缩</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"imagemin\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">\"src/img/**/*.&#123;png,jpg,gif,ico&#125;\"</span>)</span><br><span class=\"line\">      .pipe(imagemin())</span><br><span class=\"line\">      .on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123; <span class=\"comment\">// 报错防止中断</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(err)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emit(<span class=\"string\">'end'</span>);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/img\"</span>));  <span class=\"comment\">//放入到dist目录下面的images文件</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这个时候我想代码没问题，难道是依赖出问题了，我就把node_modules全删了再装一遍，图片压缩就不报错了，可以输出压缩好的图片文件。  </p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实践过程遇到的问题\"><a href=\"#实践过程遇到的问题\" class=\"headerlink\" title=\"实践过程遇到的问题\"></a>实践过程遇到的问题</h2><ul>\n<li><h3 id=\"压缩js\"><a href=\"#压缩js\" class=\"headerlink\" title=\"压缩js\"></a>压缩js</h3><p>gulp 压缩遇到已经压缩过的 min.js 文件无法再继续压缩会报错跳除压缩程序;<br>解决方法一：先把压缩过的js文件提前剪切到dist/js文件下;执行完gulp要记得吧dist里的js覆盖原项目js文件夹<br>当然这种手动的方法比较麻烦，使用gulp插件自动化处理更加优雅<br>解决方法二：添加gulp-if判断</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> condition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//这里网上用的是endsWith()方法虽然方便，但是是es6的方法，es5下使用indexOf也同样可以实现</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (f.path.indexOf(<span class=\"string\">\".min.js\"</span>, f.path.length - <span class=\"string\">\".min.js\"</span>.length) !== <span class=\"number\">-1</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//压缩js文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"jsmin\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//找到文件</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">\"src/js/*.js\"</span>) </span><br><span class=\"line\">    <span class=\"comment\">//压缩文件</span></span><br><span class=\"line\">    .pipe(gulpif(condition, uglify()))</span><br><span class=\"line\">    <span class=\"comment\">//保存压缩后的文件 </span></span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">\"dist/js\"</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>知识补充：<br>includes()：返回布尔值，表示是否找到了参数字符串；<br>startsWith()：返回布尔值，表示参数字符串是否在查找字符串的头部；<br>endsWith()：返回布尔值，表示参数字符串是否在查找字符串的尾部。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">str.startsWith(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">str.endsWith(<span class=\"string\">'!'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">str.includes(<span class=\"string\">'o'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>同时这三个方法都支持第二个参数，表示开始搜索的位置。endsWith 的行为与其他两个方法有所不同，它针对的是前n个字符,其他两个方法都是针对从第n个位置（不包含n）直到字符串结束。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">str.startsWith(<span class=\"string\">'world'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">str.endsWith(<span class=\"string\">'Hello'</span>, <span class=\"number\">5</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">str.includes(<span class=\"string\">'Hello'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"gulp4与gulp3\"><a href=\"#gulp4与gulp3\" class=\"headerlink\" title=\"gulp4与gulp3\"></a>gulp4与gulp3</h3><h4 id=\"gulp3的写法运行遇到运行报错\"><a href=\"#gulp3的写法运行遇到运行报错\" class=\"headerlink\" title=\"gulp3的写法运行遇到运行报错\"></a>gulp3的写法运行遇到运行报错</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The following tasks did not complete: script</span><br><span class=\"line\">Did you forget to signal <span class=\"keyword\">async</span> completion?</span><br></pre></td></tr></table></figure>\n<p>主要原因是一开始装的gulp是gulp4版本，gulp3版本使用原代码就行</p>\n<p>原代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//压缩js文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"script\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//找到文件</span></span><br><span class=\"line\">  gulp</span><br><span class=\"line\">    .src(<span class=\"string\">\"js/*.js\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//压缩文件</span></span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    <span class=\"comment\">//保存压缩后的文件</span></span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">\"dist/js\"</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>解决方法一：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//压缩js文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"script\"</span>, done =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">//找到文件</span></span><br><span class=\"line\">  gulp </span><br><span class=\"line\">    .src(<span class=\"string\">\"js/*.js\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//压缩文件</span></span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    <span class=\"comment\">//保存压缩后的文件</span></span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">\"dist/js\"</span>));</span><br><span class=\"line\">  done();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>解决方法二：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//压缩js文件</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"script\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//找到文件</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp .src(<span class=\"string\">\"js/*.js\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//压缩文件</span></span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    <span class=\"comment\">//保存压缩后的文件</span></span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">\"dist/js\"</span>)); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"关于gulp3与gulp4版本对于写串行方式运行任务也有不同\"><a href=\"#关于gulp3与gulp4版本对于写串行方式运行任务也有不同\" class=\"headerlink\" title=\"关于gulp3与gulp4版本对于写串行方式运行任务也有不同\"></a>关于gulp3与gulp4版本对于写串行方式运行任务也有不同</h4><p>gulp3，数组方式，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">\"build\"</span>, [<span class=\"string\">\"html\"</span>,<span class=\"string\">\"cssmin\"</span>,<span class=\"string\">\"jsmin\"</span>,<span class=\"string\">\"copyImage\"</span>]);</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\">和</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\">gulp.task(<span class=\"string\">'jsmin'</span>,[<span class=\"string\">'js'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'src/js/layer/**'</span>)</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/js/layer\"</span>));</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<p>gulp4，需用<code>gulp.series</code>，例如： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'build'</span>,gulp.series(gulp.parallel(<span class=\"string\">'html'</span>,<span class=\"string\">'cssmin'</span>,<span class=\"string\">'jsmin'</span>,<span class=\"string\">'copyImage'</span>)));</span><br></pre></td></tr></table></figure>\n<p>和</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'jsmin'</span>,gulp.series(<span class=\"string\">'js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'src/js/layer/**'</span>)</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/js/layer\"</span>));</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n</li>\n<li><h2 id=\"压缩图片报错\"><a href=\"#压缩图片报错\" class=\"headerlink\" title=\"压缩图片报错\"></a>压缩图片报错</h2><p>一开始怎么试都报错，以为自己代码写错了，后面网上找了半天代码应该没有问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//图片压缩</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"imagemin\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">\"src/img/**/*.&#123;png,jpg,gif,ico&#125;\"</span>)</span><br><span class=\"line\">      .pipe(imagemin())</span><br><span class=\"line\">      .on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123; <span class=\"comment\">// 报错防止中断</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(err)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emit(<span class=\"string\">'end'</span>);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">\"dist/img\"</span>));  <span class=\"comment\">//放入到dist目录下面的images文件</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这个时候我想代码没问题，难道是依赖出问题了，我就把node_modules全删了再装一遍，图片压缩就不报错了，可以输出压缩好的图片文件。  </p>\n</li>\n</ul>\n"},{"title":"javascript中的面向对象开发","date":"2020-02-17T06:06:43.000Z","author":"胡豪","_content":"\n# js面向对象开发\n\n## 什么是对象\n\n\"无序属性的集合，其属性可以包括基本值、对象或者函数\"，对象是一组没有特定顺序的的值。\n对象的没个属性或方法都有一个俄名字，每个名字都映射到一个值。\n\n\n## 什么是面向对象编程？\n\n面向对象编程的基本思路完全不同。其背后的思想是：你将所需要做的功能抽象成一个“对象”，然后一遍遍地调用这个对象来完成你想要的功能。\n\n每次调用对象时，你必须创建对象，确保对象的存在，然后为了使用对象所带的功能你需要设置它的属性，这些功能称为“方法（methods）”。\n\n\n## 面向对象的特点\n\n- 封装\n\n对于一些功能相同或者相似的代码，我们可以放到一个函数中去，多次用到此功能时，我们只需要调用即可，无需多次重写。\n\n创造对象的几种模式：单例模式，工厂模式，构造函数模式,原型模式等。\n\n- 继承\n\n子类可以继承父类的属性和方法\n\n- 多态(重载和重写)\n\n重载：重载就是函数方法名相同，参数不同\n\n重写：子类可以改写父类的属性和方法。\n\nJs中存在多态，但是Js中不存在函数的重载，因为函数名相同的话，后面的一定会把前面的覆盖，但Js中存在重写，所以Js中的多态主要是指重写。\n但是也存在一种既不是重写却类似重载的Js多态方式,我们可以通过判断函数的参数的不同来实现不同的功能来模拟重载，就是我们调用函数时根据传入不同的参数实现不同的功能，如下：\n```js\nfunction sum(num){\n  if(typeof num === \"undefined\"){\n    return 0;\n  }return num;\n}\nvar n1 = sum(10);\nconsole.log(n1);\n\nvar n2 = sum();\nconsole.log(n2);\n```\n当传入空参数的时候，num为undefined所以会返回0，如果不是空参数的时候，就返回num。\n\n\n\n\n\n\n\n## 创建对象的几种模式\n\n\n\n一般创建对象是用以下两种方式\n\nnew object创建对象：\n```js\nvar Person = new Object();\nPerson.name = \"张三\";\nPerson.age = \"18\";\nPerson.job = \"123\";\n```\n或者，对象字面量的方式：\n```js\nvar Person = {\n  name:\"lisi\",\n  age:\"18\",\n  job:\"123\"\n}\n```\n\n\n\n\n\n### 单例模式\n\n一个人写代码\n\n```js\nvar a = 1;\nfunction getNum(){\n  return 1;\n}\n```\n\n两个人，一起写同一个js。\n假设，一天小明发现自己写的getNum方法出问题了，原来是小华写的js中也有个getNum的函数，代码合并后把他的覆盖掉了，于是便找小华理论去，经过一番妥协后，两人都把自己的代码改了改。\n\n```js\nvar xiaoming = {\n  num:1,\n  getNum:function(){\n    return 1;\n  }\n}\n\nvar xiaohua = {\n  num:2,\n  getNum: function(){\n    return 2;\n  }\n}\n\nconsole.log(xiaoming.num);\nconsole.log(xiaoming.getNum());\nconsole.log(xiaohua.num);\nconsole.log(xiaohua.getNum());\n```\n\n这就是我们所谓的单例模式(命名空间)\n\n我们把描述同一个事物的方法或者属性放到同一个对象里，不同事物之间的方法或者属性名相同相互也不会发生冲突。\n\n#### 单例模式注意点：\n\n当在一个命名空间A中调用别的命名空间B中的函数的时候，调用方法为 B.functionName();\n\n当在一个命名空间A中调用自己空间中的函数的时候，调用方法为 this.functionName();\n\n#### 单例模式的优劣\n\n优点：\n\n使用单例模式，我们可以实现简单的模块化开发\n\n```js\nvar obj = {\n  getCss:function(){\n      //code\n  },\n  setCss:function(){\n      //code\n  }\n}\n```\n\n我们可以把自己写好的工具方法放到一个单独的js文件中，然后直接引入即可。\n\n避免了全局变量名的冲突\n\n需要注意的是，我们在引入各个模块的时候，需要注意引入的顺序，引入顺序是按照各模块之间的相互依赖进行前后排列的；\n\n缺点：\n\n单例模式只是一定程度上避免了变量名的冲突，但并不能彻底解决此问题，而且在不同的对象下，我们可能会有很多功能相同的代码，最终造成大量的冗余代码。\n单例模式让每个对象有了自己独立的命名空间，但是并不能批量生产的问题，每一个新的对象都要重新写一份一模一样的代码（如下面代码所示）。\n\n```js\nvar person = {\n  name:'小明',\n  age:24,\n  showName:function(){\n    console.log('我的名字是：'+this.name)\n  }\n};\nvar person = {\n  name:'小华',\n  age:25,\n  showName:function(){\n    console.log('我的名字是：'+this.name)\n  }\n};\n```\n\n\n\n\n-----------------------------------------------------------------------------------------------------------\n\n\n### 工厂模式\n\n1、什么是工厂模式？\n\n把实现同一件事情的相同代码放到同一个函数中，想实现这个功能只要执行这个函数即可，这就是工厂模式，也叫做“函数的封装\"，这也是”低耦合，高内聚“，从而达到减少页面冗余代码，提高代码重复利用率的作用。\n\n工厂模式其实就是把需要一个个的编写的对象,放在一个函数中统一的进行创建，说白了就是普通函数的封装。\n\n工厂模式总共3步骤：\n1）进厂 --- 创建一个空对象\n2）加工 --- 加工对象：给对象添加属性和方法；\n3）输出 --- 返回对象：return 对象；\n\n```js\nfunction CreatePerson(name,age){\n  var obj={};//1.创建一个空对象\n  //2.加工对象\n  obj.name=name;\n  obj.age=age;\n  obj.showName=function(){\n    console.log('我的名字是：'+this.name)\n  };\n  return obj;//3.输出对象；\n}\nvar person1 = CreatePerson('小明',23)\nvar person2 = CreatePerson('小华',23)\nperson1.showName(); //我的名字是：小明\nperson2.showName(); //我的名字是：小华\n```\n \n#### 工厂模式的优缺点\n\n既然叫工厂模式，它就和我们周围的工厂一样，我们只需要把原材料放进去，就能得到我们需要的产品了。\n\n工厂模式也解决了单例模式的批量生产的问题，避免了单例模式中的大量冗余代码，进行系统的封装，提高代码的重复利用率\n\n不过工厂模式跟我们js内置类的调用方法不同\n\n\n\n\n-----------------------------------------------------------------------------------------------------------\n\n\n### 构造函数模式\n可以创建一个自定义的类，并且可以new出实例\n构造函数做的就是类和实例打交道。\n\n```js\n//构造函数：首字母大写(约定俗成)；\nfunction CreatePerson(name,age){ //创建一个自定义的类\n    //构造函数中的this，都是new出来的实例\n    //构造函数中存放的都是私有的属性和方法；\n    this.name=name;\n    this.age=age;\n    this.showName=function(){\n      console.log('我的名字是：'+this.name)\n    }\n}\n//实例1\nvar person1 = new CreatePerson('小明',25);\nperson1.showName(); // 我的名字是：,小明\n//实例2\nvar person2 = new CreatePerson('小华',24);\n```\n注意，如果不写new，这就是一个普通函数，它返回undefined。但是，如果写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this;。\n\n\nnew操作符的作用如下：\n\n1.创建一个空对象  \n2.由this变量引用该对象  \n3.该对象继承该函数的原型  \n4.把属性和方法加入到this引用的对象中  \n5.新创建的对象由this引用，最后隐式地返回this。  \n过程如下：\n```js\nlet obj = {};//创建一个空对象\nobj.__proto__ = Person.prototype;//该对象继承该函数的原型\nPerson.call(obj);//隐式地返回this\n```\n\n\n\n\n工厂模式和构造函数模式的区别：\n\n1. 在调用的时候不同：\n工厂模式：调用的时候，只是普通函数的调用createPerson();\n构造函数模式：new CreatePerson();\n\n2. 在函数体内不同：\n工厂模式有三步：1）创建对象 2）加工对象 3）返回对象；\n构造函数模式只有1步： 只有加工对象； 因为系统默认会为其创建对象和返回对象；\n\n3. 构造函数默认给我们返回了一个对象，如果我们非要自己手动返回的话：\n  (1)手动返回的是字符串类型：对以前实例上的属性和方法没有影响；\n  (2)手动返回的是引用数据类型:以前实例身上的属性和方法就被覆盖了；实例无法调用属性和方法；\n\n构造函数的方法都是私有方法，每个实例调用的都是自己私有的方法，同样也会有许多重复的代码。\n\n我们可以使用原型模式来解决每个实例中都有相同方法的函数的问题\n\n\n\n\n-----------------------------------------------------------------------------------------------------------\n\n\n\n原型模式\n```js\nfunction CreatePerson(name,age){\n    this.name=name;\n    this.age=age;\n}\n// 我们把公有的方法放到函数的原型链上\nCreatePerson.prototype.showName = function(){\n  console.log('我的名字是：'+this.name)\n}  \nvar person1 = new CreatePerson('小明',25) \nvar person2 = new CreatePerson('小华',24)\nperson1.showName() //小明\n```\n\n \n \n\n原型模式的关键：\n\n1）每个函数数据类型（普通函数，类）上，都有一个属性，叫prototype。\n2）prototype这个对象上，天生自带一个属性，叫constructor:指向当前这个类；\n3）每个对象数据类型（普通对象，prototype，实例）上都有一个属性，叫做__proto__:指向当前实例所属类的原型；\n通过例子我们来看这几句话是什么意思\n\n```js\nfunction CreatePerson(name,age){\n  this.name=name;\n  this.age=age\n}\nCreatePerson.prototype.showName=function(){\n  console.log('我的名字是：'+this.name)\n}\nvar person1 = new CreatePerson('小明',25);\nconsole.dir(person1)\n```\n\n \n在chrome浏览器控制台中显示---->\n\n它们中有一条链关联着 person1.__proto__ === CreatePerson.prototype\n\n\n\n接着来看\n\n```js\nfunction Foo(){\n  this.a=1;\n}\nFoo.prototype.a=2;\nFoo.prototype.b=3;\nvar f1 = new Foo;  //没有参数的话括号可以省略\nconsole.log(f1.a) //1\nconsole.log(f1.b) // 3\n``` \n  \n![js面向对象1](https://tvax3.sinaimg.cn/large/b535b7d3ly1gbzgi54h3ej20d903v74w.jpg)\n\n\n接着来说，Foo.prototype是个对象,那么它的__proto__指向哪里呢？\n\n每个对象数据类型（普通对象，prototype，实例）上都有一个属性，叫做__proto__:指向当前实例所属类的原型 \n\n此外，我们应该知道每一个对象都是function Object这个构造函数的实例\n\n```js\nvar obj = Object();\nobj.__proto__==Object.prototype    //true\n```\n\n所以我们可以接着还原这个原型图\n![js面向对象2](https://tvax4.sinaimg.cn/large/b535b7d3ly1gbzgi5bj97j20nj0h0aff.jpg)\n\n\n还没完,我们发现对象都是函数(构造器)创造出来的，那么函数是谁创造的呢？\n在js中,function都是由function Function这个构造器创造的，每一个函数都是Function的实例\n\n```js\nfunction fun(){};\nfun.__proto__==Function.prototype    //true\n```\n\n现在基本上我们就能得出了完整的原型图了\n![js面向对象3](https://tva1.sinaimg.cn/large/b535b7d3ly1gbzgi5gu5oj20dk0ge0wj.jpg)\n\n\n\n \n补充：\n\n多说一点,判断数据类型的方法时，我们知道有个instanceof的方法\n比如\n\nA instanceof B\ninstanceof判断的规则就是:\n\n沿着A的__proto__这条线查找的同时沿着B的prototype这条线来找，如果两条线能找到同一个引用(对象)，那么就返回true。如果找到终点还未重合，则返回false。\n\n再来看我们之前的那个例子\n```js\nfunction Foo(){\n    this.a=1;\n}\nFoo.prototype.a=2;\nFoo.prototype.b=3;\nvar f1 = new Foo;  //没有参数的话括号可以省略\nconsole.log(f1.a) //1\nconsole.log(f1.b) //3\n``` \n当我们查找f1.a时，因为f1中有这个属性,所以我们得出 f1.a=1;\n当我们查找f1.b时，f1中没有这个属性,我们便顺着f1.__proto__这条链去它的构造器的prototype上找,所以我们得出了 f1.b = 3;\n当我们查找一个对象的属性时,先在这个对象的私有空间内查找，如果没找到,就顺着对象的__proto__这条链去它的构造器的ptototype上查找,如果还没找到,接着沿__proto__向上查找,直到找到Object.prototype还没有的话,这个值就为undefined,这就是所谓的原型链\n\n\n## 总结\n面向对象开发对我们平时开发有什么好处？\n\n随着代码库的增长，你需要改变你组织思路的方法，并开始用面向对象的方式思考。与一系列相互纠缠需要通过一系列的参数传递才能运行的函数相比，对象的范围很容易控制和追踪。\n\n\n基于函数编程的问题在于，一旦有一个函数出现问题，就会导致整个链上的流程失败。而对于对象而言，一个方法出问题不会（也不应该）影响到其他类。\n\n\n补充：  \nJS CLASS类","source":"_posts/javascript中的面向对象开发.md","raw":"---\ntitle: javascript中的面向对象开发\ndate: 2020-02-17 14:06:43\nauthor: 胡豪\ncategories: \n- JavaScript \ntags:\n- js \n---\n\n# js面向对象开发\n\n## 什么是对象\n\n\"无序属性的集合，其属性可以包括基本值、对象或者函数\"，对象是一组没有特定顺序的的值。\n对象的没个属性或方法都有一个俄名字，每个名字都映射到一个值。\n\n\n## 什么是面向对象编程？\n\n面向对象编程的基本思路完全不同。其背后的思想是：你将所需要做的功能抽象成一个“对象”，然后一遍遍地调用这个对象来完成你想要的功能。\n\n每次调用对象时，你必须创建对象，确保对象的存在，然后为了使用对象所带的功能你需要设置它的属性，这些功能称为“方法（methods）”。\n\n\n## 面向对象的特点\n\n- 封装\n\n对于一些功能相同或者相似的代码，我们可以放到一个函数中去，多次用到此功能时，我们只需要调用即可，无需多次重写。\n\n创造对象的几种模式：单例模式，工厂模式，构造函数模式,原型模式等。\n\n- 继承\n\n子类可以继承父类的属性和方法\n\n- 多态(重载和重写)\n\n重载：重载就是函数方法名相同，参数不同\n\n重写：子类可以改写父类的属性和方法。\n\nJs中存在多态，但是Js中不存在函数的重载，因为函数名相同的话，后面的一定会把前面的覆盖，但Js中存在重写，所以Js中的多态主要是指重写。\n但是也存在一种既不是重写却类似重载的Js多态方式,我们可以通过判断函数的参数的不同来实现不同的功能来模拟重载，就是我们调用函数时根据传入不同的参数实现不同的功能，如下：\n```js\nfunction sum(num){\n  if(typeof num === \"undefined\"){\n    return 0;\n  }return num;\n}\nvar n1 = sum(10);\nconsole.log(n1);\n\nvar n2 = sum();\nconsole.log(n2);\n```\n当传入空参数的时候，num为undefined所以会返回0，如果不是空参数的时候，就返回num。\n\n\n\n\n\n\n\n## 创建对象的几种模式\n\n\n\n一般创建对象是用以下两种方式\n\nnew object创建对象：\n```js\nvar Person = new Object();\nPerson.name = \"张三\";\nPerson.age = \"18\";\nPerson.job = \"123\";\n```\n或者，对象字面量的方式：\n```js\nvar Person = {\n  name:\"lisi\",\n  age:\"18\",\n  job:\"123\"\n}\n```\n\n\n\n\n\n### 单例模式\n\n一个人写代码\n\n```js\nvar a = 1;\nfunction getNum(){\n  return 1;\n}\n```\n\n两个人，一起写同一个js。\n假设，一天小明发现自己写的getNum方法出问题了，原来是小华写的js中也有个getNum的函数，代码合并后把他的覆盖掉了，于是便找小华理论去，经过一番妥协后，两人都把自己的代码改了改。\n\n```js\nvar xiaoming = {\n  num:1,\n  getNum:function(){\n    return 1;\n  }\n}\n\nvar xiaohua = {\n  num:2,\n  getNum: function(){\n    return 2;\n  }\n}\n\nconsole.log(xiaoming.num);\nconsole.log(xiaoming.getNum());\nconsole.log(xiaohua.num);\nconsole.log(xiaohua.getNum());\n```\n\n这就是我们所谓的单例模式(命名空间)\n\n我们把描述同一个事物的方法或者属性放到同一个对象里，不同事物之间的方法或者属性名相同相互也不会发生冲突。\n\n#### 单例模式注意点：\n\n当在一个命名空间A中调用别的命名空间B中的函数的时候，调用方法为 B.functionName();\n\n当在一个命名空间A中调用自己空间中的函数的时候，调用方法为 this.functionName();\n\n#### 单例模式的优劣\n\n优点：\n\n使用单例模式，我们可以实现简单的模块化开发\n\n```js\nvar obj = {\n  getCss:function(){\n      //code\n  },\n  setCss:function(){\n      //code\n  }\n}\n```\n\n我们可以把自己写好的工具方法放到一个单独的js文件中，然后直接引入即可。\n\n避免了全局变量名的冲突\n\n需要注意的是，我们在引入各个模块的时候，需要注意引入的顺序，引入顺序是按照各模块之间的相互依赖进行前后排列的；\n\n缺点：\n\n单例模式只是一定程度上避免了变量名的冲突，但并不能彻底解决此问题，而且在不同的对象下，我们可能会有很多功能相同的代码，最终造成大量的冗余代码。\n单例模式让每个对象有了自己独立的命名空间，但是并不能批量生产的问题，每一个新的对象都要重新写一份一模一样的代码（如下面代码所示）。\n\n```js\nvar person = {\n  name:'小明',\n  age:24,\n  showName:function(){\n    console.log('我的名字是：'+this.name)\n  }\n};\nvar person = {\n  name:'小华',\n  age:25,\n  showName:function(){\n    console.log('我的名字是：'+this.name)\n  }\n};\n```\n\n\n\n\n-----------------------------------------------------------------------------------------------------------\n\n\n### 工厂模式\n\n1、什么是工厂模式？\n\n把实现同一件事情的相同代码放到同一个函数中，想实现这个功能只要执行这个函数即可，这就是工厂模式，也叫做“函数的封装\"，这也是”低耦合，高内聚“，从而达到减少页面冗余代码，提高代码重复利用率的作用。\n\n工厂模式其实就是把需要一个个的编写的对象,放在一个函数中统一的进行创建，说白了就是普通函数的封装。\n\n工厂模式总共3步骤：\n1）进厂 --- 创建一个空对象\n2）加工 --- 加工对象：给对象添加属性和方法；\n3）输出 --- 返回对象：return 对象；\n\n```js\nfunction CreatePerson(name,age){\n  var obj={};//1.创建一个空对象\n  //2.加工对象\n  obj.name=name;\n  obj.age=age;\n  obj.showName=function(){\n    console.log('我的名字是：'+this.name)\n  };\n  return obj;//3.输出对象；\n}\nvar person1 = CreatePerson('小明',23)\nvar person2 = CreatePerson('小华',23)\nperson1.showName(); //我的名字是：小明\nperson2.showName(); //我的名字是：小华\n```\n \n#### 工厂模式的优缺点\n\n既然叫工厂模式，它就和我们周围的工厂一样，我们只需要把原材料放进去，就能得到我们需要的产品了。\n\n工厂模式也解决了单例模式的批量生产的问题，避免了单例模式中的大量冗余代码，进行系统的封装，提高代码的重复利用率\n\n不过工厂模式跟我们js内置类的调用方法不同\n\n\n\n\n-----------------------------------------------------------------------------------------------------------\n\n\n### 构造函数模式\n可以创建一个自定义的类，并且可以new出实例\n构造函数做的就是类和实例打交道。\n\n```js\n//构造函数：首字母大写(约定俗成)；\nfunction CreatePerson(name,age){ //创建一个自定义的类\n    //构造函数中的this，都是new出来的实例\n    //构造函数中存放的都是私有的属性和方法；\n    this.name=name;\n    this.age=age;\n    this.showName=function(){\n      console.log('我的名字是：'+this.name)\n    }\n}\n//实例1\nvar person1 = new CreatePerson('小明',25);\nperson1.showName(); // 我的名字是：,小明\n//实例2\nvar person2 = new CreatePerson('小华',24);\n```\n注意，如果不写new，这就是一个普通函数，它返回undefined。但是，如果写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this;。\n\n\nnew操作符的作用如下：\n\n1.创建一个空对象  \n2.由this变量引用该对象  \n3.该对象继承该函数的原型  \n4.把属性和方法加入到this引用的对象中  \n5.新创建的对象由this引用，最后隐式地返回this。  \n过程如下：\n```js\nlet obj = {};//创建一个空对象\nobj.__proto__ = Person.prototype;//该对象继承该函数的原型\nPerson.call(obj);//隐式地返回this\n```\n\n\n\n\n工厂模式和构造函数模式的区别：\n\n1. 在调用的时候不同：\n工厂模式：调用的时候，只是普通函数的调用createPerson();\n构造函数模式：new CreatePerson();\n\n2. 在函数体内不同：\n工厂模式有三步：1）创建对象 2）加工对象 3）返回对象；\n构造函数模式只有1步： 只有加工对象； 因为系统默认会为其创建对象和返回对象；\n\n3. 构造函数默认给我们返回了一个对象，如果我们非要自己手动返回的话：\n  (1)手动返回的是字符串类型：对以前实例上的属性和方法没有影响；\n  (2)手动返回的是引用数据类型:以前实例身上的属性和方法就被覆盖了；实例无法调用属性和方法；\n\n构造函数的方法都是私有方法，每个实例调用的都是自己私有的方法，同样也会有许多重复的代码。\n\n我们可以使用原型模式来解决每个实例中都有相同方法的函数的问题\n\n\n\n\n-----------------------------------------------------------------------------------------------------------\n\n\n\n原型模式\n```js\nfunction CreatePerson(name,age){\n    this.name=name;\n    this.age=age;\n}\n// 我们把公有的方法放到函数的原型链上\nCreatePerson.prototype.showName = function(){\n  console.log('我的名字是：'+this.name)\n}  \nvar person1 = new CreatePerson('小明',25) \nvar person2 = new CreatePerson('小华',24)\nperson1.showName() //小明\n```\n\n \n \n\n原型模式的关键：\n\n1）每个函数数据类型（普通函数，类）上，都有一个属性，叫prototype。\n2）prototype这个对象上，天生自带一个属性，叫constructor:指向当前这个类；\n3）每个对象数据类型（普通对象，prototype，实例）上都有一个属性，叫做__proto__:指向当前实例所属类的原型；\n通过例子我们来看这几句话是什么意思\n\n```js\nfunction CreatePerson(name,age){\n  this.name=name;\n  this.age=age\n}\nCreatePerson.prototype.showName=function(){\n  console.log('我的名字是：'+this.name)\n}\nvar person1 = new CreatePerson('小明',25);\nconsole.dir(person1)\n```\n\n \n在chrome浏览器控制台中显示---->\n\n它们中有一条链关联着 person1.__proto__ === CreatePerson.prototype\n\n\n\n接着来看\n\n```js\nfunction Foo(){\n  this.a=1;\n}\nFoo.prototype.a=2;\nFoo.prototype.b=3;\nvar f1 = new Foo;  //没有参数的话括号可以省略\nconsole.log(f1.a) //1\nconsole.log(f1.b) // 3\n``` \n  \n![js面向对象1](https://tvax3.sinaimg.cn/large/b535b7d3ly1gbzgi54h3ej20d903v74w.jpg)\n\n\n接着来说，Foo.prototype是个对象,那么它的__proto__指向哪里呢？\n\n每个对象数据类型（普通对象，prototype，实例）上都有一个属性，叫做__proto__:指向当前实例所属类的原型 \n\n此外，我们应该知道每一个对象都是function Object这个构造函数的实例\n\n```js\nvar obj = Object();\nobj.__proto__==Object.prototype    //true\n```\n\n所以我们可以接着还原这个原型图\n![js面向对象2](https://tvax4.sinaimg.cn/large/b535b7d3ly1gbzgi5bj97j20nj0h0aff.jpg)\n\n\n还没完,我们发现对象都是函数(构造器)创造出来的，那么函数是谁创造的呢？\n在js中,function都是由function Function这个构造器创造的，每一个函数都是Function的实例\n\n```js\nfunction fun(){};\nfun.__proto__==Function.prototype    //true\n```\n\n现在基本上我们就能得出了完整的原型图了\n![js面向对象3](https://tva1.sinaimg.cn/large/b535b7d3ly1gbzgi5gu5oj20dk0ge0wj.jpg)\n\n\n\n \n补充：\n\n多说一点,判断数据类型的方法时，我们知道有个instanceof的方法\n比如\n\nA instanceof B\ninstanceof判断的规则就是:\n\n沿着A的__proto__这条线查找的同时沿着B的prototype这条线来找，如果两条线能找到同一个引用(对象)，那么就返回true。如果找到终点还未重合，则返回false。\n\n再来看我们之前的那个例子\n```js\nfunction Foo(){\n    this.a=1;\n}\nFoo.prototype.a=2;\nFoo.prototype.b=3;\nvar f1 = new Foo;  //没有参数的话括号可以省略\nconsole.log(f1.a) //1\nconsole.log(f1.b) //3\n``` \n当我们查找f1.a时，因为f1中有这个属性,所以我们得出 f1.a=1;\n当我们查找f1.b时，f1中没有这个属性,我们便顺着f1.__proto__这条链去它的构造器的prototype上找,所以我们得出了 f1.b = 3;\n当我们查找一个对象的属性时,先在这个对象的私有空间内查找，如果没找到,就顺着对象的__proto__这条链去它的构造器的ptototype上查找,如果还没找到,接着沿__proto__向上查找,直到找到Object.prototype还没有的话,这个值就为undefined,这就是所谓的原型链\n\n\n## 总结\n面向对象开发对我们平时开发有什么好处？\n\n随着代码库的增长，你需要改变你组织思路的方法，并开始用面向对象的方式思考。与一系列相互纠缠需要通过一系列的参数传递才能运行的函数相比，对象的范围很容易控制和追踪。\n\n\n基于函数编程的问题在于，一旦有一个函数出现问题，就会导致整个链上的流程失败。而对于对象而言，一个方法出问题不会（也不应该）影响到其他类。\n\n\n补充：  \nJS CLASS类","slug":"javascript中的面向对象开发","published":1,"updated":"2021-03-29T05:44:19.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hypr000ny4tzpor9jdjl","content":"<h1 id=\"js面向对象开发\"><a href=\"#js面向对象开发\" class=\"headerlink\" title=\"js面向对象开发\"></a>js面向对象开发</h1><h2 id=\"什么是对象\"><a href=\"#什么是对象\" class=\"headerlink\" title=\"什么是对象\"></a>什么是对象</h2><p>“无序属性的集合，其属性可以包括基本值、对象或者函数”，对象是一组没有特定顺序的的值。<br>对象的没个属性或方法都有一个俄名字，每个名字都映射到一个值。</p>\n<h2 id=\"什么是面向对象编程？\"><a href=\"#什么是面向对象编程？\" class=\"headerlink\" title=\"什么是面向对象编程？\"></a>什么是面向对象编程？</h2><p>面向对象编程的基本思路完全不同。其背后的思想是：你将所需要做的功能抽象成一个“对象”，然后一遍遍地调用这个对象来完成你想要的功能。</p>\n<p>每次调用对象时，你必须创建对象，确保对象的存在，然后为了使用对象所带的功能你需要设置它的属性，这些功能称为“方法（methods）”。</p>\n<h2 id=\"面向对象的特点\"><a href=\"#面向对象的特点\" class=\"headerlink\" title=\"面向对象的特点\"></a>面向对象的特点</h2><ul>\n<li>封装</li>\n</ul>\n<p>对于一些功能相同或者相似的代码，我们可以放到一个函数中去，多次用到此功能时，我们只需要调用即可，无需多次重写。</p>\n<p>创造对象的几种模式：单例模式，工厂模式，构造函数模式,原型模式等。</p>\n<ul>\n<li>继承</li>\n</ul>\n<p>子类可以继承父类的属性和方法</p>\n<ul>\n<li>多态(重载和重写)</li>\n</ul>\n<p>重载：重载就是函数方法名相同，参数不同</p>\n<p>重写：子类可以改写父类的属性和方法。</p>\n<p>Js中存在多态，但是Js中不存在函数的重载，因为函数名相同的话，后面的一定会把前面的覆盖，但Js中存在重写，所以Js中的多态主要是指重写。<br>但是也存在一种既不是重写却类似重载的Js多态方式,我们可以通过判断函数的参数的不同来实现不同的功能来模拟重载，就是我们调用函数时根据传入不同的参数实现不同的功能，如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> num === <span class=\"string\">\"undefined\"</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n1 = sum(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> n2 = sum();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n2);</span><br></pre></td></tr></table></figure></p>\n<p>当传入空参数的时候，num为undefined所以会返回0，如果不是空参数的时候，就返回num。</p>\n<h2 id=\"创建对象的几种模式\"><a href=\"#创建对象的几种模式\" class=\"headerlink\" title=\"创建对象的几种模式\"></a>创建对象的几种模式</h2><p>一般创建对象是用以下两种方式</p>\n<p>new object创建对象：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">Person.name = <span class=\"string\">\"张三\"</span>;</span><br><span class=\"line\">Person.age = <span class=\"string\">\"18\"</span>;</span><br><span class=\"line\">Person.job = <span class=\"string\">\"123\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>或者，对象字面量的方式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person = &#123;</span><br><span class=\"line\">  name:<span class=\"string\">\"lisi\"</span>,</span><br><span class=\"line\">  age:<span class=\"string\">\"18\"</span>,</span><br><span class=\"line\">  job:<span class=\"string\">\"123\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>一个人写代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNum</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两个人，一起写同一个js。<br>假设，一天小明发现自己写的getNum方法出问题了，原来是小华写的js中也有个getNum的函数，代码合并后把他的覆盖掉了，于是便找小华理论去，经过一番妥协后，两人都把自己的代码改了改。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</span><br><span class=\"line\">  num:<span class=\"number\">1</span>,</span><br><span class=\"line\">  getNum:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaohua = &#123;</span><br><span class=\"line\">  num:<span class=\"number\">2</span>,</span><br><span class=\"line\">  getNum: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(xiaoming.num);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(xiaoming.getNum());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(xiaohua.num);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(xiaohua.getNum());</span><br></pre></td></tr></table></figure>\n<p>这就是我们所谓的单例模式(命名空间)</p>\n<p>我们把描述同一个事物的方法或者属性放到同一个对象里，不同事物之间的方法或者属性名相同相互也不会发生冲突。</p>\n<h4 id=\"单例模式注意点：\"><a href=\"#单例模式注意点：\" class=\"headerlink\" title=\"单例模式注意点：\"></a>单例模式注意点：</h4><p>当在一个命名空间A中调用别的命名空间B中的函数的时候，调用方法为 B.functionName();</p>\n<p>当在一个命名空间A中调用自己空间中的函数的时候，调用方法为 this.functionName();</p>\n<h4 id=\"单例模式的优劣\"><a href=\"#单例模式的优劣\" class=\"headerlink\" title=\"单例模式的优劣\"></a>单例模式的优劣</h4><p>优点：</p>\n<p>使用单例模式，我们可以实现简单的模块化开发</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  getCss:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//code</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setCss:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//code</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以把自己写好的工具方法放到一个单独的js文件中，然后直接引入即可。</p>\n<p>避免了全局变量名的冲突</p>\n<p>需要注意的是，我们在引入各个模块的时候，需要注意引入的顺序，引入顺序是按照各模块之间的相互依赖进行前后排列的；</p>\n<p>缺点：</p>\n<p>单例模式只是一定程度上避免了变量名的冲突，但并不能彻底解决此问题，而且在不同的对象下，我们可能会有很多功能相同的代码，最终造成大量的冗余代码。<br>单例模式让每个对象有了自己独立的命名空间，但是并不能批量生产的问题，每一个新的对象都要重新写一份一模一样的代码（如下面代码所示）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name:<span class=\"string\">'小明'</span>,</span><br><span class=\"line\">  age:<span class=\"number\">24</span>,</span><br><span class=\"line\">  showName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的名字是：'</span>+<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name:<span class=\"string\">'小华'</span>,</span><br><span class=\"line\">  age:<span class=\"number\">25</span>,</span><br><span class=\"line\">  showName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的名字是：'</span>+<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>1、什么是工厂模式？</p>\n<p>把实现同一件事情的相同代码放到同一个函数中，想实现这个功能只要执行这个函数即可，这就是工厂模式，也叫做“函数的封装”，这也是”低耦合，高内聚“，从而达到减少页面冗余代码，提高代码重复利用率的作用。</p>\n<p>工厂模式其实就是把需要一个个的编写的对象,放在一个函数中统一的进行创建，说白了就是普通函数的封装。</p>\n<p>工厂模式总共3步骤：<br>1）进厂 — 创建一个空对象<br>2）加工 — 加工对象：给对象添加属性和方法；<br>3）输出 — 返回对象：return 对象；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreatePerson</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj=&#123;&#125;;<span class=\"comment\">//1.创建一个空对象</span></span><br><span class=\"line\">  <span class=\"comment\">//2.加工对象</span></span><br><span class=\"line\">  obj.name=name;</span><br><span class=\"line\">  obj.age=age;</span><br><span class=\"line\">  obj.showName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的名字是：'</span>+<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj;<span class=\"comment\">//3.输出对象；</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = CreatePerson(<span class=\"string\">'小明'</span>,<span class=\"number\">23</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = CreatePerson(<span class=\"string\">'小华'</span>,<span class=\"number\">23</span>)</span><br><span class=\"line\">person1.showName(); <span class=\"comment\">//我的名字是：小明</span></span><br><span class=\"line\">person2.showName(); <span class=\"comment\">//我的名字是：小华</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"工厂模式的优缺点\"><a href=\"#工厂模式的优缺点\" class=\"headerlink\" title=\"工厂模式的优缺点\"></a>工厂模式的优缺点</h4><p>既然叫工厂模式，它就和我们周围的工厂一样，我们只需要把原材料放进去，就能得到我们需要的产品了。</p>\n<p>工厂模式也解决了单例模式的批量生产的问题，避免了单例模式中的大量冗余代码，进行系统的封装，提高代码的重复利用率</p>\n<p>不过工厂模式跟我们js内置类的调用方法不同</p>\n<hr>\n<h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h3><p>可以创建一个自定义的类，并且可以new出实例<br>构造函数做的就是类和实例打交道。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构造函数：首字母大写(约定俗成)；</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreatePerson</span>(<span class=\"params\">name,age</span>)</span>&#123; <span class=\"comment\">//创建一个自定义的类</span></span><br><span class=\"line\">    <span class=\"comment\">//构造函数中的this，都是new出来的实例</span></span><br><span class=\"line\">    <span class=\"comment\">//构造函数中存放的都是私有的属性和方法；</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.showName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的名字是：'</span>+<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实例1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">'小明'</span>,<span class=\"number\">25</span>);</span><br><span class=\"line\">person1.showName(); <span class=\"comment\">// 我的名字是：,小明</span></span><br><span class=\"line\"><span class=\"comment\">//实例2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">'小华'</span>,<span class=\"number\">24</span>);</span><br></pre></td></tr></table></figure>\n<p>注意，如果不写new，这就是一个普通函数，它返回undefined。但是，如果写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this;。</p>\n<p>new操作符的作用如下：</p>\n<p>1.创建一个空对象<br>2.由this变量引用该对象<br>3.该对象继承该函数的原型<br>4.把属性和方法加入到this引用的对象中<br>5.新创建的对象由this引用，最后隐式地返回this。<br>过程如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;<span class=\"comment\">//创建一个空对象</span></span><br><span class=\"line\">obj.__proto__ = Person.prototype;<span class=\"comment\">//该对象继承该函数的原型</span></span><br><span class=\"line\">Person.call(obj);<span class=\"comment\">//隐式地返回this</span></span><br></pre></td></tr></table></figure></p>\n<p>工厂模式和构造函数模式的区别：</p>\n<ol>\n<li><p>在调用的时候不同：<br>工厂模式：调用的时候，只是普通函数的调用createPerson();<br>构造函数模式：new CreatePerson();</p>\n</li>\n<li><p>在函数体内不同：<br>工厂模式有三步：1）创建对象 2）加工对象 3）返回对象；<br>构造函数模式只有1步： 只有加工对象； 因为系统默认会为其创建对象和返回对象；</p>\n</li>\n<li><p>构造函数默认给我们返回了一个对象，如果我们非要自己手动返回的话：<br>(1)手动返回的是字符串类型：对以前实例上的属性和方法没有影响；<br>(2)手动返回的是引用数据类型:以前实例身上的属性和方法就被覆盖了；实例无法调用属性和方法；</p>\n</li>\n</ol>\n<p>构造函数的方法都是私有方法，每个实例调用的都是自己私有的方法，同样也会有许多重复的代码。</p>\n<p>我们可以使用原型模式来解决每个实例中都有相同方法的函数的问题</p>\n<hr>\n<p>原型模式<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreatePerson</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 我们把公有的方法放到函数的原型链上</span></span><br><span class=\"line\">CreatePerson.prototype.showName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的名字是：'</span>+<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">'小明'</span>,<span class=\"number\">25</span>) </span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">'小华'</span>,<span class=\"number\">24</span>)</span><br><span class=\"line\">person1.showName() <span class=\"comment\">//小明</span></span><br></pre></td></tr></table></figure></p>\n<p>原型模式的关键：</p>\n<p>1）每个函数数据类型（普通函数，类）上，都有一个属性，叫prototype。<br>2）prototype这个对象上，天生自带一个属性，叫constructor:指向当前这个类；<br>3）每个对象数据类型（普通对象，prototype，实例）上都有一个属性，叫做<strong>proto</strong>:指向当前实例所属类的原型；<br>通过例子我们来看这几句话是什么意思</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreatePerson</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age=age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CreatePerson.prototype.showName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的名字是：'</span>+<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">'小明'</span>,<span class=\"number\">25</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(person1)</span><br></pre></td></tr></table></figure>\n<p>在chrome浏览器控制台中显示—-&gt;</p>\n<p>它们中有一条链关联着 person1.<strong>proto</strong> === CreatePerson.prototype</p>\n<p>接着来看</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.a=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.prototype.a=<span class=\"number\">2</span>;</span><br><span class=\"line\">Foo.prototype.b=<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"keyword\">new</span> Foo;  <span class=\"comment\">//没有参数的话括号可以省略</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.a) <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.b) <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\">  </span></span><br><span class=\"line\"><span class=\"string\">![js面向对象1](https://tvax3.sinaimg.cn/large/b535b7d3ly1gbzgi54h3ej20d903v74w.jpg)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">接着来说，Foo.prototype是个对象,那么它的__proto__指向哪里呢？</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">每个对象数据类型（普通对象，prototype，实例）上都有一个属性，叫做__proto__:指向当前实例所属类的原型 </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">此外，我们应该知道每一个对象都是function Object这个构造函数的实例</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">obj.__proto__==<span class=\"built_in\">Object</span>.prototype    <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>所以我们可以接着还原这个原型图<br><img src=\"https://tvax4.sinaimg.cn/large/b535b7d3ly1gbzgi5bj97j20nj0h0aff.jpg\" alt=\"js面向对象2\"></p>\n<p>还没完,我们发现对象都是函数(构造器)创造出来的，那么函数是谁创造的呢？<br>在js中,function都是由function Function这个构造器创造的，每一个函数都是Function的实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">fun.__proto__==<span class=\"built_in\">Function</span>.prototype    <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>现在基本上我们就能得出了完整的原型图了<br><img src=\"https://tva1.sinaimg.cn/large/b535b7d3ly1gbzgi5gu5oj20dk0ge0wj.jpg\" alt=\"js面向对象3\"></p>\n<p>补充：</p>\n<p>多说一点,判断数据类型的方法时，我们知道有个instanceof的方法<br>比如</p>\n<p>A instanceof B<br>instanceof判断的规则就是:</p>\n<p>沿着A的<strong>proto</strong>这条线查找的同时沿着B的prototype这条线来找，如果两条线能找到同一个引用(对象)，那么就返回true。如果找到终点还未重合，则返回false。</p>\n<p>再来看我们之前的那个例子</p>\n<pre><code class=\"js\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>{\n    <span class=\"keyword\">this</span>.a=<span class=\"number\">1</span>;\n}\nFoo.prototype.a=<span class=\"number\">2</span>;\nFoo.prototype.b=<span class=\"number\">3</span>;\n<span class=\"keyword\">var</span> f1 = <span class=\"keyword\">new</span> Foo;  <span class=\"comment\">//没有参数的话括号可以省略</span>\n<span class=\"built_in\">console</span>.log(f1.a) <span class=\"comment\">//1</span>\n<span class=\"built_in\">console</span>.log(f1.b) <span class=\"comment\">//3</span>\n</code></pre>\n<p>当我们查找f1.a时，因为f1中有这个属性,所以我们得出 f1.a=1;<br>当我们查找f1.b时，f1中没有这个属性,我们便顺着f1.<strong>proto</strong>这条链去它的构造器的prototype上找,所以我们得出了 f1.b = 3;<br>当我们查找一个对象的属性时,先在这个对象的私有空间内查找，如果没找到,就顺着对象的<strong>proto</strong>这条链去它的构造器的ptototype上查找,如果还没找到,接着沿<strong>proto</strong>向上查找,直到找到Object.prototype还没有的话,这个值就为undefined,这就是所谓的原型链</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>面向对象开发对我们平时开发有什么好处？</p>\n<p>随着代码库的增长，你需要改变你组织思路的方法，并开始用面向对象的方式思考。与一系列相互纠缠需要通过一系列的参数传递才能运行的函数相比，对象的范围很容易控制和追踪。</p>\n<p>基于函数编程的问题在于，一旦有一个函数出现问题，就会导致整个链上的流程失败。而对于对象而言，一个方法出问题不会（也不应该）影响到其他类。</p>\n<p>补充：<br>JS CLASS类</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"js面向对象开发\"><a href=\"#js面向对象开发\" class=\"headerlink\" title=\"js面向对象开发\"></a>js面向对象开发</h1><h2 id=\"什么是对象\"><a href=\"#什么是对象\" class=\"headerlink\" title=\"什么是对象\"></a>什么是对象</h2><p>“无序属性的集合，其属性可以包括基本值、对象或者函数”，对象是一组没有特定顺序的的值。<br>对象的没个属性或方法都有一个俄名字，每个名字都映射到一个值。</p>\n<h2 id=\"什么是面向对象编程？\"><a href=\"#什么是面向对象编程？\" class=\"headerlink\" title=\"什么是面向对象编程？\"></a>什么是面向对象编程？</h2><p>面向对象编程的基本思路完全不同。其背后的思想是：你将所需要做的功能抽象成一个“对象”，然后一遍遍地调用这个对象来完成你想要的功能。</p>\n<p>每次调用对象时，你必须创建对象，确保对象的存在，然后为了使用对象所带的功能你需要设置它的属性，这些功能称为“方法（methods）”。</p>\n<h2 id=\"面向对象的特点\"><a href=\"#面向对象的特点\" class=\"headerlink\" title=\"面向对象的特点\"></a>面向对象的特点</h2><ul>\n<li>封装</li>\n</ul>\n<p>对于一些功能相同或者相似的代码，我们可以放到一个函数中去，多次用到此功能时，我们只需要调用即可，无需多次重写。</p>\n<p>创造对象的几种模式：单例模式，工厂模式，构造函数模式,原型模式等。</p>\n<ul>\n<li>继承</li>\n</ul>\n<p>子类可以继承父类的属性和方法</p>\n<ul>\n<li>多态(重载和重写)</li>\n</ul>\n<p>重载：重载就是函数方法名相同，参数不同</p>\n<p>重写：子类可以改写父类的属性和方法。</p>\n<p>Js中存在多态，但是Js中不存在函数的重载，因为函数名相同的话，后面的一定会把前面的覆盖，但Js中存在重写，所以Js中的多态主要是指重写。<br>但是也存在一种既不是重写却类似重载的Js多态方式,我们可以通过判断函数的参数的不同来实现不同的功能来模拟重载，就是我们调用函数时根据传入不同的参数实现不同的功能，如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> num === <span class=\"string\">\"undefined\"</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> n1 = sum(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> n2 = sum();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n2);</span><br></pre></td></tr></table></figure></p>\n<p>当传入空参数的时候，num为undefined所以会返回0，如果不是空参数的时候，就返回num。</p>\n<h2 id=\"创建对象的几种模式\"><a href=\"#创建对象的几种模式\" class=\"headerlink\" title=\"创建对象的几种模式\"></a>创建对象的几种模式</h2><p>一般创建对象是用以下两种方式</p>\n<p>new object创建对象：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">Person.name = <span class=\"string\">\"张三\"</span>;</span><br><span class=\"line\">Person.age = <span class=\"string\">\"18\"</span>;</span><br><span class=\"line\">Person.job = <span class=\"string\">\"123\"</span>;</span><br></pre></td></tr></table></figure></p>\n<p>或者，对象字面量的方式：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Person = &#123;</span><br><span class=\"line\">  name:<span class=\"string\">\"lisi\"</span>,</span><br><span class=\"line\">  age:<span class=\"string\">\"18\"</span>,</span><br><span class=\"line\">  job:<span class=\"string\">\"123\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>一个人写代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNum</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两个人，一起写同一个js。<br>假设，一天小明发现自己写的getNum方法出问题了，原来是小华写的js中也有个getNum的函数，代码合并后把他的覆盖掉了，于是便找小华理论去，经过一番妥协后，两人都把自己的代码改了改。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</span><br><span class=\"line\">  num:<span class=\"number\">1</span>,</span><br><span class=\"line\">  getNum:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaohua = &#123;</span><br><span class=\"line\">  num:<span class=\"number\">2</span>,</span><br><span class=\"line\">  getNum: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(xiaoming.num);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(xiaoming.getNum());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(xiaohua.num);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(xiaohua.getNum());</span><br></pre></td></tr></table></figure>\n<p>这就是我们所谓的单例模式(命名空间)</p>\n<p>我们把描述同一个事物的方法或者属性放到同一个对象里，不同事物之间的方法或者属性名相同相互也不会发生冲突。</p>\n<h4 id=\"单例模式注意点：\"><a href=\"#单例模式注意点：\" class=\"headerlink\" title=\"单例模式注意点：\"></a>单例模式注意点：</h4><p>当在一个命名空间A中调用别的命名空间B中的函数的时候，调用方法为 B.functionName();</p>\n<p>当在一个命名空间A中调用自己空间中的函数的时候，调用方法为 this.functionName();</p>\n<h4 id=\"单例模式的优劣\"><a href=\"#单例模式的优劣\" class=\"headerlink\" title=\"单例模式的优劣\"></a>单例模式的优劣</h4><p>优点：</p>\n<p>使用单例模式，我们可以实现简单的模块化开发</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  getCss:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//code</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setCss:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//code</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以把自己写好的工具方法放到一个单独的js文件中，然后直接引入即可。</p>\n<p>避免了全局变量名的冲突</p>\n<p>需要注意的是，我们在引入各个模块的时候，需要注意引入的顺序，引入顺序是按照各模块之间的相互依赖进行前后排列的；</p>\n<p>缺点：</p>\n<p>单例模式只是一定程度上避免了变量名的冲突，但并不能彻底解决此问题，而且在不同的对象下，我们可能会有很多功能相同的代码，最终造成大量的冗余代码。<br>单例模式让每个对象有了自己独立的命名空间，但是并不能批量生产的问题，每一个新的对象都要重新写一份一模一样的代码（如下面代码所示）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name:<span class=\"string\">'小明'</span>,</span><br><span class=\"line\">  age:<span class=\"number\">24</span>,</span><br><span class=\"line\">  showName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的名字是：'</span>+<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name:<span class=\"string\">'小华'</span>,</span><br><span class=\"line\">  age:<span class=\"number\">25</span>,</span><br><span class=\"line\">  showName:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的名字是：'</span>+<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>1、什么是工厂模式？</p>\n<p>把实现同一件事情的相同代码放到同一个函数中，想实现这个功能只要执行这个函数即可，这就是工厂模式，也叫做“函数的封装”，这也是”低耦合，高内聚“，从而达到减少页面冗余代码，提高代码重复利用率的作用。</p>\n<p>工厂模式其实就是把需要一个个的编写的对象,放在一个函数中统一的进行创建，说白了就是普通函数的封装。</p>\n<p>工厂模式总共3步骤：<br>1）进厂 — 创建一个空对象<br>2）加工 — 加工对象：给对象添加属性和方法；<br>3）输出 — 返回对象：return 对象；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreatePerson</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj=&#123;&#125;;<span class=\"comment\">//1.创建一个空对象</span></span><br><span class=\"line\">  <span class=\"comment\">//2.加工对象</span></span><br><span class=\"line\">  obj.name=name;</span><br><span class=\"line\">  obj.age=age;</span><br><span class=\"line\">  obj.showName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的名字是：'</span>+<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj;<span class=\"comment\">//3.输出对象；</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = CreatePerson(<span class=\"string\">'小明'</span>,<span class=\"number\">23</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = CreatePerson(<span class=\"string\">'小华'</span>,<span class=\"number\">23</span>)</span><br><span class=\"line\">person1.showName(); <span class=\"comment\">//我的名字是：小明</span></span><br><span class=\"line\">person2.showName(); <span class=\"comment\">//我的名字是：小华</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"工厂模式的优缺点\"><a href=\"#工厂模式的优缺点\" class=\"headerlink\" title=\"工厂模式的优缺点\"></a>工厂模式的优缺点</h4><p>既然叫工厂模式，它就和我们周围的工厂一样，我们只需要把原材料放进去，就能得到我们需要的产品了。</p>\n<p>工厂模式也解决了单例模式的批量生产的问题，避免了单例模式中的大量冗余代码，进行系统的封装，提高代码的重复利用率</p>\n<p>不过工厂模式跟我们js内置类的调用方法不同</p>\n<hr>\n<h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h3><p>可以创建一个自定义的类，并且可以new出实例<br>构造函数做的就是类和实例打交道。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构造函数：首字母大写(约定俗成)；</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreatePerson</span>(<span class=\"params\">name,age</span>)</span>&#123; <span class=\"comment\">//创建一个自定义的类</span></span><br><span class=\"line\">    <span class=\"comment\">//构造函数中的this，都是new出来的实例</span></span><br><span class=\"line\">    <span class=\"comment\">//构造函数中存放的都是私有的属性和方法；</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.showName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的名字是：'</span>+<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实例1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">'小明'</span>,<span class=\"number\">25</span>);</span><br><span class=\"line\">person1.showName(); <span class=\"comment\">// 我的名字是：,小明</span></span><br><span class=\"line\"><span class=\"comment\">//实例2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">'小华'</span>,<span class=\"number\">24</span>);</span><br></pre></td></tr></table></figure>\n<p>注意，如果不写new，这就是一个普通函数，它返回undefined。但是，如果写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this;。</p>\n<p>new操作符的作用如下：</p>\n<p>1.创建一个空对象<br>2.由this变量引用该对象<br>3.该对象继承该函数的原型<br>4.把属性和方法加入到this引用的对象中<br>5.新创建的对象由this引用，最后隐式地返回this。<br>过程如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;<span class=\"comment\">//创建一个空对象</span></span><br><span class=\"line\">obj.__proto__ = Person.prototype;<span class=\"comment\">//该对象继承该函数的原型</span></span><br><span class=\"line\">Person.call(obj);<span class=\"comment\">//隐式地返回this</span></span><br></pre></td></tr></table></figure></p>\n<p>工厂模式和构造函数模式的区别：</p>\n<ol>\n<li><p>在调用的时候不同：<br>工厂模式：调用的时候，只是普通函数的调用createPerson();<br>构造函数模式：new CreatePerson();</p>\n</li>\n<li><p>在函数体内不同：<br>工厂模式有三步：1）创建对象 2）加工对象 3）返回对象；<br>构造函数模式只有1步： 只有加工对象； 因为系统默认会为其创建对象和返回对象；</p>\n</li>\n<li><p>构造函数默认给我们返回了一个对象，如果我们非要自己手动返回的话：<br>(1)手动返回的是字符串类型：对以前实例上的属性和方法没有影响；<br>(2)手动返回的是引用数据类型:以前实例身上的属性和方法就被覆盖了；实例无法调用属性和方法；</p>\n</li>\n</ol>\n<p>构造函数的方法都是私有方法，每个实例调用的都是自己私有的方法，同样也会有许多重复的代码。</p>\n<p>我们可以使用原型模式来解决每个实例中都有相同方法的函数的问题</p>\n<hr>\n<p>原型模式<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreatePerson</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 我们把公有的方法放到函数的原型链上</span></span><br><span class=\"line\">CreatePerson.prototype.showName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的名字是：'</span>+<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">'小明'</span>,<span class=\"number\">25</span>) </span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">'小华'</span>,<span class=\"number\">24</span>)</span><br><span class=\"line\">person1.showName() <span class=\"comment\">//小明</span></span><br></pre></td></tr></table></figure></p>\n<p>原型模式的关键：</p>\n<p>1）每个函数数据类型（普通函数，类）上，都有一个属性，叫prototype。<br>2）prototype这个对象上，天生自带一个属性，叫constructor:指向当前这个类；<br>3）每个对象数据类型（普通对象，prototype，实例）上都有一个属性，叫做<strong>proto</strong>:指向当前实例所属类的原型；<br>通过例子我们来看这几句话是什么意思</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreatePerson</span>(<span class=\"params\">name,age</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age=age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">CreatePerson.prototype.showName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我的名字是：'</span>+<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> CreatePerson(<span class=\"string\">'小明'</span>,<span class=\"number\">25</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(person1)</span><br></pre></td></tr></table></figure>\n<p>在chrome浏览器控制台中显示—-&gt;</p>\n<p>它们中有一条链关联着 person1.<strong>proto</strong> === CreatePerson.prototype</p>\n<p>接着来看</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.a=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Foo.prototype.a=<span class=\"number\">2</span>;</span><br><span class=\"line\">Foo.prototype.b=<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"keyword\">new</span> Foo;  <span class=\"comment\">//没有参数的话括号可以省略</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.a) <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.b) <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\">  </span></span><br><span class=\"line\"><span class=\"string\">![js面向对象1](https://tvax3.sinaimg.cn/large/b535b7d3ly1gbzgi54h3ej20d903v74w.jpg)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">接着来说，Foo.prototype是个对象,那么它的__proto__指向哪里呢？</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">每个对象数据类型（普通对象，prototype，实例）上都有一个属性，叫做__proto__:指向当前实例所属类的原型 </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">此外，我们应该知道每一个对象都是function Object这个构造函数的实例</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>js</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">obj.__proto__==<span class=\"built_in\">Object</span>.prototype    <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>所以我们可以接着还原这个原型图<br><img src=\"https://tvax4.sinaimg.cn/large/b535b7d3ly1gbzgi5bj97j20nj0h0aff.jpg\" alt=\"js面向对象2\"></p>\n<p>还没完,我们发现对象都是函数(构造器)创造出来的，那么函数是谁创造的呢？<br>在js中,function都是由function Function这个构造器创造的，每一个函数都是Function的实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">fun.__proto__==<span class=\"built_in\">Function</span>.prototype    <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>现在基本上我们就能得出了完整的原型图了<br><img src=\"https://tva1.sinaimg.cn/large/b535b7d3ly1gbzgi5gu5oj20dk0ge0wj.jpg\" alt=\"js面向对象3\"></p>\n<p>补充：</p>\n<p>多说一点,判断数据类型的方法时，我们知道有个instanceof的方法<br>比如</p>\n<p>A instanceof B<br>instanceof判断的规则就是:</p>\n<p>沿着A的<strong>proto</strong>这条线查找的同时沿着B的prototype这条线来找，如果两条线能找到同一个引用(对象)，那么就返回true。如果找到终点还未重合，则返回false。</p>\n<p>再来看我们之前的那个例子</p>\n<pre><code class=\"js\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>)</span>{\n    <span class=\"keyword\">this</span>.a=<span class=\"number\">1</span>;\n}\nFoo.prototype.a=<span class=\"number\">2</span>;\nFoo.prototype.b=<span class=\"number\">3</span>;\n<span class=\"keyword\">var</span> f1 = <span class=\"keyword\">new</span> Foo;  <span class=\"comment\">//没有参数的话括号可以省略</span>\n<span class=\"built_in\">console</span>.log(f1.a) <span class=\"comment\">//1</span>\n<span class=\"built_in\">console</span>.log(f1.b) <span class=\"comment\">//3</span>\n</code></pre>\n<p>当我们查找f1.a时，因为f1中有这个属性,所以我们得出 f1.a=1;<br>当我们查找f1.b时，f1中没有这个属性,我们便顺着f1.<strong>proto</strong>这条链去它的构造器的prototype上找,所以我们得出了 f1.b = 3;<br>当我们查找一个对象的属性时,先在这个对象的私有空间内查找，如果没找到,就顺着对象的<strong>proto</strong>这条链去它的构造器的ptototype上查找,如果还没找到,接着沿<strong>proto</strong>向上查找,直到找到Object.prototype还没有的话,这个值就为undefined,这就是所谓的原型链</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>面向对象开发对我们平时开发有什么好处？</p>\n<p>随着代码库的增长，你需要改变你组织思路的方法，并开始用面向对象的方式思考。与一系列相互纠缠需要通过一系列的参数传递才能运行的函数相比，对象的范围很容易控制和追踪。</p>\n<p>基于函数编程的问题在于，一旦有一个函数出现问题，就会导致整个链上的流程失败。而对于对象而言，一个方法出问题不会（也不应该）影响到其他类。</p>\n<p>补充：<br>JS CLASS类</p>\n"},{"layout":"post","title":"javascript中的Map","date":"2019-08-26T02:53:41.000Z","author":"胡豪","_content":"\n\n# 探究javascript Map\n什么是Map，此处说的Map，非js中的map( )方法,下文会详细解释。  \nMap 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。  \nECMAScript6原生实现了Map类，即我们所说的字典，字典和集合很像，不过集合是以值值得形式存储元素，字典则是以键值的形式存储元素。字典也叫映射。\n## 语法\n\n```js\nnew Map([iterable])\n```\niterable (可迭代传参)\nIterable 可以是一个数组或者其他 iterable 对象，其元素为键值对(两个元素的数组，例如: [[ 1, 'one' ],[ 2, 'two' ]])。 每个键值对都会添加到新的 Map。null 会被当做 undefined。\n\n## 描述\n\n一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个  for...of 循环在每次迭代后会返回一个形式为[key，value]的数组。\n\n键的比较是基于 \"SameValueZero\" 算法：NaN 是与 NaN 相等的（虽然 NaN !== NaN），剩下所有其它的值是根据 === 运算符的结果判断是否相等。 \n\nObjects 和 Maps 类似的是，它们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（并且也没有其他内建的替代方式了）过去我们一直都把对象当成 Maps 使用。不过 Maps 和 Objects 有一些重要的区别，在下列情况里使用 Map 会是更好的选择：\n\n* 一个Object的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值，包括函数、对象、基本类型。\n* Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。\n* 你可以通过 size 属性直接获取一个 Map 的键值对个数，而 Object 的键值对个数只能手动计算。\n* Map 可直接进行迭代，而 Object 的迭代需要先获取它的键数组，然后再进行迭代。\n* Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然 ES5 开始可以用 map = Object.create(null) 来创建一个没有原型的对象，但是这种用法不太常见。\n* Map 在涉及频繁增删键值对的场景下会有些性能优势。\n\n最大的差别其实就是：object的键的类型是 字符串；map的键的类型是 可以是任意类型;  \nobject获取键值使用Object.keys（返回数组）；Map获取键值使用 map变量.keys() (返回迭代器)。\n\n\n## 属性\n\n* Map.length \n\n* get Map[@@species]\n\n* Map.prototype\n\n## Map 实例\n\n### *属性\nMap.prototype.constructor  \n返回一个函数，它创建了实例的原型。默认是Map函数。\n\nMap.prototype.size  \n返回Map对象的键/值对的数量。\n\n### *方法\n\nMap.prototype.clear()\n移除Map对象的所有键/值对 。\n\nMap.prototype.delete(key)\n如果 Map 对象中存在该元素，则移除它并返回 true；否则如果该元素不存在则返回 false\n\nMap.prototype.entries()\n返回一个新的 Iterator 对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。\n\nMap.prototype.forEach(callbackFn[, thisArg])\n按插入顺序，为 Map对象里的每一键值对调用一次callbackFn函数。如果为forEach提供了thisArg，它将在每次回调中作为this值。\n\nMap.prototype.get(key)\n返回键对应的值，如果不存在，则返回undefined。\n\nMap.prototype.has(key)\n返回一个布尔值，表示Map实例是否包含键对应的值。\n\nMap.prototype.keys()\n返回一个新的 Iterator对象， 它按插入顺序包含了Map对象中每个元素的键 。\n\nMap.prototype.set(key, value)\n设置Map对象中键的值。返回该Map对象。\n\nMap.prototype.values()\n返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的值 。\n\nMap.prototype[@@iterator]()\n返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。\n\n## 实例\n\n### 使用 Map 对象\n```js\nvar myMap = new Map();\n \nvar keyObj = {},\n    keyFunc = function () {},\n    keyString = \"a string\";\n \n// 添加键\nmyMap.set(keyString, \"和键'a string'关联的值\");\nmyMap.set(keyObj, \"和键keyObj关联的值\");\nmyMap.set(keyFunc, \"和键keyFunc关联的值\");\n \nmyMap.size; // 3\n \n// 读取值\nmyMap.get(keyString);    // \"和键'a string'关联的值\"\nmyMap.get(keyObj);       // \"和键keyObj关联的值\"\nmyMap.get(keyFunc);      // \"和键keyFunc关联的值\"\n \nmyMap.get(\"a string\");   // \"和键'a string'关联的值\"\n                         // 因为keyString === 'a string'\nmyMap.get({});           // undefined, 因为keyObj !== {}\nmyMap.get(function() {}) // undefined, 因为keyFunc !== function () {}\n```\n### 使用 for..of 方法迭代 Map\n```js\nvar myMap = new Map();\nmyMap.set(0, \"zero\");\nmyMap.set(1, \"one\");\nfor (var [key, value] of myMap) {\n  console.log(key + \" = \" + value);\n}\n// 将会显示两个log。一个是\"0 = zero\"另一个是\"1 = one\"\n\nfor (var key of myMap.keys()) {\n  console.log(key);\n}\n// 将会显示两个log。 一个是 \"0\" 另一个是 \"1\"\n\nfor (var value of myMap.values()) {\n  console.log(value);\n}\n// 将会显示两个log。 一个是 \"zero\" 另一个是 \"one\"\n\nfor (var [key, value] of myMap.entries()) {\n  console.log(key + \" = \" + value);\n}\n// 将会显示两个log。 一个是 \"0 = zero\" 另一个是 \"1 = one\"\n```\n### 使用 forEach() 方法迭代 Map\n```js\nmyMap.forEach(function(value, key) {\n  console.log(key + \" = \" + value);\n})\n// 将会显示两个logs。 一个是 \"0 = zero\" 另一个是 \"1 = one\"\n```\n### Map 与数组的关系\n```js\nvar kvArray = [[\"key1\", \"value1\"], [\"key2\", \"value2\"]];\n\n// 使用常规的Map构造函数可以将一个二维键值对数组转换成一个Map对象\nvar myMap = new Map(kvArray);\n\nmyMap.get(\"key1\"); // 返回值为 \"value1\"\n\n// 使用Array.from函数可以将一个Map对象转换成一个二维键值对数组\nconsole.log(Array.from(myMap)); // 输出和kvArray相同的数组\n\n// 或者在键或者值的迭代器上使用Array.from，进而得到只含有键或者值的数组\nconsole.log(Array.from(myMap.keys())); // 输出 [\"key1\", \"key2\"]\n```\n### 复制或合并 Maps\n```js\nvar original = new Map([\n  [1, 'one']\n]);\n\nvar clone = new Map(original);\n\nconsole.log(clone.get(1)); // one\nconsole.log(original === clone); // false. Useful for shallow comparison\n```\n请记住，数据本身未被克隆。\n\nMap对象间可以进行合并，但是会保持键的唯一性。\n```js\nvar first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\nvar second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n]);\n\n// 合并两个Map对象时，如果有重复的键值，则后面的会覆盖前面的。\n// 展开运算符本质上是将Map对象转换成数组。\nvar merged = new Map([...first, ...second]);\n\nconsole.log(merged.get(1)); // uno\nconsole.log(merged.get(2)); // dos\nconsole.log(merged.get(3)); // three\n```\nMap对象也能与数组合并：\n```js\nvar first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\nvar second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n]);\n\n// Map对象同数组进行合并时，如果有重复的键值，则后面的会覆盖前面的。\nvar merged = new Map([...first, ...second, [1, 'eins']]);\n\nconsole.log(merged.get(1)); // eins\nconsole.log(merged.get(2)); // dos\nconsole.log(merged.get(3)); // three\n```\n\n\n# 以上讲的是Map，那不得不说map( )是什么\n\nECMAScript5中我们有一个数组方法 map( ),区别于ECMAScript6 中 Map类  \nmap() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。\n\n## 语法\n``` js\nvar new_array = array.map(function callback(currentValue,index,arr), thisValue)\n```\n## 参数\ncallback 生成新数组元素的函数，使用三个参数：  \n* currentValue callback 数组中正在处理的当前元素。  \n* index可选 callback 数组中正在处理的当前元素的索引。  \n* array可选 callback  map 方法被调用的数组。\n\nthisArg可选 执行 callback 函数时使用的this 值。\n\n## 示例\n```js\nvar array1 = [1,3,6];\nconst map1 = array1.map(x => x *2);\nconsole.log(map1);   \n// > Array [2, 6, 12]\n```\n\n```js\nvar array1 = [1, 3,6];\n\nconst map1 = array1.map(x => {\n    if (x == 3) {\n      return x * 2;\n    }\n});\n \nconsole.log(map1);\n\n// > Array [undefined, 6, undefined]\n```\n出现undefined ：只是增加了一个条件，即x的值为3时才乘以2，之所以会出现undefined，是因为map()方法创建了一个新数组，但新数组并不是在遍历完array1后才被赋值的，而是每遍历一次就得到一个值。所以，下面这样修改后就正确了\n```js\nvar array1 = [1, 3,6];\n\nconst map1 = array1.map(x => {\n    if (x == 3) {\n      return x * 2;\n    }\n    return x\n});\n \nconsole.log(map1);\n\n// > Array [2, 6, 12]\n```\n可以使用 map 重新格式化数组中的对象\n```js\nvar oldArray = [{key: 1, value: 10}, \n                {key: 2, value: 20}, \n                {key: 3, value: 30}];\n\nvar nowArr = oldArray.map(function(obj) { \n   var rObj = {};\n   rObj[obj.key] = obj.value;\n   return rObj;\n});\n\n// nowArr 数组为： [{1: 10}, {2: 20}, {3: 30}], \n\n// oldArray 数组未被修改: \n// [{key: 1, value: 10}, \n//  {key: 2, value: 20}, \n//  {key: 3, value: 30}]\n```\n\n# 用ES5模拟实现ES6中的Map类\n\n与Set类一样，我们用Object的实例而不是数组存储元素,我们实现以下方法：\n1.set(key,value):向字典中添加新元素。\n\n2.remove(key):使用键名从字典中移除相应的元素。\n\n3.has(key):如果某个键值存在于字典中，返回true，否则返回false。\n\n4.get(key):通过键名找到指定的值并返回。\n\n5.clear():清空字典。\n\n6.size():返回字典中元素个数。\n\n7.values():将字典所有值以数组形式返回。\n\n8.getItems():返回items变量，代表字典本身。\n\n\n```js\nfunction Map() {\n    var items = {};\n    this.has = function(key){    //has方法判断某个键值是否在字典中\n        return key in items;\n    },\n    this.set = function(key,value){    //set方法为字典添加新元素或更新已有元素\n        items[key] = value;\n    },\n    this.remove = function(key){\n        if (this.has(key)) {\n            delete items[key];\n            return true;\n        }\n        return false;\n    },\n    this.get = function(key){\n        return this.has(key)?items[key]:undefined;\n    },\n    this.values = function(){\n        var values = [];\n         //for...in会遍历出对象原型上的属性，所以要this.hasOwnProperty()方法选出对象自身的属性。\n        for(var k in items){   \n            if (this.hasOwnProperty(k)) {\n                values.push(items[k]);\n            }\n        }\n        return values;\n    },\n    this.clear = function(){\n        items = {};\n    },\n    this.size = function(){\n        return Object.Keys(items).length;\n    },\n    this.getItems = function(){\n        return items;\n    }\n}\n```","source":"_posts/javascript中的Map.md","raw":"---\nlayout: post\ntitle: javascript中的Map\ndate: 2019-08-26 10:53:41\nauthor: 胡豪\ncategories: \n- JavaScript \ntags:\n- js \n---\n\n\n# 探究javascript Map\n什么是Map，此处说的Map，非js中的map( )方法,下文会详细解释。  \nMap 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。  \nECMAScript6原生实现了Map类，即我们所说的字典，字典和集合很像，不过集合是以值值得形式存储元素，字典则是以键值的形式存储元素。字典也叫映射。\n## 语法\n\n```js\nnew Map([iterable])\n```\niterable (可迭代传参)\nIterable 可以是一个数组或者其他 iterable 对象，其元素为键值对(两个元素的数组，例如: [[ 1, 'one' ],[ 2, 'two' ]])。 每个键值对都会添加到新的 Map。null 会被当做 undefined。\n\n## 描述\n\n一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个  for...of 循环在每次迭代后会返回一个形式为[key，value]的数组。\n\n键的比较是基于 \"SameValueZero\" 算法：NaN 是与 NaN 相等的（虽然 NaN !== NaN），剩下所有其它的值是根据 === 运算符的结果判断是否相等。 \n\nObjects 和 Maps 类似的是，它们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（并且也没有其他内建的替代方式了）过去我们一直都把对象当成 Maps 使用。不过 Maps 和 Objects 有一些重要的区别，在下列情况里使用 Map 会是更好的选择：\n\n* 一个Object的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值，包括函数、对象、基本类型。\n* Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。\n* 你可以通过 size 属性直接获取一个 Map 的键值对个数，而 Object 的键值对个数只能手动计算。\n* Map 可直接进行迭代，而 Object 的迭代需要先获取它的键数组，然后再进行迭代。\n* Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然 ES5 开始可以用 map = Object.create(null) 来创建一个没有原型的对象，但是这种用法不太常见。\n* Map 在涉及频繁增删键值对的场景下会有些性能优势。\n\n最大的差别其实就是：object的键的类型是 字符串；map的键的类型是 可以是任意类型;  \nobject获取键值使用Object.keys（返回数组）；Map获取键值使用 map变量.keys() (返回迭代器)。\n\n\n## 属性\n\n* Map.length \n\n* get Map[@@species]\n\n* Map.prototype\n\n## Map 实例\n\n### *属性\nMap.prototype.constructor  \n返回一个函数，它创建了实例的原型。默认是Map函数。\n\nMap.prototype.size  \n返回Map对象的键/值对的数量。\n\n### *方法\n\nMap.prototype.clear()\n移除Map对象的所有键/值对 。\n\nMap.prototype.delete(key)\n如果 Map 对象中存在该元素，则移除它并返回 true；否则如果该元素不存在则返回 false\n\nMap.prototype.entries()\n返回一个新的 Iterator 对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。\n\nMap.prototype.forEach(callbackFn[, thisArg])\n按插入顺序，为 Map对象里的每一键值对调用一次callbackFn函数。如果为forEach提供了thisArg，它将在每次回调中作为this值。\n\nMap.prototype.get(key)\n返回键对应的值，如果不存在，则返回undefined。\n\nMap.prototype.has(key)\n返回一个布尔值，表示Map实例是否包含键对应的值。\n\nMap.prototype.keys()\n返回一个新的 Iterator对象， 它按插入顺序包含了Map对象中每个元素的键 。\n\nMap.prototype.set(key, value)\n设置Map对象中键的值。返回该Map对象。\n\nMap.prototype.values()\n返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的值 。\n\nMap.prototype[@@iterator]()\n返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。\n\n## 实例\n\n### 使用 Map 对象\n```js\nvar myMap = new Map();\n \nvar keyObj = {},\n    keyFunc = function () {},\n    keyString = \"a string\";\n \n// 添加键\nmyMap.set(keyString, \"和键'a string'关联的值\");\nmyMap.set(keyObj, \"和键keyObj关联的值\");\nmyMap.set(keyFunc, \"和键keyFunc关联的值\");\n \nmyMap.size; // 3\n \n// 读取值\nmyMap.get(keyString);    // \"和键'a string'关联的值\"\nmyMap.get(keyObj);       // \"和键keyObj关联的值\"\nmyMap.get(keyFunc);      // \"和键keyFunc关联的值\"\n \nmyMap.get(\"a string\");   // \"和键'a string'关联的值\"\n                         // 因为keyString === 'a string'\nmyMap.get({});           // undefined, 因为keyObj !== {}\nmyMap.get(function() {}) // undefined, 因为keyFunc !== function () {}\n```\n### 使用 for..of 方法迭代 Map\n```js\nvar myMap = new Map();\nmyMap.set(0, \"zero\");\nmyMap.set(1, \"one\");\nfor (var [key, value] of myMap) {\n  console.log(key + \" = \" + value);\n}\n// 将会显示两个log。一个是\"0 = zero\"另一个是\"1 = one\"\n\nfor (var key of myMap.keys()) {\n  console.log(key);\n}\n// 将会显示两个log。 一个是 \"0\" 另一个是 \"1\"\n\nfor (var value of myMap.values()) {\n  console.log(value);\n}\n// 将会显示两个log。 一个是 \"zero\" 另一个是 \"one\"\n\nfor (var [key, value] of myMap.entries()) {\n  console.log(key + \" = \" + value);\n}\n// 将会显示两个log。 一个是 \"0 = zero\" 另一个是 \"1 = one\"\n```\n### 使用 forEach() 方法迭代 Map\n```js\nmyMap.forEach(function(value, key) {\n  console.log(key + \" = \" + value);\n})\n// 将会显示两个logs。 一个是 \"0 = zero\" 另一个是 \"1 = one\"\n```\n### Map 与数组的关系\n```js\nvar kvArray = [[\"key1\", \"value1\"], [\"key2\", \"value2\"]];\n\n// 使用常规的Map构造函数可以将一个二维键值对数组转换成一个Map对象\nvar myMap = new Map(kvArray);\n\nmyMap.get(\"key1\"); // 返回值为 \"value1\"\n\n// 使用Array.from函数可以将一个Map对象转换成一个二维键值对数组\nconsole.log(Array.from(myMap)); // 输出和kvArray相同的数组\n\n// 或者在键或者值的迭代器上使用Array.from，进而得到只含有键或者值的数组\nconsole.log(Array.from(myMap.keys())); // 输出 [\"key1\", \"key2\"]\n```\n### 复制或合并 Maps\n```js\nvar original = new Map([\n  [1, 'one']\n]);\n\nvar clone = new Map(original);\n\nconsole.log(clone.get(1)); // one\nconsole.log(original === clone); // false. Useful for shallow comparison\n```\n请记住，数据本身未被克隆。\n\nMap对象间可以进行合并，但是会保持键的唯一性。\n```js\nvar first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\nvar second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n]);\n\n// 合并两个Map对象时，如果有重复的键值，则后面的会覆盖前面的。\n// 展开运算符本质上是将Map对象转换成数组。\nvar merged = new Map([...first, ...second]);\n\nconsole.log(merged.get(1)); // uno\nconsole.log(merged.get(2)); // dos\nconsole.log(merged.get(3)); // three\n```\nMap对象也能与数组合并：\n```js\nvar first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\nvar second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n]);\n\n// Map对象同数组进行合并时，如果有重复的键值，则后面的会覆盖前面的。\nvar merged = new Map([...first, ...second, [1, 'eins']]);\n\nconsole.log(merged.get(1)); // eins\nconsole.log(merged.get(2)); // dos\nconsole.log(merged.get(3)); // three\n```\n\n\n# 以上讲的是Map，那不得不说map( )是什么\n\nECMAScript5中我们有一个数组方法 map( ),区别于ECMAScript6 中 Map类  \nmap() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。\n\n## 语法\n``` js\nvar new_array = array.map(function callback(currentValue,index,arr), thisValue)\n```\n## 参数\ncallback 生成新数组元素的函数，使用三个参数：  \n* currentValue callback 数组中正在处理的当前元素。  \n* index可选 callback 数组中正在处理的当前元素的索引。  \n* array可选 callback  map 方法被调用的数组。\n\nthisArg可选 执行 callback 函数时使用的this 值。\n\n## 示例\n```js\nvar array1 = [1,3,6];\nconst map1 = array1.map(x => x *2);\nconsole.log(map1);   \n// > Array [2, 6, 12]\n```\n\n```js\nvar array1 = [1, 3,6];\n\nconst map1 = array1.map(x => {\n    if (x == 3) {\n      return x * 2;\n    }\n});\n \nconsole.log(map1);\n\n// > Array [undefined, 6, undefined]\n```\n出现undefined ：只是增加了一个条件，即x的值为3时才乘以2，之所以会出现undefined，是因为map()方法创建了一个新数组，但新数组并不是在遍历完array1后才被赋值的，而是每遍历一次就得到一个值。所以，下面这样修改后就正确了\n```js\nvar array1 = [1, 3,6];\n\nconst map1 = array1.map(x => {\n    if (x == 3) {\n      return x * 2;\n    }\n    return x\n});\n \nconsole.log(map1);\n\n// > Array [2, 6, 12]\n```\n可以使用 map 重新格式化数组中的对象\n```js\nvar oldArray = [{key: 1, value: 10}, \n                {key: 2, value: 20}, \n                {key: 3, value: 30}];\n\nvar nowArr = oldArray.map(function(obj) { \n   var rObj = {};\n   rObj[obj.key] = obj.value;\n   return rObj;\n});\n\n// nowArr 数组为： [{1: 10}, {2: 20}, {3: 30}], \n\n// oldArray 数组未被修改: \n// [{key: 1, value: 10}, \n//  {key: 2, value: 20}, \n//  {key: 3, value: 30}]\n```\n\n# 用ES5模拟实现ES6中的Map类\n\n与Set类一样，我们用Object的实例而不是数组存储元素,我们实现以下方法：\n1.set(key,value):向字典中添加新元素。\n\n2.remove(key):使用键名从字典中移除相应的元素。\n\n3.has(key):如果某个键值存在于字典中，返回true，否则返回false。\n\n4.get(key):通过键名找到指定的值并返回。\n\n5.clear():清空字典。\n\n6.size():返回字典中元素个数。\n\n7.values():将字典所有值以数组形式返回。\n\n8.getItems():返回items变量，代表字典本身。\n\n\n```js\nfunction Map() {\n    var items = {};\n    this.has = function(key){    //has方法判断某个键值是否在字典中\n        return key in items;\n    },\n    this.set = function(key,value){    //set方法为字典添加新元素或更新已有元素\n        items[key] = value;\n    },\n    this.remove = function(key){\n        if (this.has(key)) {\n            delete items[key];\n            return true;\n        }\n        return false;\n    },\n    this.get = function(key){\n        return this.has(key)?items[key]:undefined;\n    },\n    this.values = function(){\n        var values = [];\n         //for...in会遍历出对象原型上的属性，所以要this.hasOwnProperty()方法选出对象自身的属性。\n        for(var k in items){   \n            if (this.hasOwnProperty(k)) {\n                values.push(items[k]);\n            }\n        }\n        return values;\n    },\n    this.clear = function(){\n        items = {};\n    },\n    this.size = function(){\n        return Object.Keys(items).length;\n    },\n    this.getItems = function(){\n        return items;\n    }\n}\n```","slug":"javascript中的Map","published":1,"updated":"2019-09-18T09:21:45.122Z","comments":1,"photos":[],"link":"","_id":"ckmu8hypu000ry4tz1w9x92js","content":"<h1 id=\"探究javascript-Map\"><a href=\"#探究javascript-Map\" class=\"headerlink\" title=\"探究javascript Map\"></a>探究javascript Map</h1><p>什么是Map，此处说的Map，非js中的map( )方法,下文会详细解释。<br>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。<br>ECMAScript6原生实现了Map类，即我们所说的字典，字典和集合很像，不过集合是以值值得形式存储元素，字典则是以键值的形式存储元素。字典也叫映射。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([iterable])</span><br></pre></td></tr></table></figure>\n<p>iterable (可迭代传参)<br>Iterable 可以是一个数组或者其他 iterable 对象，其元素为键值对(两个元素的数组，例如: [[ 1, ‘one’ ],[ 2, ‘two’ ]])。 每个键值对都会添加到新的 Map。null 会被当做 undefined。</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个  for…of 循环在每次迭代后会返回一个形式为[key，value]的数组。</p>\n<p>键的比较是基于 “SameValueZero” 算法：NaN 是与 NaN 相等的（虽然 NaN !== NaN），剩下所有其它的值是根据 === 运算符的结果判断是否相等。 </p>\n<p>Objects 和 Maps 类似的是，它们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（并且也没有其他内建的替代方式了）过去我们一直都把对象当成 Maps 使用。不过 Maps 和 Objects 有一些重要的区别，在下列情况里使用 Map 会是更好的选择：</p>\n<ul>\n<li>一个Object的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值，包括函数、对象、基本类型。</li>\n<li>Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。</li>\n<li>你可以通过 size 属性直接获取一个 Map 的键值对个数，而 Object 的键值对个数只能手动计算。</li>\n<li>Map 可直接进行迭代，而 Object 的迭代需要先获取它的键数组，然后再进行迭代。</li>\n<li>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然 ES5 开始可以用 map = Object.create(null) 来创建一个没有原型的对象，但是这种用法不太常见。</li>\n<li>Map 在涉及频繁增删键值对的场景下会有些性能优势。</li>\n</ul>\n<p>最大的差别其实就是：object的键的类型是 字符串；map的键的类型是 可以是任意类型;<br>object获取键值使用Object.keys（返回数组）；Map获取键值使用 map变量.keys() (返回迭代器)。</p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ul>\n<li><p>Map.length </p>\n</li>\n<li><p>get Map[@@species]</p>\n</li>\n<li><p>Map.prototype</p>\n</li>\n</ul>\n<h2 id=\"Map-实例\"><a href=\"#Map-实例\" class=\"headerlink\" title=\"Map 实例\"></a>Map 实例</h2><h3 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"*属性\"></a>*属性</h3><p>Map.prototype.constructor<br>返回一个函数，它创建了实例的原型。默认是Map函数。</p>\n<p>Map.prototype.size<br>返回Map对象的键/值对的数量。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"*方法\"></a>*方法</h3><p>Map.prototype.clear()<br>移除Map对象的所有键/值对 。</p>\n<p>Map.prototype.delete(key)<br>如果 Map 对象中存在该元素，则移除它并返回 true；否则如果该元素不存在则返回 false</p>\n<p>Map.prototype.entries()<br>返回一个新的 Iterator 对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。</p>\n<p>Map.prototype.forEach(callbackFn[, thisArg])<br>按插入顺序，为 Map对象里的每一键值对调用一次callbackFn函数。如果为forEach提供了thisArg，它将在每次回调中作为this值。</p>\n<p>Map.prototype.get(key)<br>返回键对应的值，如果不存在，则返回undefined。</p>\n<p>Map.prototype.has(key)<br>返回一个布尔值，表示Map实例是否包含键对应的值。</p>\n<p>Map.prototype.keys()<br>返回一个新的 Iterator对象， 它按插入顺序包含了Map对象中每个元素的键 。</p>\n<p>Map.prototype.set(key, value)<br>设置Map对象中键的值。返回该Map对象。</p>\n<p>Map.prototype.values()<br>返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的值 。</p>\n<p>Map.prototype<a href>@@iterator</a><br>返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"使用-Map-对象\"><a href=\"#使用-Map-对象\" class=\"headerlink\" title=\"使用 Map 对象\"></a>使用 Map 对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> keyObj = &#123;&#125;,</span><br><span class=\"line\">    keyFunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">    keyString = <span class=\"string\">\"a string\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 添加键</span></span><br><span class=\"line\">myMap.set(keyString, <span class=\"string\">\"和键'a string'关联的值\"</span>);</span><br><span class=\"line\">myMap.set(keyObj, <span class=\"string\">\"和键keyObj关联的值\"</span>);</span><br><span class=\"line\">myMap.set(keyFunc, <span class=\"string\">\"和键keyFunc关联的值\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">myMap.size; <span class=\"comment\">// 3</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 读取值</span></span><br><span class=\"line\">myMap.get(keyString);    <span class=\"comment\">// \"和键'a string'关联的值\"</span></span><br><span class=\"line\">myMap.get(keyObj);       <span class=\"comment\">// \"和键keyObj关联的值\"</span></span><br><span class=\"line\">myMap.get(keyFunc);      <span class=\"comment\">// \"和键keyFunc关联的值\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">myMap.get(<span class=\"string\">\"a string\"</span>);   <span class=\"comment\">// \"和键'a string'关联的值\"</span></span><br><span class=\"line\">                         <span class=\"comment\">// 因为keyString === 'a string'</span></span><br><span class=\"line\">myMap.get(&#123;&#125;);           <span class=\"comment\">// undefined, 因为keyObj !== &#123;&#125;</span></span><br><span class=\"line\">myMap.get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;) <span class=\"comment\">// undefined, 因为keyFunc !== function () &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-for-of-方法迭代-Map\"><a href=\"#使用-for-of-方法迭代-Map\" class=\"headerlink\" title=\"使用 for..of 方法迭代 Map\"></a>使用 for..of 方法迭代 Map</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">myMap.set(<span class=\"number\">0</span>, <span class=\"string\">\"zero\"</span>);</span><br><span class=\"line\">myMap.set(<span class=\"number\">1</span>, <span class=\"string\">\"one\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> [key, value] <span class=\"keyword\">of</span> myMap) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" = \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个log。一个是\"0 = zero\"另一个是\"1 = one\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">of</span> myMap.keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个log。 一个是 \"0\" 另一个是 \"1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> value <span class=\"keyword\">of</span> myMap.values()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个log。 一个是 \"zero\" 另一个是 \"one\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> [key, value] <span class=\"keyword\">of</span> myMap.entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" = \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个log。 一个是 \"0 = zero\" 另一个是 \"1 = one\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-forEach-方法迭代-Map\"><a href=\"#使用-forEach-方法迭代-Map\" class=\"headerlink\" title=\"使用 forEach() 方法迭代 Map\"></a>使用 forEach() 方法迭代 Map</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myMap.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" = \"</span> + value);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个logs。 一个是 \"0 = zero\" 另一个是 \"1 = one\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Map-与数组的关系\"><a href=\"#Map-与数组的关系\" class=\"headerlink\" title=\"Map 与数组的关系\"></a>Map 与数组的关系</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> kvArray = [[<span class=\"string\">\"key1\"</span>, <span class=\"string\">\"value1\"</span>], [<span class=\"string\">\"key2\"</span>, <span class=\"string\">\"value2\"</span>]];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用常规的Map构造函数可以将一个二维键值对数组转换成一个Map对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(kvArray);</span><br><span class=\"line\"></span><br><span class=\"line\">myMap.get(<span class=\"string\">\"key1\"</span>); <span class=\"comment\">// 返回值为 \"value1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Array.from函数可以将一个Map对象转换成一个二维键值对数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(myMap)); <span class=\"comment\">// 输出和kvArray相同的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者在键或者值的迭代器上使用Array.from，进而得到只含有键或者值的数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(myMap.keys())); <span class=\"comment\">// 输出 [\"key1\", \"key2\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"复制或合并-Maps\"><a href=\"#复制或合并-Maps\" class=\"headerlink\" title=\"复制或合并 Maps\"></a>复制或合并 Maps</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> original = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> clone = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(original);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clone.get(<span class=\"number\">1</span>)); <span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(original === clone); <span class=\"comment\">// false. Useful for shallow comparison</span></span><br></pre></td></tr></table></figure>\n<p>请记住，数据本身未被克隆。</p>\n<p>Map对象间可以进行合并，但是会保持键的唯一性。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> first = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"string\">'three'</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> second = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'uno'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'dos'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并两个Map对象时，如果有重复的键值，则后面的会覆盖前面的。</span></span><br><span class=\"line\"><span class=\"comment\">// 展开运算符本质上是将Map对象转换成数组。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merged = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([...first, ...second]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">1</span>)); <span class=\"comment\">// uno</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">2</span>)); <span class=\"comment\">// dos</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">3</span>)); <span class=\"comment\">// three</span></span><br></pre></td></tr></table></figure></p>\n<p>Map对象也能与数组合并：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> first = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"string\">'three'</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> second = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'uno'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'dos'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Map对象同数组进行合并时，如果有重复的键值，则后面的会覆盖前面的。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merged = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([...first, ...second, [<span class=\"number\">1</span>, <span class=\"string\">'eins'</span>]]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">1</span>)); <span class=\"comment\">// eins</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">2</span>)); <span class=\"comment\">// dos</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">3</span>)); <span class=\"comment\">// three</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"以上讲的是Map，那不得不说map-是什么\"><a href=\"#以上讲的是Map，那不得不说map-是什么\" class=\"headerlink\" title=\"以上讲的是Map，那不得不说map( )是什么\"></a>以上讲的是Map，那不得不说map( )是什么</h1><p>ECMAScript5中我们有一个数组方法 map( ),区别于ECMAScript6 中 Map类<br>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p>\n<h2 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = array.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue,index,arr</span>), <span class=\"title\">thisValue</span>)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p>callback 生成新数组元素的函数，使用三个参数：  </p>\n<ul>\n<li>currentValue callback 数组中正在处理的当前元素。  </li>\n<li>index可选 callback 数组中正在处理的当前元素的索引。  </li>\n<li>array可选 callback  map 方法被调用的数组。</li>\n</ul>\n<p>thisArg可选 执行 callback 函数时使用的this 值。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> map1 = array1.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x *<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map1);   </span><br><span class=\"line\"><span class=\"comment\">// &gt; Array [2, 6, 12]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> map1 = array1.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt; Array [undefined, 6, undefined]</span></span><br></pre></td></tr></table></figure>\n<p>出现undefined ：只是增加了一个条件，即x的值为3时才乘以2，之所以会出现undefined，是因为map()方法创建了一个新数组，但新数组并不是在遍历完array1后才被赋值的，而是每遍历一次就得到一个值。所以，下面这样修改后就正确了<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> map1 = array1.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt; Array [2, 6, 12]</span></span><br></pre></td></tr></table></figure></p>\n<p>可以使用 map 重新格式化数组中的对象<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oldArray = [&#123;<span class=\"attr\">key</span>: <span class=\"number\">1</span>, <span class=\"attr\">value</span>: <span class=\"number\">10</span>&#125;, </span><br><span class=\"line\">                &#123;<span class=\"attr\">key</span>: <span class=\"number\">2</span>, <span class=\"attr\">value</span>: <span class=\"number\">20</span>&#125;, </span><br><span class=\"line\">                &#123;<span class=\"attr\">key</span>: <span class=\"number\">3</span>, <span class=\"attr\">value</span>: <span class=\"number\">30</span>&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nowArr = oldArray.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">var</span> rObj = &#123;&#125;;</span><br><span class=\"line\">   rObj[obj.key] = obj.value;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> rObj;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// nowArr 数组为： [&#123;1: 10&#125;, &#123;2: 20&#125;, &#123;3: 30&#125;], </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// oldArray 数组未被修改: </span></span><br><span class=\"line\"><span class=\"comment\">// [&#123;key: 1, value: 10&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//  &#123;key: 2, value: 20&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//  &#123;key: 3, value: 30&#125;]</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"用ES5模拟实现ES6中的Map类\"><a href=\"#用ES5模拟实现ES6中的Map类\" class=\"headerlink\" title=\"用ES5模拟实现ES6中的Map类\"></a>用ES5模拟实现ES6中的Map类</h1><p>与Set类一样，我们用Object的实例而不是数组存储元素,我们实现以下方法：<br>1.set(key,value):向字典中添加新元素。</p>\n<p>2.remove(key):使用键名从字典中移除相应的元素。</p>\n<p>3.has(key):如果某个键值存在于字典中，返回true，否则返回false。</p>\n<p>4.get(key):通过键名找到指定的值并返回。</p>\n<p>5.clear():清空字典。</p>\n<p>6.size():返回字典中元素个数。</p>\n<p>7.values():将字典所有值以数组形式返回。</p>\n<p>8.getItems():返回items变量，代表字典本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Map</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> items = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.has = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;    <span class=\"comment\">//has方法判断某个键值是否在字典中</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> items;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.set = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,value</span>)</span>&#123;    <span class=\"comment\">//set方法为字典添加新元素或更新已有元素</span></span><br><span class=\"line\">        items[key] = value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.has(key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> items[key];</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.has(key)?items[key]:<span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.values = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> values = [];</span><br><span class=\"line\">         <span class=\"comment\">//for...in会遍历出对象原型上的属性，所以要this.hasOwnProperty()方法选出对象自身的属性。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> items)&#123;   </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">                values.push(items[k]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> values;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        items = &#123;&#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.size = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.Keys(items).length;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getItems = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"探究javascript-Map\"><a href=\"#探究javascript-Map\" class=\"headerlink\" title=\"探究javascript Map\"></a>探究javascript Map</h1><p>什么是Map，此处说的Map，非js中的map( )方法,下文会详细解释。<br>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。<br>ECMAScript6原生实现了Map类，即我们所说的字典，字典和集合很像，不过集合是以值值得形式存储元素，字典则是以键值的形式存储元素。字典也叫映射。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([iterable])</span><br></pre></td></tr></table></figure>\n<p>iterable (可迭代传参)<br>Iterable 可以是一个数组或者其他 iterable 对象，其元素为键值对(两个元素的数组，例如: [[ 1, ‘one’ ],[ 2, ‘two’ ]])。 每个键值对都会添加到新的 Map。null 会被当做 undefined。</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个  for…of 循环在每次迭代后会返回一个形式为[key，value]的数组。</p>\n<p>键的比较是基于 “SameValueZero” 算法：NaN 是与 NaN 相等的（虽然 NaN !== NaN），剩下所有其它的值是根据 === 运算符的结果判断是否相等。 </p>\n<p>Objects 和 Maps 类似的是，它们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（并且也没有其他内建的替代方式了）过去我们一直都把对象当成 Maps 使用。不过 Maps 和 Objects 有一些重要的区别，在下列情况里使用 Map 会是更好的选择：</p>\n<ul>\n<li>一个Object的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值，包括函数、对象、基本类型。</li>\n<li>Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。</li>\n<li>你可以通过 size 属性直接获取一个 Map 的键值对个数，而 Object 的键值对个数只能手动计算。</li>\n<li>Map 可直接进行迭代，而 Object 的迭代需要先获取它的键数组，然后再进行迭代。</li>\n<li>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然 ES5 开始可以用 map = Object.create(null) 来创建一个没有原型的对象，但是这种用法不太常见。</li>\n<li>Map 在涉及频繁增删键值对的场景下会有些性能优势。</li>\n</ul>\n<p>最大的差别其实就是：object的键的类型是 字符串；map的键的类型是 可以是任意类型;<br>object获取键值使用Object.keys（返回数组）；Map获取键值使用 map变量.keys() (返回迭代器)。</p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ul>\n<li><p>Map.length </p>\n</li>\n<li><p>get Map[@@species]</p>\n</li>\n<li><p>Map.prototype</p>\n</li>\n</ul>\n<h2 id=\"Map-实例\"><a href=\"#Map-实例\" class=\"headerlink\" title=\"Map 实例\"></a>Map 实例</h2><h3 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"*属性\"></a>*属性</h3><p>Map.prototype.constructor<br>返回一个函数，它创建了实例的原型。默认是Map函数。</p>\n<p>Map.prototype.size<br>返回Map对象的键/值对的数量。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"*方法\"></a>*方法</h3><p>Map.prototype.clear()<br>移除Map对象的所有键/值对 。</p>\n<p>Map.prototype.delete(key)<br>如果 Map 对象中存在该元素，则移除它并返回 true；否则如果该元素不存在则返回 false</p>\n<p>Map.prototype.entries()<br>返回一个新的 Iterator 对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。</p>\n<p>Map.prototype.forEach(callbackFn[, thisArg])<br>按插入顺序，为 Map对象里的每一键值对调用一次callbackFn函数。如果为forEach提供了thisArg，它将在每次回调中作为this值。</p>\n<p>Map.prototype.get(key)<br>返回键对应的值，如果不存在，则返回undefined。</p>\n<p>Map.prototype.has(key)<br>返回一个布尔值，表示Map实例是否包含键对应的值。</p>\n<p>Map.prototype.keys()<br>返回一个新的 Iterator对象， 它按插入顺序包含了Map对象中每个元素的键 。</p>\n<p>Map.prototype.set(key, value)<br>设置Map对象中键的值。返回该Map对象。</p>\n<p>Map.prototype.values()<br>返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的值 。</p>\n<p>Map.prototype<a href>@@iterator</a><br>返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"使用-Map-对象\"><a href=\"#使用-Map-对象\" class=\"headerlink\" title=\"使用 Map 对象\"></a>使用 Map 对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> keyObj = &#123;&#125;,</span><br><span class=\"line\">    keyFunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">    keyString = <span class=\"string\">\"a string\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 添加键</span></span><br><span class=\"line\">myMap.set(keyString, <span class=\"string\">\"和键'a string'关联的值\"</span>);</span><br><span class=\"line\">myMap.set(keyObj, <span class=\"string\">\"和键keyObj关联的值\"</span>);</span><br><span class=\"line\">myMap.set(keyFunc, <span class=\"string\">\"和键keyFunc关联的值\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">myMap.size; <span class=\"comment\">// 3</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 读取值</span></span><br><span class=\"line\">myMap.get(keyString);    <span class=\"comment\">// \"和键'a string'关联的值\"</span></span><br><span class=\"line\">myMap.get(keyObj);       <span class=\"comment\">// \"和键keyObj关联的值\"</span></span><br><span class=\"line\">myMap.get(keyFunc);      <span class=\"comment\">// \"和键keyFunc关联的值\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">myMap.get(<span class=\"string\">\"a string\"</span>);   <span class=\"comment\">// \"和键'a string'关联的值\"</span></span><br><span class=\"line\">                         <span class=\"comment\">// 因为keyString === 'a string'</span></span><br><span class=\"line\">myMap.get(&#123;&#125;);           <span class=\"comment\">// undefined, 因为keyObj !== &#123;&#125;</span></span><br><span class=\"line\">myMap.get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;) <span class=\"comment\">// undefined, 因为keyFunc !== function () &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-for-of-方法迭代-Map\"><a href=\"#使用-for-of-方法迭代-Map\" class=\"headerlink\" title=\"使用 for..of 方法迭代 Map\"></a>使用 for..of 方法迭代 Map</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">myMap.set(<span class=\"number\">0</span>, <span class=\"string\">\"zero\"</span>);</span><br><span class=\"line\">myMap.set(<span class=\"number\">1</span>, <span class=\"string\">\"one\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> [key, value] <span class=\"keyword\">of</span> myMap) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" = \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个log。一个是\"0 = zero\"另一个是\"1 = one\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">of</span> myMap.keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个log。 一个是 \"0\" 另一个是 \"1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> value <span class=\"keyword\">of</span> myMap.values()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个log。 一个是 \"zero\" 另一个是 \"one\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> [key, value] <span class=\"keyword\">of</span> myMap.entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" = \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个log。 一个是 \"0 = zero\" 另一个是 \"1 = one\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-forEach-方法迭代-Map\"><a href=\"#使用-forEach-方法迭代-Map\" class=\"headerlink\" title=\"使用 forEach() 方法迭代 Map\"></a>使用 forEach() 方法迭代 Map</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myMap.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" = \"</span> + value);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个logs。 一个是 \"0 = zero\" 另一个是 \"1 = one\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Map-与数组的关系\"><a href=\"#Map-与数组的关系\" class=\"headerlink\" title=\"Map 与数组的关系\"></a>Map 与数组的关系</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> kvArray = [[<span class=\"string\">\"key1\"</span>, <span class=\"string\">\"value1\"</span>], [<span class=\"string\">\"key2\"</span>, <span class=\"string\">\"value2\"</span>]];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用常规的Map构造函数可以将一个二维键值对数组转换成一个Map对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(kvArray);</span><br><span class=\"line\"></span><br><span class=\"line\">myMap.get(<span class=\"string\">\"key1\"</span>); <span class=\"comment\">// 返回值为 \"value1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Array.from函数可以将一个Map对象转换成一个二维键值对数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(myMap)); <span class=\"comment\">// 输出和kvArray相同的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者在键或者值的迭代器上使用Array.from，进而得到只含有键或者值的数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(myMap.keys())); <span class=\"comment\">// 输出 [\"key1\", \"key2\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"复制或合并-Maps\"><a href=\"#复制或合并-Maps\" class=\"headerlink\" title=\"复制或合并 Maps\"></a>复制或合并 Maps</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> original = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> clone = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(original);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clone.get(<span class=\"number\">1</span>)); <span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(original === clone); <span class=\"comment\">// false. Useful for shallow comparison</span></span><br></pre></td></tr></table></figure>\n<p>请记住，数据本身未被克隆。</p>\n<p>Map对象间可以进行合并，但是会保持键的唯一性。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> first = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"string\">'three'</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> second = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'uno'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'dos'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并两个Map对象时，如果有重复的键值，则后面的会覆盖前面的。</span></span><br><span class=\"line\"><span class=\"comment\">// 展开运算符本质上是将Map对象转换成数组。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merged = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([...first, ...second]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">1</span>)); <span class=\"comment\">// uno</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">2</span>)); <span class=\"comment\">// dos</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">3</span>)); <span class=\"comment\">// three</span></span><br></pre></td></tr></table></figure></p>\n<p>Map对象也能与数组合并：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> first = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"string\">'three'</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> second = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'uno'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'dos'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Map对象同数组进行合并时，如果有重复的键值，则后面的会覆盖前面的。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merged = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([...first, ...second, [<span class=\"number\">1</span>, <span class=\"string\">'eins'</span>]]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">1</span>)); <span class=\"comment\">// eins</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">2</span>)); <span class=\"comment\">// dos</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">3</span>)); <span class=\"comment\">// three</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"以上讲的是Map，那不得不说map-是什么\"><a href=\"#以上讲的是Map，那不得不说map-是什么\" class=\"headerlink\" title=\"以上讲的是Map，那不得不说map( )是什么\"></a>以上讲的是Map，那不得不说map( )是什么</h1><p>ECMAScript5中我们有一个数组方法 map( ),区别于ECMAScript6 中 Map类<br>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p>\n<h2 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = array.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue,index,arr</span>), <span class=\"title\">thisValue</span>)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p>callback 生成新数组元素的函数，使用三个参数：  </p>\n<ul>\n<li>currentValue callback 数组中正在处理的当前元素。  </li>\n<li>index可选 callback 数组中正在处理的当前元素的索引。  </li>\n<li>array可选 callback  map 方法被调用的数组。</li>\n</ul>\n<p>thisArg可选 执行 callback 函数时使用的this 值。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> map1 = array1.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x *<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map1);   </span><br><span class=\"line\"><span class=\"comment\">// &gt; Array [2, 6, 12]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> map1 = array1.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt; Array [undefined, 6, undefined]</span></span><br></pre></td></tr></table></figure>\n<p>出现undefined ：只是增加了一个条件，即x的值为3时才乘以2，之所以会出现undefined，是因为map()方法创建了一个新数组，但新数组并不是在遍历完array1后才被赋值的，而是每遍历一次就得到一个值。所以，下面这样修改后就正确了<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> map1 = array1.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt; Array [2, 6, 12]</span></span><br></pre></td></tr></table></figure></p>\n<p>可以使用 map 重新格式化数组中的对象<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oldArray = [&#123;<span class=\"attr\">key</span>: <span class=\"number\">1</span>, <span class=\"attr\">value</span>: <span class=\"number\">10</span>&#125;, </span><br><span class=\"line\">                &#123;<span class=\"attr\">key</span>: <span class=\"number\">2</span>, <span class=\"attr\">value</span>: <span class=\"number\">20</span>&#125;, </span><br><span class=\"line\">                &#123;<span class=\"attr\">key</span>: <span class=\"number\">3</span>, <span class=\"attr\">value</span>: <span class=\"number\">30</span>&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nowArr = oldArray.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">var</span> rObj = &#123;&#125;;</span><br><span class=\"line\">   rObj[obj.key] = obj.value;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> rObj;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// nowArr 数组为： [&#123;1: 10&#125;, &#123;2: 20&#125;, &#123;3: 30&#125;], </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// oldArray 数组未被修改: </span></span><br><span class=\"line\"><span class=\"comment\">// [&#123;key: 1, value: 10&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//  &#123;key: 2, value: 20&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//  &#123;key: 3, value: 30&#125;]</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"用ES5模拟实现ES6中的Map类\"><a href=\"#用ES5模拟实现ES6中的Map类\" class=\"headerlink\" title=\"用ES5模拟实现ES6中的Map类\"></a>用ES5模拟实现ES6中的Map类</h1><p>与Set类一样，我们用Object的实例而不是数组存储元素,我们实现以下方法：<br>1.set(key,value):向字典中添加新元素。</p>\n<p>2.remove(key):使用键名从字典中移除相应的元素。</p>\n<p>3.has(key):如果某个键值存在于字典中，返回true，否则返回false。</p>\n<p>4.get(key):通过键名找到指定的值并返回。</p>\n<p>5.clear():清空字典。</p>\n<p>6.size():返回字典中元素个数。</p>\n<p>7.values():将字典所有值以数组形式返回。</p>\n<p>8.getItems():返回items变量，代表字典本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Map</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> items = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.has = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;    <span class=\"comment\">//has方法判断某个键值是否在字典中</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> items;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.set = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,value</span>)</span>&#123;    <span class=\"comment\">//set方法为字典添加新元素或更新已有元素</span></span><br><span class=\"line\">        items[key] = value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.has(key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> items[key];</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.has(key)?items[key]:<span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.values = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> values = [];</span><br><span class=\"line\">         <span class=\"comment\">//for...in会遍历出对象原型上的属性，所以要this.hasOwnProperty()方法选出对象自身的属性。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> items)&#123;   </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">                values.push(items[k]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> values;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        items = &#123;&#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.size = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.Keys(items).length;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getItems = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"javascript垃圾回收机制","date":"2019-07-01T02:53:41.000Z","_content":"\n## 前言\n\n其实大多数的时候作为javascript开发者不需要太关心内存的使用和释放,因为所有的javascript环境都实现了各自的垃圾回收机制(garbage collector(GC)),但是随着现在的SPA越来越多也越来越大,越来越追求极致的性能渐渐也要求开发者能够适当的了解一些垃圾回收机制内部的实现原理,在性能优化和追踪内存泄漏的时候都能够起到一点帮助。看一段内存泄漏的代码\n``` javacript\n\nvar theThing = null;\nvar replaceThing = function () {\n  var originalThing = theThing;\n  var c = 'a'\n  function unused() {\n    if (originalThing) {\n      console.log(\"hi\");\n    }\n  };\n\n  theThing = {\n    longStr: new Array(1000000).join('*'),\n    someMethod: function () {\n      console.log('1111');\n    }\n  };\n};\n\nsetInterval(replaceThing,1000)\n\n```\n最早想要去深入了解javacript GC是看到这道找内存泄漏的题目(具体怎么内存泄漏,我们后面在分析).任何一种GC管理都需要做这几步:\n1. 识别哪些对象需要被回收。\n2. 回收/重复使用需要被回收对象的内存。\n3. 压缩/整理内存(有些可能没有)\n\n而常见的识别对象是否需要回收的机制有下面几种:\n* 引用计数 (Python)\n* 逃逸分析 (Java)\n* Tracing/Reachable 追踪分析 (javascript)\n\n今天就主要看一下V8中GC的具体实现方式\n\n## Tracing/Reachable 追踪分析\nGC的第一步就是要找出哪些对象需要被回收,哪些不需要。在追踪分析(Tracing/Reachable)中,认为可以被追踪到(reachability)的对象认为是不能被回收的对象,剩下的不能被追踪到的对象就是要回收的对象。\n在V8中,追踪分析会从根对象开始(GC Root)根据指针将所有被能被追踪到的对象标记为reachable,javascript中根对象包括调用堆栈和global对象。\n\n\n## The Generational Hypothesis\nGenerational Hypothesis的意思是大部分的对象在早期就需要被回收。基于这样的一个假设,有很多的编程语言的垃圾回收机制在设计的时候都是将内存分代,年轻代(young generation),和老代(old generation)。\n这里的代其实就是开辟两块space分别存储刚被分配的对象和经过两次GC还是没有被回收的对象。在V8中有两个垃圾回收器分别对年轻代和老代进行垃圾回收,Scavenger针对年轻代进行垃圾回收,Major GC针对老代进行垃圾回收,他们的算法也是不同的。\n\n### Scavenger\nV8在年轻代的内存space使用的是semi-space算法,也就是说将内存分为两半,同时只有一块的内存能被使用,另外一半是完全空的(或者说这一半内存都是可以被分配的)。在程序开始执行的时候,将所有的变量都分配可以被使用的一半内存中(叫做from-space)。当第一次GC开始的时候根据追踪分析结果,将所有可以reachable的对象(不能被释放的对象),全部转移到剩余一半可以被分配的内存中(to-space)，这样from-space中的内存又全部可以被分配了，这个时候如果又有新申明的对象需要分配内存,就会分配到这一块内存当中了,最后在转移完不能被释放的对象之后,还需要更新引用指针,指向在to-space中最新的地址。\n\n![第一次GC](http://img.pandihai.com/03.svg)\n\n\n第二次GC开始的时候,在原本的to-space中仍然不能被释放的对象首先转移到老代(old generation)的space中,这时候to-space中又全部可以被分配,重复之前的操作。从from-space中将不能被释放的对象转移过来。完成2次GC之后,存货了两次的对象现在就在老代里面了,而存活一次GC的对象现在就在to-space中了,这个to-space也被叫做intermediate generation(中生代).在Scavenger中回收内存有三个过程:标记(追踪分析),转移(from-space to to-space),更新指针地址。\n\n![第二次GC](http://img.pandihai.com/04.svg)<center><font color=gray size=2>第二次GC</font></center>\n\n\n在这种内存回收的机制中,其中一个问题就是转移对象的时候是会消耗一定性能的,但是根据Generational Hypothesis的假设大部分的对象在早期就会被回收了,这也就意味着只有少部分不能被回收的对象需要被移动，这也意味着如果这个假设不成立，比如我们的代码中有很多的闭包导致很多的作用域不能被释放,那么将会有大量的对象需要在space之间转移,是比较浪费性能的。但是相反的,基于大部分对象都可以在早期被回收的假设,如果大部分的对象在早期就可以被释放,这种机制的内存回收对这需要在早期就回收的对象其实是什么都不需要做的,只需要把不能释放的少部分对象进行转移（from-space to to-space）,然后在下次分配内存的时候把这部分需要释放的对象所占的内存直接覆盖就可以了(rewrite dead object)。\n\n#### Parallel\nParallel是V8中调度线程进行内存回收的一种算法,指的是主线程和帮助线程同时进行相同工作量的内存回收,这种算法还是会停止主线程正在进行的全部工作,但是工作量被平摊到几个线程之后,理论上时间也被参与线程的数量整除了(加上一些同步调度的开销)。Scavenger就是使用的这种线程调度机制,当需要进行内存回收的时候,所有的线程获得一定数量的存活的对象引用指针,开始同时将这些存活对象搬运到to-space中。不同的线程可能通过不同引用路径访问到同一个对象,当线程将存活对象转移到to-space之后,更新完指针地址后,会在from-space的老对象中留下一个forwarding指针,这样其他线程找到这个对象之后就可以通过这个指针来找到新的地址更新引用地址了。\n\n![Scavenger平行调度](http://img.pandihai.com/05.svg)<center><font color=gray size=2>Scavenger平行调度,同时有多个帮助线程和主线程参与</font></center>\n\n### Major GC\nMajor GC主要负责老代的内存回收,同样也是三个过程:标记(追踪分析),清除,整理压缩内存。标记这一步和Scavenger一样通过追踪分析确定哪些内存需要被回收,然后在对象被回收以后将被回收的内存加入到free-list这个数据结构中,free-list就像是一个个抽屉,每个抽屉的大小代表了从这个地址开始可以被连续分配的内存的大小,当我们需要在老代中重新分配内存的时候就可以快速的根据需要分配内存的大小找到一个合适的抽屉把内存进行分配。最后就是进行内存整理,这个就好像是Windows系统整理磁盘一样,将还没被幸存的对象利用free-list查找拷贝到其他的已经被整理完的page中,这样使小块的内存碎片也被整理完之后加以利用。跟Scavenger中一样来回拷贝对象也会有性能的消耗,在V8中只会对高度碎片化的page进行整理,对其他的page进行清除,这样在转移的时候也是一样的只需要转移存活的对象就可以了。\n\n#### Concurrent\nConcurrent同样也是V8中进行内存回收的线程调度算法,当主线程执行Javascript的时候,帮助线程同步进行内存回收的一些工作。相比Parallel来说这个算法要复杂的多,可能前一毫秒帮助线程在进行GC操作,后一毫秒主线程就改变了这个对象。也有可能帮助线程和主线程同时读取修改同一个对象。但是这种算法的优势就是当帮助线程进行GC工作的时候,主线程可以继续执行JavaScript,完全不会受到影响。Major GC就是采用的这个算法,当老代的内存到达一定系统自动计算的阀值,就开始进行Major GC,首先每个帮助线程都会获得一定数量的对象指针,开始针对这些对象进行标记,然后根据对象的引用指针对reachable对象都进行标记,在进行这些标记的同时,主线程仍然在执行JavaScript没有受到影响。当帮助线程完成标记,或者老代触及了设定的阀值,主线程也开始参与GC,他首先进行一步快速的标记确认,确保帮助线程在标记的同时主线程修改的对象标记正确(在帮助线程进行标记的时候,如果主线程执行的JavaScript修改了对象会有Write barriers,类似于有个标记)。当主线程确认所有存活的对象都被标记以后,主线程会和几个子线程一起,对一些内存page进行压缩和更新指针的工作,不是所有的page都需要进行压缩(只对高碎片化的进行压缩),不需要压缩的利用free-list进行打扫。\n\n![Major GC同步调度](http://img.pandihai.com/09.svg)<center><font color=gray size=2>Major GC同步调度</font></center>\n\n\n### 什么时候会执行GC\n在JavaScript中我们没办法用编程的方式主动触发GC,因为涉及到复杂的线程调度,主动的触发GC可能会影响正在执行的GC或者下次的GC。对于Scavenger来说,当在新生代中分配内存时,已经没有空间分配内存导致分配内存失败时,开始Scavenger垃圾回收,希望能释放一些内存,然后在尝试重新分配内存。对于老代来说,开启内存回收的时机要复杂很多,简单来说会根据老代中内存占用的百分比和需要被分配对象的百分比计算出一个合适的阀值,触及到这个阀值就会开启老代的垃圾回收。\n\n我们可以通过手动设置来设置新生代和老代的space大小:\n```js\n    node --max-old-space-size=1700 index.js\n    node --max-new-space-size=1024 index.js\n```\n\n\n#### 空闲时GC\n虽然我们通过JavaScript没办法主动触发GC,但是在V8中还有一个空闲GC的机制,他根据被嵌入宿主来决定什么时候属于空闲时来执行GC。比如V8在Chrome浏览器中,为了保证动画渲染的流畅,一秒钟需要渲染60个帧,相当于16.6毫秒渲染一帧,在16.6毫秒以内渲染完了一帧,比如只花了10毫秒就渲染完了这一帧的动画,那么你就有了6.6毫秒的空闲时间可以执行一些空闲时的GC(在许多新版本的浏览器中,开发者也可以通过[requestIdleCallback](https://developers.google.com/web/updates/2015/08/using-requestidlecallback)事件,利用浏览器空闲时间来提高性能,有兴趣的可以去了解[React 16 fiber的实现](https://www.youtube.com/watch?v=ZCuYPiUIONs))。\n\n![空闲时GC](http://img.pandihai.com/10.svg)<center><font color=gray size=2>利用主线程空闲时间进行GC</font></center>\n\n#### Incremental\n那么在空闲的几毫秒时间里能完成一次GC吗?那就是接下来就要介绍另外一种调度算法Incremental了,相比较于其他调度算法在暂停一次主线程执行一整次完成的GC,Incremental要求把一整个GC中的工作拆成一小块,和主线程中的JS递进的执行,或者在主线程有空闲时间的时候执行一小块GC任务。\n\n![Incremental](http://img.pandihai.com/06.svg)<center><font color=gray size=2>将一整个GC切分成一小块GC任务,插入到主线程中进行</font></center>\n\n### 总结\n不同JavaScript引擎实现GC都有不同程度的差异,本文主要以V8为例,有很多地方没有非常仔细的展开,比如：其实老代里面不是只有一块space,而是有4块space组成,每块space存放着不同的数据(old space,large object space,matedata space,code space)。垃圾回收设计本身就是一个很复杂的程序,有了GC,让开发者可以完全不用担心内存的管理问题。但是适当的了解垃圾回收的原理能够帮助我们更加深入的理解JavaScript的运行环境,也可以帮助我们写出更高效率的代码。\n\n最后的最后将之前的内存泄漏代码一步步的推演:\n\n1. 首先在全局作用域中声明了两个变量theThing和replaceThing,其中replaceThing被赋值为一个方法(callable object),然后调用setInterval方法,每隔1000毫秒调用一次replaceThing。\n2. 1000毫秒到了,执行replaceThing,创建一个新的局部作用域,根据hoist,先将方法unused方法声明,然后声明了originThing和c变量。这里特别要注意,**闭包是在方法声明的时候被创建的而不是在方法执行的时候创建的**,所以当声明了unused方法以后,同时创建了一个闭包,里面包含了unused方法使用的局部作用域变量originThing。**另外在V8中一旦作用域有闭包,这个上下文会被绑定到所有方法当中作为闭包,即使这个方法没有使用这个作用域中的任何一个变量**,所以在这里给全局作用域赋值的时候,someMethod作为一个方法,也被绑定一个unused创建的闭包,且被赋值在全局作用域中的theThing上了。\n3. 如果这时候开始第一次GC,从全局对象进行Reachable分析:theThing(reachable),replaceThing(reachable),theThing->longStr(reachable),theThing->someMethod(reachable),execution stack -> setInterval -> closure -> originThing(reachable)。   \n所有标记完成。此时:\n```js\n          from-space                                to-space\n\n    theThing         (reachable)                theThing\n    replaceThing     (reachable)                replaceThing\n    unused                                      originThing\n    originThing      (reachable)       =>       longStr  \n    c                                           someMethod\n    longStr          (reachable)                \n    someMethod       (reachable)                \n```\n4. 在过1000毫秒以后又执行replaceThing,又执行一遍步骤2\n5. 第二次GC开始\n\n```js\n          from-space                                to-space                           old-space\n\n    theThing         (reachable)                theThing                             originThing -> theThing\n    replaceThing     (reachable)                replaceThing                         theThing -> longStr\n    unused                                      originThing                          theThing -> someMethod\n    originThing      (reachable)       =>       longStr                    =>        someMethod -> originThing(closure)        \n    c                                           someMethod\n    longStr          (reachable)                \n    someMethod       (reachable)                \n```\n6. 因为闭包一直连着这originThing,导致了old-space中的originThing一直无法释放。随着时间的推移,每个1000毫秒执行一次replaceThing方法\n\n```js\n         old-space\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n```\n\n#### 结论 \n主要导致内存泄漏的原因是\n\n![闭包是在声明的时候被创建的](http://img.pandihai.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190708095349.png)<center><font color=gray size=2>闭包是在声明的时候被创建的,而不是执行的时候被创建的。</font></center>\n\n然后导致在originalThing还引用着老的theThing,theThing中的someMethod引用着originalThing导致全部都reachable无法释放。\n\n``` javacript\n\nvar theThing = null;\nvar replaceThing = function () {\n  var originalThing = theThing;\n  var c = 'a'\n  function unused() {\n    if (originalThing) {\n      console.log(\"hi\");\n    }\n  };\n\n  theThing = {\n    longStr: new Array(1000000).join('*'),\n    someMethod: function () {\n      console.log('1111');\n    }\n  };\n\n  originalThing = null;    //手动释放局部作用域中的变量\n};\n\nsetInterval(replaceThing,1000)\n\n```\n","source":"_posts/javascript垃圾回收机制.md","raw":"---\nlayout: post\ntitle: javascript垃圾回收机制\ndate: 2019-07-01 10:53:41\ntags:\n---\n\n## 前言\n\n其实大多数的时候作为javascript开发者不需要太关心内存的使用和释放,因为所有的javascript环境都实现了各自的垃圾回收机制(garbage collector(GC)),但是随着现在的SPA越来越多也越来越大,越来越追求极致的性能渐渐也要求开发者能够适当的了解一些垃圾回收机制内部的实现原理,在性能优化和追踪内存泄漏的时候都能够起到一点帮助。看一段内存泄漏的代码\n``` javacript\n\nvar theThing = null;\nvar replaceThing = function () {\n  var originalThing = theThing;\n  var c = 'a'\n  function unused() {\n    if (originalThing) {\n      console.log(\"hi\");\n    }\n  };\n\n  theThing = {\n    longStr: new Array(1000000).join('*'),\n    someMethod: function () {\n      console.log('1111');\n    }\n  };\n};\n\nsetInterval(replaceThing,1000)\n\n```\n最早想要去深入了解javacript GC是看到这道找内存泄漏的题目(具体怎么内存泄漏,我们后面在分析).任何一种GC管理都需要做这几步:\n1. 识别哪些对象需要被回收。\n2. 回收/重复使用需要被回收对象的内存。\n3. 压缩/整理内存(有些可能没有)\n\n而常见的识别对象是否需要回收的机制有下面几种:\n* 引用计数 (Python)\n* 逃逸分析 (Java)\n* Tracing/Reachable 追踪分析 (javascript)\n\n今天就主要看一下V8中GC的具体实现方式\n\n## Tracing/Reachable 追踪分析\nGC的第一步就是要找出哪些对象需要被回收,哪些不需要。在追踪分析(Tracing/Reachable)中,认为可以被追踪到(reachability)的对象认为是不能被回收的对象,剩下的不能被追踪到的对象就是要回收的对象。\n在V8中,追踪分析会从根对象开始(GC Root)根据指针将所有被能被追踪到的对象标记为reachable,javascript中根对象包括调用堆栈和global对象。\n\n\n## The Generational Hypothesis\nGenerational Hypothesis的意思是大部分的对象在早期就需要被回收。基于这样的一个假设,有很多的编程语言的垃圾回收机制在设计的时候都是将内存分代,年轻代(young generation),和老代(old generation)。\n这里的代其实就是开辟两块space分别存储刚被分配的对象和经过两次GC还是没有被回收的对象。在V8中有两个垃圾回收器分别对年轻代和老代进行垃圾回收,Scavenger针对年轻代进行垃圾回收,Major GC针对老代进行垃圾回收,他们的算法也是不同的。\n\n### Scavenger\nV8在年轻代的内存space使用的是semi-space算法,也就是说将内存分为两半,同时只有一块的内存能被使用,另外一半是完全空的(或者说这一半内存都是可以被分配的)。在程序开始执行的时候,将所有的变量都分配可以被使用的一半内存中(叫做from-space)。当第一次GC开始的时候根据追踪分析结果,将所有可以reachable的对象(不能被释放的对象),全部转移到剩余一半可以被分配的内存中(to-space)，这样from-space中的内存又全部可以被分配了，这个时候如果又有新申明的对象需要分配内存,就会分配到这一块内存当中了,最后在转移完不能被释放的对象之后,还需要更新引用指针,指向在to-space中最新的地址。\n\n![第一次GC](http://img.pandihai.com/03.svg)\n\n\n第二次GC开始的时候,在原本的to-space中仍然不能被释放的对象首先转移到老代(old generation)的space中,这时候to-space中又全部可以被分配,重复之前的操作。从from-space中将不能被释放的对象转移过来。完成2次GC之后,存货了两次的对象现在就在老代里面了,而存活一次GC的对象现在就在to-space中了,这个to-space也被叫做intermediate generation(中生代).在Scavenger中回收内存有三个过程:标记(追踪分析),转移(from-space to to-space),更新指针地址。\n\n![第二次GC](http://img.pandihai.com/04.svg)<center><font color=gray size=2>第二次GC</font></center>\n\n\n在这种内存回收的机制中,其中一个问题就是转移对象的时候是会消耗一定性能的,但是根据Generational Hypothesis的假设大部分的对象在早期就会被回收了,这也就意味着只有少部分不能被回收的对象需要被移动，这也意味着如果这个假设不成立，比如我们的代码中有很多的闭包导致很多的作用域不能被释放,那么将会有大量的对象需要在space之间转移,是比较浪费性能的。但是相反的,基于大部分对象都可以在早期被回收的假设,如果大部分的对象在早期就可以被释放,这种机制的内存回收对这需要在早期就回收的对象其实是什么都不需要做的,只需要把不能释放的少部分对象进行转移（from-space to to-space）,然后在下次分配内存的时候把这部分需要释放的对象所占的内存直接覆盖就可以了(rewrite dead object)。\n\n#### Parallel\nParallel是V8中调度线程进行内存回收的一种算法,指的是主线程和帮助线程同时进行相同工作量的内存回收,这种算法还是会停止主线程正在进行的全部工作,但是工作量被平摊到几个线程之后,理论上时间也被参与线程的数量整除了(加上一些同步调度的开销)。Scavenger就是使用的这种线程调度机制,当需要进行内存回收的时候,所有的线程获得一定数量的存活的对象引用指针,开始同时将这些存活对象搬运到to-space中。不同的线程可能通过不同引用路径访问到同一个对象,当线程将存活对象转移到to-space之后,更新完指针地址后,会在from-space的老对象中留下一个forwarding指针,这样其他线程找到这个对象之后就可以通过这个指针来找到新的地址更新引用地址了。\n\n![Scavenger平行调度](http://img.pandihai.com/05.svg)<center><font color=gray size=2>Scavenger平行调度,同时有多个帮助线程和主线程参与</font></center>\n\n### Major GC\nMajor GC主要负责老代的内存回收,同样也是三个过程:标记(追踪分析),清除,整理压缩内存。标记这一步和Scavenger一样通过追踪分析确定哪些内存需要被回收,然后在对象被回收以后将被回收的内存加入到free-list这个数据结构中,free-list就像是一个个抽屉,每个抽屉的大小代表了从这个地址开始可以被连续分配的内存的大小,当我们需要在老代中重新分配内存的时候就可以快速的根据需要分配内存的大小找到一个合适的抽屉把内存进行分配。最后就是进行内存整理,这个就好像是Windows系统整理磁盘一样,将还没被幸存的对象利用free-list查找拷贝到其他的已经被整理完的page中,这样使小块的内存碎片也被整理完之后加以利用。跟Scavenger中一样来回拷贝对象也会有性能的消耗,在V8中只会对高度碎片化的page进行整理,对其他的page进行清除,这样在转移的时候也是一样的只需要转移存活的对象就可以了。\n\n#### Concurrent\nConcurrent同样也是V8中进行内存回收的线程调度算法,当主线程执行Javascript的时候,帮助线程同步进行内存回收的一些工作。相比Parallel来说这个算法要复杂的多,可能前一毫秒帮助线程在进行GC操作,后一毫秒主线程就改变了这个对象。也有可能帮助线程和主线程同时读取修改同一个对象。但是这种算法的优势就是当帮助线程进行GC工作的时候,主线程可以继续执行JavaScript,完全不会受到影响。Major GC就是采用的这个算法,当老代的内存到达一定系统自动计算的阀值,就开始进行Major GC,首先每个帮助线程都会获得一定数量的对象指针,开始针对这些对象进行标记,然后根据对象的引用指针对reachable对象都进行标记,在进行这些标记的同时,主线程仍然在执行JavaScript没有受到影响。当帮助线程完成标记,或者老代触及了设定的阀值,主线程也开始参与GC,他首先进行一步快速的标记确认,确保帮助线程在标记的同时主线程修改的对象标记正确(在帮助线程进行标记的时候,如果主线程执行的JavaScript修改了对象会有Write barriers,类似于有个标记)。当主线程确认所有存活的对象都被标记以后,主线程会和几个子线程一起,对一些内存page进行压缩和更新指针的工作,不是所有的page都需要进行压缩(只对高碎片化的进行压缩),不需要压缩的利用free-list进行打扫。\n\n![Major GC同步调度](http://img.pandihai.com/09.svg)<center><font color=gray size=2>Major GC同步调度</font></center>\n\n\n### 什么时候会执行GC\n在JavaScript中我们没办法用编程的方式主动触发GC,因为涉及到复杂的线程调度,主动的触发GC可能会影响正在执行的GC或者下次的GC。对于Scavenger来说,当在新生代中分配内存时,已经没有空间分配内存导致分配内存失败时,开始Scavenger垃圾回收,希望能释放一些内存,然后在尝试重新分配内存。对于老代来说,开启内存回收的时机要复杂很多,简单来说会根据老代中内存占用的百分比和需要被分配对象的百分比计算出一个合适的阀值,触及到这个阀值就会开启老代的垃圾回收。\n\n我们可以通过手动设置来设置新生代和老代的space大小:\n```js\n    node --max-old-space-size=1700 index.js\n    node --max-new-space-size=1024 index.js\n```\n\n\n#### 空闲时GC\n虽然我们通过JavaScript没办法主动触发GC,但是在V8中还有一个空闲GC的机制,他根据被嵌入宿主来决定什么时候属于空闲时来执行GC。比如V8在Chrome浏览器中,为了保证动画渲染的流畅,一秒钟需要渲染60个帧,相当于16.6毫秒渲染一帧,在16.6毫秒以内渲染完了一帧,比如只花了10毫秒就渲染完了这一帧的动画,那么你就有了6.6毫秒的空闲时间可以执行一些空闲时的GC(在许多新版本的浏览器中,开发者也可以通过[requestIdleCallback](https://developers.google.com/web/updates/2015/08/using-requestidlecallback)事件,利用浏览器空闲时间来提高性能,有兴趣的可以去了解[React 16 fiber的实现](https://www.youtube.com/watch?v=ZCuYPiUIONs))。\n\n![空闲时GC](http://img.pandihai.com/10.svg)<center><font color=gray size=2>利用主线程空闲时间进行GC</font></center>\n\n#### Incremental\n那么在空闲的几毫秒时间里能完成一次GC吗?那就是接下来就要介绍另外一种调度算法Incremental了,相比较于其他调度算法在暂停一次主线程执行一整次完成的GC,Incremental要求把一整个GC中的工作拆成一小块,和主线程中的JS递进的执行,或者在主线程有空闲时间的时候执行一小块GC任务。\n\n![Incremental](http://img.pandihai.com/06.svg)<center><font color=gray size=2>将一整个GC切分成一小块GC任务,插入到主线程中进行</font></center>\n\n### 总结\n不同JavaScript引擎实现GC都有不同程度的差异,本文主要以V8为例,有很多地方没有非常仔细的展开,比如：其实老代里面不是只有一块space,而是有4块space组成,每块space存放着不同的数据(old space,large object space,matedata space,code space)。垃圾回收设计本身就是一个很复杂的程序,有了GC,让开发者可以完全不用担心内存的管理问题。但是适当的了解垃圾回收的原理能够帮助我们更加深入的理解JavaScript的运行环境,也可以帮助我们写出更高效率的代码。\n\n最后的最后将之前的内存泄漏代码一步步的推演:\n\n1. 首先在全局作用域中声明了两个变量theThing和replaceThing,其中replaceThing被赋值为一个方法(callable object),然后调用setInterval方法,每隔1000毫秒调用一次replaceThing。\n2. 1000毫秒到了,执行replaceThing,创建一个新的局部作用域,根据hoist,先将方法unused方法声明,然后声明了originThing和c变量。这里特别要注意,**闭包是在方法声明的时候被创建的而不是在方法执行的时候创建的**,所以当声明了unused方法以后,同时创建了一个闭包,里面包含了unused方法使用的局部作用域变量originThing。**另外在V8中一旦作用域有闭包,这个上下文会被绑定到所有方法当中作为闭包,即使这个方法没有使用这个作用域中的任何一个变量**,所以在这里给全局作用域赋值的时候,someMethod作为一个方法,也被绑定一个unused创建的闭包,且被赋值在全局作用域中的theThing上了。\n3. 如果这时候开始第一次GC,从全局对象进行Reachable分析:theThing(reachable),replaceThing(reachable),theThing->longStr(reachable),theThing->someMethod(reachable),execution stack -> setInterval -> closure -> originThing(reachable)。   \n所有标记完成。此时:\n```js\n          from-space                                to-space\n\n    theThing         (reachable)                theThing\n    replaceThing     (reachable)                replaceThing\n    unused                                      originThing\n    originThing      (reachable)       =>       longStr  \n    c                                           someMethod\n    longStr          (reachable)                \n    someMethod       (reachable)                \n```\n4. 在过1000毫秒以后又执行replaceThing,又执行一遍步骤2\n5. 第二次GC开始\n\n```js\n          from-space                                to-space                           old-space\n\n    theThing         (reachable)                theThing                             originThing -> theThing\n    replaceThing     (reachable)                replaceThing                         theThing -> longStr\n    unused                                      originThing                          theThing -> someMethod\n    originThing      (reachable)       =>       longStr                    =>        someMethod -> originThing(closure)        \n    c                                           someMethod\n    longStr          (reachable)                \n    someMethod       (reachable)                \n```\n6. 因为闭包一直连着这originThing,导致了old-space中的originThing一直无法释放。随着时间的推移,每个1000毫秒执行一次replaceThing方法\n\n```js\n         old-space\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n```\n\n#### 结论 \n主要导致内存泄漏的原因是\n\n![闭包是在声明的时候被创建的](http://img.pandihai.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190708095349.png)<center><font color=gray size=2>闭包是在声明的时候被创建的,而不是执行的时候被创建的。</font></center>\n\n然后导致在originalThing还引用着老的theThing,theThing中的someMethod引用着originalThing导致全部都reachable无法释放。\n\n``` javacript\n\nvar theThing = null;\nvar replaceThing = function () {\n  var originalThing = theThing;\n  var c = 'a'\n  function unused() {\n    if (originalThing) {\n      console.log(\"hi\");\n    }\n  };\n\n  theThing = {\n    longStr: new Array(1000000).join('*'),\n    someMethod: function () {\n      console.log('1111');\n    }\n  };\n\n  originalThing = null;    //手动释放局部作用域中的变量\n};\n\nsetInterval(replaceThing,1000)\n\n```\n","slug":"javascript垃圾回收机制","published":1,"updated":"2021-03-29T05:44:19.160Z","comments":1,"photos":[],"link":"","_id":"ckmu8hypz000ty4tz2r8eozla","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>其实大多数的时候作为javascript开发者不需要太关心内存的使用和释放,因为所有的javascript环境都实现了各自的垃圾回收机制(garbage collector(GC)),但是随着现在的SPA越来越多也越来越大,越来越追求极致的性能渐渐也要求开发者能够适当的了解一些垃圾回收机制内部的实现原理,在性能优化和追踪内存泄漏的时候都能够起到一点帮助。看一段内存泄漏的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var theThing = null;</span><br><span class=\"line\">var replaceThing = function () &#123;</span><br><span class=\"line\">  var originalThing = theThing;</span><br><span class=\"line\">  var c = &apos;a&apos;</span><br><span class=\"line\">  function unused() &#123;</span><br><span class=\"line\">    if (originalThing) &#123;</span><br><span class=\"line\">      console.log(&quot;hi&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  theThing = &#123;</span><br><span class=\"line\">    longStr: new Array(1000000).join(&apos;*&apos;),</span><br><span class=\"line\">    someMethod: function () &#123;</span><br><span class=\"line\">      console.log(&apos;1111&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(replaceThing,1000)</span><br></pre></td></tr></table></figure></p>\n<p>最早想要去深入了解javacript GC是看到这道找内存泄漏的题目(具体怎么内存泄漏,我们后面在分析).任何一种GC管理都需要做这几步:</p>\n<ol>\n<li>识别哪些对象需要被回收。</li>\n<li>回收/重复使用需要被回收对象的内存。</li>\n<li>压缩/整理内存(有些可能没有)</li>\n</ol>\n<p>而常见的识别对象是否需要回收的机制有下面几种:</p>\n<ul>\n<li>引用计数 (Python)</li>\n<li>逃逸分析 (Java)</li>\n<li>Tracing/Reachable 追踪分析 (javascript)</li>\n</ul>\n<p>今天就主要看一下V8中GC的具体实现方式</p>\n<h2 id=\"Tracing-Reachable-追踪分析\"><a href=\"#Tracing-Reachable-追踪分析\" class=\"headerlink\" title=\"Tracing/Reachable 追踪分析\"></a>Tracing/Reachable 追踪分析</h2><p>GC的第一步就是要找出哪些对象需要被回收,哪些不需要。在追踪分析(Tracing/Reachable)中,认为可以被追踪到(reachability)的对象认为是不能被回收的对象,剩下的不能被追踪到的对象就是要回收的对象。<br>在V8中,追踪分析会从根对象开始(GC Root)根据指针将所有被能被追踪到的对象标记为reachable,javascript中根对象包括调用堆栈和global对象。</p>\n<h2 id=\"The-Generational-Hypothesis\"><a href=\"#The-Generational-Hypothesis\" class=\"headerlink\" title=\"The Generational Hypothesis\"></a>The Generational Hypothesis</h2><p>Generational Hypothesis的意思是大部分的对象在早期就需要被回收。基于这样的一个假设,有很多的编程语言的垃圾回收机制在设计的时候都是将内存分代,年轻代(young generation),和老代(old generation)。<br>这里的代其实就是开辟两块space分别存储刚被分配的对象和经过两次GC还是没有被回收的对象。在V8中有两个垃圾回收器分别对年轻代和老代进行垃圾回收,Scavenger针对年轻代进行垃圾回收,Major GC针对老代进行垃圾回收,他们的算法也是不同的。</p>\n<h3 id=\"Scavenger\"><a href=\"#Scavenger\" class=\"headerlink\" title=\"Scavenger\"></a>Scavenger</h3><p>V8在年轻代的内存space使用的是semi-space算法,也就是说将内存分为两半,同时只有一块的内存能被使用,另外一半是完全空的(或者说这一半内存都是可以被分配的)。在程序开始执行的时候,将所有的变量都分配可以被使用的一半内存中(叫做from-space)。当第一次GC开始的时候根据追踪分析结果,将所有可以reachable的对象(不能被释放的对象),全部转移到剩余一半可以被分配的内存中(to-space)，这样from-space中的内存又全部可以被分配了，这个时候如果又有新申明的对象需要分配内存,就会分配到这一块内存当中了,最后在转移完不能被释放的对象之后,还需要更新引用指针,指向在to-space中最新的地址。</p>\n<p><img src=\"http://img.pandihai.com/03.svg\" alt=\"第一次GC\"></p>\n<p>第二次GC开始的时候,在原本的to-space中仍然不能被释放的对象首先转移到老代(old generation)的space中,这时候to-space中又全部可以被分配,重复之前的操作。从from-space中将不能被释放的对象转移过来。完成2次GC之后,存货了两次的对象现在就在老代里面了,而存活一次GC的对象现在就在to-space中了,这个to-space也被叫做intermediate generation(中生代).在Scavenger中回收内存有三个过程:标记(追踪分析),转移(from-space to to-space),更新指针地址。</p>\n<p><img src=\"http://img.pandihai.com/04.svg\" alt=\"第二次GC\"><center><font color=\"gray\" size=\"2\">第二次GC</font></center></p>\n<p>在这种内存回收的机制中,其中一个问题就是转移对象的时候是会消耗一定性能的,但是根据Generational Hypothesis的假设大部分的对象在早期就会被回收了,这也就意味着只有少部分不能被回收的对象需要被移动，这也意味着如果这个假设不成立，比如我们的代码中有很多的闭包导致很多的作用域不能被释放,那么将会有大量的对象需要在space之间转移,是比较浪费性能的。但是相反的,基于大部分对象都可以在早期被回收的假设,如果大部分的对象在早期就可以被释放,这种机制的内存回收对这需要在早期就回收的对象其实是什么都不需要做的,只需要把不能释放的少部分对象进行转移（from-space to to-space）,然后在下次分配内存的时候把这部分需要释放的对象所占的内存直接覆盖就可以了(rewrite dead object)。</p>\n<h4 id=\"Parallel\"><a href=\"#Parallel\" class=\"headerlink\" title=\"Parallel\"></a>Parallel</h4><p>Parallel是V8中调度线程进行内存回收的一种算法,指的是主线程和帮助线程同时进行相同工作量的内存回收,这种算法还是会停止主线程正在进行的全部工作,但是工作量被平摊到几个线程之后,理论上时间也被参与线程的数量整除了(加上一些同步调度的开销)。Scavenger就是使用的这种线程调度机制,当需要进行内存回收的时候,所有的线程获得一定数量的存活的对象引用指针,开始同时将这些存活对象搬运到to-space中。不同的线程可能通过不同引用路径访问到同一个对象,当线程将存活对象转移到to-space之后,更新完指针地址后,会在from-space的老对象中留下一个forwarding指针,这样其他线程找到这个对象之后就可以通过这个指针来找到新的地址更新引用地址了。</p>\n<p><img src=\"http://img.pandihai.com/05.svg\" alt=\"Scavenger平行调度\"><center><font color=\"gray\" size=\"2\">Scavenger平行调度,同时有多个帮助线程和主线程参与</font></center></p>\n<h3 id=\"Major-GC\"><a href=\"#Major-GC\" class=\"headerlink\" title=\"Major GC\"></a>Major GC</h3><p>Major GC主要负责老代的内存回收,同样也是三个过程:标记(追踪分析),清除,整理压缩内存。标记这一步和Scavenger一样通过追踪分析确定哪些内存需要被回收,然后在对象被回收以后将被回收的内存加入到free-list这个数据结构中,free-list就像是一个个抽屉,每个抽屉的大小代表了从这个地址开始可以被连续分配的内存的大小,当我们需要在老代中重新分配内存的时候就可以快速的根据需要分配内存的大小找到一个合适的抽屉把内存进行分配。最后就是进行内存整理,这个就好像是Windows系统整理磁盘一样,将还没被幸存的对象利用free-list查找拷贝到其他的已经被整理完的page中,这样使小块的内存碎片也被整理完之后加以利用。跟Scavenger中一样来回拷贝对象也会有性能的消耗,在V8中只会对高度碎片化的page进行整理,对其他的page进行清除,这样在转移的时候也是一样的只需要转移存活的对象就可以了。</p>\n<h4 id=\"Concurrent\"><a href=\"#Concurrent\" class=\"headerlink\" title=\"Concurrent\"></a>Concurrent</h4><p>Concurrent同样也是V8中进行内存回收的线程调度算法,当主线程执行Javascript的时候,帮助线程同步进行内存回收的一些工作。相比Parallel来说这个算法要复杂的多,可能前一毫秒帮助线程在进行GC操作,后一毫秒主线程就改变了这个对象。也有可能帮助线程和主线程同时读取修改同一个对象。但是这种算法的优势就是当帮助线程进行GC工作的时候,主线程可以继续执行JavaScript,完全不会受到影响。Major GC就是采用的这个算法,当老代的内存到达一定系统自动计算的阀值,就开始进行Major GC,首先每个帮助线程都会获得一定数量的对象指针,开始针对这些对象进行标记,然后根据对象的引用指针对reachable对象都进行标记,在进行这些标记的同时,主线程仍然在执行JavaScript没有受到影响。当帮助线程完成标记,或者老代触及了设定的阀值,主线程也开始参与GC,他首先进行一步快速的标记确认,确保帮助线程在标记的同时主线程修改的对象标记正确(在帮助线程进行标记的时候,如果主线程执行的JavaScript修改了对象会有Write barriers,类似于有个标记)。当主线程确认所有存活的对象都被标记以后,主线程会和几个子线程一起,对一些内存page进行压缩和更新指针的工作,不是所有的page都需要进行压缩(只对高碎片化的进行压缩),不需要压缩的利用free-list进行打扫。</p>\n<p><img src=\"http://img.pandihai.com/09.svg\" alt=\"Major GC同步调度\"><center><font color=\"gray\" size=\"2\">Major GC同步调度</font></center></p>\n<h3 id=\"什么时候会执行GC\"><a href=\"#什么时候会执行GC\" class=\"headerlink\" title=\"什么时候会执行GC\"></a>什么时候会执行GC</h3><p>在JavaScript中我们没办法用编程的方式主动触发GC,因为涉及到复杂的线程调度,主动的触发GC可能会影响正在执行的GC或者下次的GC。对于Scavenger来说,当在新生代中分配内存时,已经没有空间分配内存导致分配内存失败时,开始Scavenger垃圾回收,希望能释放一些内存,然后在尝试重新分配内存。对于老代来说,开启内存回收的时机要复杂很多,简单来说会根据老代中内存占用的百分比和需要被分配对象的百分比计算出一个合适的阀值,触及到这个阀值就会开启老代的垃圾回收。</p>\n<p>我们可以通过手动设置来设置新生代和老代的space大小:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --max-old-space-size=<span class=\"number\">1700</span> index.js</span><br><span class=\"line\">node --max-<span class=\"keyword\">new</span>-space-size=<span class=\"number\">1024</span> index.js</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"空闲时GC\"><a href=\"#空闲时GC\" class=\"headerlink\" title=\"空闲时GC\"></a>空闲时GC</h4><p>虽然我们通过JavaScript没办法主动触发GC,但是在V8中还有一个空闲GC的机制,他根据被嵌入宿主来决定什么时候属于空闲时来执行GC。比如V8在Chrome浏览器中,为了保证动画渲染的流畅,一秒钟需要渲染60个帧,相当于16.6毫秒渲染一帧,在16.6毫秒以内渲染完了一帧,比如只花了10毫秒就渲染完了这一帧的动画,那么你就有了6.6毫秒的空闲时间可以执行一些空闲时的GC(在许多新版本的浏览器中,开发者也可以通过<a href=\"https://developers.google.com/web/updates/2015/08/using-requestidlecallback\" target=\"_blank\" rel=\"noopener\">requestIdleCallback</a>事件,利用浏览器空闲时间来提高性能,有兴趣的可以去了解<a href=\"https://www.youtube.com/watch?v=ZCuYPiUIONs\" target=\"_blank\" rel=\"noopener\">React 16 fiber的实现</a>)。</p>\n<p><img src=\"http://img.pandihai.com/10.svg\" alt=\"空闲时GC\"><center><font color=\"gray\" size=\"2\">利用主线程空闲时间进行GC</font></center></p>\n<h4 id=\"Incremental\"><a href=\"#Incremental\" class=\"headerlink\" title=\"Incremental\"></a>Incremental</h4><p>那么在空闲的几毫秒时间里能完成一次GC吗?那就是接下来就要介绍另外一种调度算法Incremental了,相比较于其他调度算法在暂停一次主线程执行一整次完成的GC,Incremental要求把一整个GC中的工作拆成一小块,和主线程中的JS递进的执行,或者在主线程有空闲时间的时候执行一小块GC任务。</p>\n<p><img src=\"http://img.pandihai.com/06.svg\" alt=\"Incremental\"><center><font color=\"gray\" size=\"2\">将一整个GC切分成一小块GC任务,插入到主线程中进行</font></center></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>不同JavaScript引擎实现GC都有不同程度的差异,本文主要以V8为例,有很多地方没有非常仔细的展开,比如：其实老代里面不是只有一块space,而是有4块space组成,每块space存放着不同的数据(old space,large object space,matedata space,code space)。垃圾回收设计本身就是一个很复杂的程序,有了GC,让开发者可以完全不用担心内存的管理问题。但是适当的了解垃圾回收的原理能够帮助我们更加深入的理解JavaScript的运行环境,也可以帮助我们写出更高效率的代码。</p>\n<p>最后的最后将之前的内存泄漏代码一步步的推演:</p>\n<ol>\n<li>首先在全局作用域中声明了两个变量theThing和replaceThing,其中replaceThing被赋值为一个方法(callable object),然后调用setInterval方法,每隔1000毫秒调用一次replaceThing。</li>\n<li>1000毫秒到了,执行replaceThing,创建一个新的局部作用域,根据hoist,先将方法unused方法声明,然后声明了originThing和c变量。这里特别要注意,<strong>闭包是在方法声明的时候被创建的而不是在方法执行的时候创建的</strong>,所以当声明了unused方法以后,同时创建了一个闭包,里面包含了unused方法使用的局部作用域变量originThing。<strong>另外在V8中一旦作用域有闭包,这个上下文会被绑定到所有方法当中作为闭包,即使这个方法没有使用这个作用域中的任何一个变量</strong>,所以在这里给全局作用域赋值的时候,someMethod作为一个方法,也被绑定一个unused创建的闭包,且被赋值在全局作用域中的theThing上了。</li>\n<li><p>如果这时候开始第一次GC,从全局对象进行Reachable分析:theThing(reachable),replaceThing(reachable),theThing-&gt;longStr(reachable),theThing-&gt;someMethod(reachable),execution stack -&gt; setInterval -&gt; closure -&gt; originThing(reachable)。<br>所有标记完成。此时:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">from</span>-space                                to-space</span><br><span class=\"line\"></span><br><span class=\"line\">theThing         (reachable)                theThing</span><br><span class=\"line\">replaceThing     (reachable)                replaceThing</span><br><span class=\"line\">unused                                      originThing</span><br><span class=\"line\">originThing      (reachable)       =&gt;       longStr  </span><br><span class=\"line\">c                                           someMethod</span><br><span class=\"line\">longStr          (reachable)                </span><br><span class=\"line\">someMethod       (reachable)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在过1000毫秒以后又执行replaceThing,又执行一遍步骤2</p>\n</li>\n<li>第二次GC开始</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">from</span>-space                                to-space                           old-space</span><br><span class=\"line\"></span><br><span class=\"line\">theThing         (reachable)                theThing                             originThing -&gt; theThing</span><br><span class=\"line\">replaceThing     (reachable)                replaceThing                         theThing -&gt; longStr</span><br><span class=\"line\">unused                                      originThing                          theThing -&gt; someMethod</span><br><span class=\"line\">originThing      (reachable)       =&gt;       <span class=\"function\"><span class=\"params\">longStr</span>                    =&gt;</span>        someMethod -&gt; originThing(closure)        </span><br><span class=\"line\">c                                           someMethod</span><br><span class=\"line\">longStr          (reachable)                </span><br><span class=\"line\">someMethod       (reachable)</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>因为闭包一直连着这originThing,导致了old-space中的originThing一直无法释放。随着时间的推移,每个1000毫秒执行一次replaceThing方法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     old-space</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br></pre></td></tr></table></figure>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>主要导致内存泄漏的原因是</p>\n<p><img src=\"http://img.pandihai.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190708095349.png\" alt=\"闭包是在声明的时候被创建的\"><center><font color=\"gray\" size=\"2\">闭包是在声明的时候被创建的,而不是执行的时候被创建的。</font></center></p>\n<p>然后导致在originalThing还引用着老的theThing,theThing中的someMethod引用着originalThing导致全部都reachable无法释放。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var theThing = null;</span><br><span class=\"line\">var replaceThing = function () &#123;</span><br><span class=\"line\">  var originalThing = theThing;</span><br><span class=\"line\">  var c = &apos;a&apos;</span><br><span class=\"line\">  function unused() &#123;</span><br><span class=\"line\">    if (originalThing) &#123;</span><br><span class=\"line\">      console.log(&quot;hi&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  theThing = &#123;</span><br><span class=\"line\">    longStr: new Array(1000000).join(&apos;*&apos;),</span><br><span class=\"line\">    someMethod: function () &#123;</span><br><span class=\"line\">      console.log(&apos;1111&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  originalThing = null;    //手动释放局部作用域中的变量</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(replaceThing,1000)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>其实大多数的时候作为javascript开发者不需要太关心内存的使用和释放,因为所有的javascript环境都实现了各自的垃圾回收机制(garbage collector(GC)),但是随着现在的SPA越来越多也越来越大,越来越追求极致的性能渐渐也要求开发者能够适当的了解一些垃圾回收机制内部的实现原理,在性能优化和追踪内存泄漏的时候都能够起到一点帮助。看一段内存泄漏的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var theThing = null;</span><br><span class=\"line\">var replaceThing = function () &#123;</span><br><span class=\"line\">  var originalThing = theThing;</span><br><span class=\"line\">  var c = &apos;a&apos;</span><br><span class=\"line\">  function unused() &#123;</span><br><span class=\"line\">    if (originalThing) &#123;</span><br><span class=\"line\">      console.log(&quot;hi&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  theThing = &#123;</span><br><span class=\"line\">    longStr: new Array(1000000).join(&apos;*&apos;),</span><br><span class=\"line\">    someMethod: function () &#123;</span><br><span class=\"line\">      console.log(&apos;1111&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(replaceThing,1000)</span><br></pre></td></tr></table></figure></p>\n<p>最早想要去深入了解javacript GC是看到这道找内存泄漏的题目(具体怎么内存泄漏,我们后面在分析).任何一种GC管理都需要做这几步:</p>\n<ol>\n<li>识别哪些对象需要被回收。</li>\n<li>回收/重复使用需要被回收对象的内存。</li>\n<li>压缩/整理内存(有些可能没有)</li>\n</ol>\n<p>而常见的识别对象是否需要回收的机制有下面几种:</p>\n<ul>\n<li>引用计数 (Python)</li>\n<li>逃逸分析 (Java)</li>\n<li>Tracing/Reachable 追踪分析 (javascript)</li>\n</ul>\n<p>今天就主要看一下V8中GC的具体实现方式</p>\n<h2 id=\"Tracing-Reachable-追踪分析\"><a href=\"#Tracing-Reachable-追踪分析\" class=\"headerlink\" title=\"Tracing/Reachable 追踪分析\"></a>Tracing/Reachable 追踪分析</h2><p>GC的第一步就是要找出哪些对象需要被回收,哪些不需要。在追踪分析(Tracing/Reachable)中,认为可以被追踪到(reachability)的对象认为是不能被回收的对象,剩下的不能被追踪到的对象就是要回收的对象。<br>在V8中,追踪分析会从根对象开始(GC Root)根据指针将所有被能被追踪到的对象标记为reachable,javascript中根对象包括调用堆栈和global对象。</p>\n<h2 id=\"The-Generational-Hypothesis\"><a href=\"#The-Generational-Hypothesis\" class=\"headerlink\" title=\"The Generational Hypothesis\"></a>The Generational Hypothesis</h2><p>Generational Hypothesis的意思是大部分的对象在早期就需要被回收。基于这样的一个假设,有很多的编程语言的垃圾回收机制在设计的时候都是将内存分代,年轻代(young generation),和老代(old generation)。<br>这里的代其实就是开辟两块space分别存储刚被分配的对象和经过两次GC还是没有被回收的对象。在V8中有两个垃圾回收器分别对年轻代和老代进行垃圾回收,Scavenger针对年轻代进行垃圾回收,Major GC针对老代进行垃圾回收,他们的算法也是不同的。</p>\n<h3 id=\"Scavenger\"><a href=\"#Scavenger\" class=\"headerlink\" title=\"Scavenger\"></a>Scavenger</h3><p>V8在年轻代的内存space使用的是semi-space算法,也就是说将内存分为两半,同时只有一块的内存能被使用,另外一半是完全空的(或者说这一半内存都是可以被分配的)。在程序开始执行的时候,将所有的变量都分配可以被使用的一半内存中(叫做from-space)。当第一次GC开始的时候根据追踪分析结果,将所有可以reachable的对象(不能被释放的对象),全部转移到剩余一半可以被分配的内存中(to-space)，这样from-space中的内存又全部可以被分配了，这个时候如果又有新申明的对象需要分配内存,就会分配到这一块内存当中了,最后在转移完不能被释放的对象之后,还需要更新引用指针,指向在to-space中最新的地址。</p>\n<p><img src=\"http://img.pandihai.com/03.svg\" alt=\"第一次GC\"></p>\n<p>第二次GC开始的时候,在原本的to-space中仍然不能被释放的对象首先转移到老代(old generation)的space中,这时候to-space中又全部可以被分配,重复之前的操作。从from-space中将不能被释放的对象转移过来。完成2次GC之后,存货了两次的对象现在就在老代里面了,而存活一次GC的对象现在就在to-space中了,这个to-space也被叫做intermediate generation(中生代).在Scavenger中回收内存有三个过程:标记(追踪分析),转移(from-space to to-space),更新指针地址。</p>\n<p><img src=\"http://img.pandihai.com/04.svg\" alt=\"第二次GC\"><center><font color=\"gray\" size=\"2\">第二次GC</font></center></p>\n<p>在这种内存回收的机制中,其中一个问题就是转移对象的时候是会消耗一定性能的,但是根据Generational Hypothesis的假设大部分的对象在早期就会被回收了,这也就意味着只有少部分不能被回收的对象需要被移动，这也意味着如果这个假设不成立，比如我们的代码中有很多的闭包导致很多的作用域不能被释放,那么将会有大量的对象需要在space之间转移,是比较浪费性能的。但是相反的,基于大部分对象都可以在早期被回收的假设,如果大部分的对象在早期就可以被释放,这种机制的内存回收对这需要在早期就回收的对象其实是什么都不需要做的,只需要把不能释放的少部分对象进行转移（from-space to to-space）,然后在下次分配内存的时候把这部分需要释放的对象所占的内存直接覆盖就可以了(rewrite dead object)。</p>\n<h4 id=\"Parallel\"><a href=\"#Parallel\" class=\"headerlink\" title=\"Parallel\"></a>Parallel</h4><p>Parallel是V8中调度线程进行内存回收的一种算法,指的是主线程和帮助线程同时进行相同工作量的内存回收,这种算法还是会停止主线程正在进行的全部工作,但是工作量被平摊到几个线程之后,理论上时间也被参与线程的数量整除了(加上一些同步调度的开销)。Scavenger就是使用的这种线程调度机制,当需要进行内存回收的时候,所有的线程获得一定数量的存活的对象引用指针,开始同时将这些存活对象搬运到to-space中。不同的线程可能通过不同引用路径访问到同一个对象,当线程将存活对象转移到to-space之后,更新完指针地址后,会在from-space的老对象中留下一个forwarding指针,这样其他线程找到这个对象之后就可以通过这个指针来找到新的地址更新引用地址了。</p>\n<p><img src=\"http://img.pandihai.com/05.svg\" alt=\"Scavenger平行调度\"><center><font color=\"gray\" size=\"2\">Scavenger平行调度,同时有多个帮助线程和主线程参与</font></center></p>\n<h3 id=\"Major-GC\"><a href=\"#Major-GC\" class=\"headerlink\" title=\"Major GC\"></a>Major GC</h3><p>Major GC主要负责老代的内存回收,同样也是三个过程:标记(追踪分析),清除,整理压缩内存。标记这一步和Scavenger一样通过追踪分析确定哪些内存需要被回收,然后在对象被回收以后将被回收的内存加入到free-list这个数据结构中,free-list就像是一个个抽屉,每个抽屉的大小代表了从这个地址开始可以被连续分配的内存的大小,当我们需要在老代中重新分配内存的时候就可以快速的根据需要分配内存的大小找到一个合适的抽屉把内存进行分配。最后就是进行内存整理,这个就好像是Windows系统整理磁盘一样,将还没被幸存的对象利用free-list查找拷贝到其他的已经被整理完的page中,这样使小块的内存碎片也被整理完之后加以利用。跟Scavenger中一样来回拷贝对象也会有性能的消耗,在V8中只会对高度碎片化的page进行整理,对其他的page进行清除,这样在转移的时候也是一样的只需要转移存活的对象就可以了。</p>\n<h4 id=\"Concurrent\"><a href=\"#Concurrent\" class=\"headerlink\" title=\"Concurrent\"></a>Concurrent</h4><p>Concurrent同样也是V8中进行内存回收的线程调度算法,当主线程执行Javascript的时候,帮助线程同步进行内存回收的一些工作。相比Parallel来说这个算法要复杂的多,可能前一毫秒帮助线程在进行GC操作,后一毫秒主线程就改变了这个对象。也有可能帮助线程和主线程同时读取修改同一个对象。但是这种算法的优势就是当帮助线程进行GC工作的时候,主线程可以继续执行JavaScript,完全不会受到影响。Major GC就是采用的这个算法,当老代的内存到达一定系统自动计算的阀值,就开始进行Major GC,首先每个帮助线程都会获得一定数量的对象指针,开始针对这些对象进行标记,然后根据对象的引用指针对reachable对象都进行标记,在进行这些标记的同时,主线程仍然在执行JavaScript没有受到影响。当帮助线程完成标记,或者老代触及了设定的阀值,主线程也开始参与GC,他首先进行一步快速的标记确认,确保帮助线程在标记的同时主线程修改的对象标记正确(在帮助线程进行标记的时候,如果主线程执行的JavaScript修改了对象会有Write barriers,类似于有个标记)。当主线程确认所有存活的对象都被标记以后,主线程会和几个子线程一起,对一些内存page进行压缩和更新指针的工作,不是所有的page都需要进行压缩(只对高碎片化的进行压缩),不需要压缩的利用free-list进行打扫。</p>\n<p><img src=\"http://img.pandihai.com/09.svg\" alt=\"Major GC同步调度\"><center><font color=\"gray\" size=\"2\">Major GC同步调度</font></center></p>\n<h3 id=\"什么时候会执行GC\"><a href=\"#什么时候会执行GC\" class=\"headerlink\" title=\"什么时候会执行GC\"></a>什么时候会执行GC</h3><p>在JavaScript中我们没办法用编程的方式主动触发GC,因为涉及到复杂的线程调度,主动的触发GC可能会影响正在执行的GC或者下次的GC。对于Scavenger来说,当在新生代中分配内存时,已经没有空间分配内存导致分配内存失败时,开始Scavenger垃圾回收,希望能释放一些内存,然后在尝试重新分配内存。对于老代来说,开启内存回收的时机要复杂很多,简单来说会根据老代中内存占用的百分比和需要被分配对象的百分比计算出一个合适的阀值,触及到这个阀值就会开启老代的垃圾回收。</p>\n<p>我们可以通过手动设置来设置新生代和老代的space大小:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --max-old-space-size=<span class=\"number\">1700</span> index.js</span><br><span class=\"line\">node --max-<span class=\"keyword\">new</span>-space-size=<span class=\"number\">1024</span> index.js</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"空闲时GC\"><a href=\"#空闲时GC\" class=\"headerlink\" title=\"空闲时GC\"></a>空闲时GC</h4><p>虽然我们通过JavaScript没办法主动触发GC,但是在V8中还有一个空闲GC的机制,他根据被嵌入宿主来决定什么时候属于空闲时来执行GC。比如V8在Chrome浏览器中,为了保证动画渲染的流畅,一秒钟需要渲染60个帧,相当于16.6毫秒渲染一帧,在16.6毫秒以内渲染完了一帧,比如只花了10毫秒就渲染完了这一帧的动画,那么你就有了6.6毫秒的空闲时间可以执行一些空闲时的GC(在许多新版本的浏览器中,开发者也可以通过<a href=\"https://developers.google.com/web/updates/2015/08/using-requestidlecallback\" target=\"_blank\" rel=\"noopener\">requestIdleCallback</a>事件,利用浏览器空闲时间来提高性能,有兴趣的可以去了解<a href=\"https://www.youtube.com/watch?v=ZCuYPiUIONs\" target=\"_blank\" rel=\"noopener\">React 16 fiber的实现</a>)。</p>\n<p><img src=\"http://img.pandihai.com/10.svg\" alt=\"空闲时GC\"><center><font color=\"gray\" size=\"2\">利用主线程空闲时间进行GC</font></center></p>\n<h4 id=\"Incremental\"><a href=\"#Incremental\" class=\"headerlink\" title=\"Incremental\"></a>Incremental</h4><p>那么在空闲的几毫秒时间里能完成一次GC吗?那就是接下来就要介绍另外一种调度算法Incremental了,相比较于其他调度算法在暂停一次主线程执行一整次完成的GC,Incremental要求把一整个GC中的工作拆成一小块,和主线程中的JS递进的执行,或者在主线程有空闲时间的时候执行一小块GC任务。</p>\n<p><img src=\"http://img.pandihai.com/06.svg\" alt=\"Incremental\"><center><font color=\"gray\" size=\"2\">将一整个GC切分成一小块GC任务,插入到主线程中进行</font></center></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>不同JavaScript引擎实现GC都有不同程度的差异,本文主要以V8为例,有很多地方没有非常仔细的展开,比如：其实老代里面不是只有一块space,而是有4块space组成,每块space存放着不同的数据(old space,large object space,matedata space,code space)。垃圾回收设计本身就是一个很复杂的程序,有了GC,让开发者可以完全不用担心内存的管理问题。但是适当的了解垃圾回收的原理能够帮助我们更加深入的理解JavaScript的运行环境,也可以帮助我们写出更高效率的代码。</p>\n<p>最后的最后将之前的内存泄漏代码一步步的推演:</p>\n<ol>\n<li>首先在全局作用域中声明了两个变量theThing和replaceThing,其中replaceThing被赋值为一个方法(callable object),然后调用setInterval方法,每隔1000毫秒调用一次replaceThing。</li>\n<li>1000毫秒到了,执行replaceThing,创建一个新的局部作用域,根据hoist,先将方法unused方法声明,然后声明了originThing和c变量。这里特别要注意,<strong>闭包是在方法声明的时候被创建的而不是在方法执行的时候创建的</strong>,所以当声明了unused方法以后,同时创建了一个闭包,里面包含了unused方法使用的局部作用域变量originThing。<strong>另外在V8中一旦作用域有闭包,这个上下文会被绑定到所有方法当中作为闭包,即使这个方法没有使用这个作用域中的任何一个变量</strong>,所以在这里给全局作用域赋值的时候,someMethod作为一个方法,也被绑定一个unused创建的闭包,且被赋值在全局作用域中的theThing上了。</li>\n<li><p>如果这时候开始第一次GC,从全局对象进行Reachable分析:theThing(reachable),replaceThing(reachable),theThing-&gt;longStr(reachable),theThing-&gt;someMethod(reachable),execution stack -&gt; setInterval -&gt; closure -&gt; originThing(reachable)。<br>所有标记完成。此时:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">from</span>-space                                to-space</span><br><span class=\"line\"></span><br><span class=\"line\">theThing         (reachable)                theThing</span><br><span class=\"line\">replaceThing     (reachable)                replaceThing</span><br><span class=\"line\">unused                                      originThing</span><br><span class=\"line\">originThing      (reachable)       =&gt;       longStr  </span><br><span class=\"line\">c                                           someMethod</span><br><span class=\"line\">longStr          (reachable)                </span><br><span class=\"line\">someMethod       (reachable)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在过1000毫秒以后又执行replaceThing,又执行一遍步骤2</p>\n</li>\n<li>第二次GC开始</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">from</span>-space                                to-space                           old-space</span><br><span class=\"line\"></span><br><span class=\"line\">theThing         (reachable)                theThing                             originThing -&gt; theThing</span><br><span class=\"line\">replaceThing     (reachable)                replaceThing                         theThing -&gt; longStr</span><br><span class=\"line\">unused                                      originThing                          theThing -&gt; someMethod</span><br><span class=\"line\">originThing      (reachable)       =&gt;       <span class=\"function\"><span class=\"params\">longStr</span>                    =&gt;</span>        someMethod -&gt; originThing(closure)        </span><br><span class=\"line\">c                                           someMethod</span><br><span class=\"line\">longStr          (reachable)                </span><br><span class=\"line\">someMethod       (reachable)</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>因为闭包一直连着这originThing,导致了old-space中的originThing一直无法释放。随着时间的推移,每个1000毫秒执行一次replaceThing方法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     old-space</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br></pre></td></tr></table></figure>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>主要导致内存泄漏的原因是</p>\n<p><img src=\"http://img.pandihai.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190708095349.png\" alt=\"闭包是在声明的时候被创建的\"><center><font color=\"gray\" size=\"2\">闭包是在声明的时候被创建的,而不是执行的时候被创建的。</font></center></p>\n<p>然后导致在originalThing还引用着老的theThing,theThing中的someMethod引用着originalThing导致全部都reachable无法释放。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var theThing = null;</span><br><span class=\"line\">var replaceThing = function () &#123;</span><br><span class=\"line\">  var originalThing = theThing;</span><br><span class=\"line\">  var c = &apos;a&apos;</span><br><span class=\"line\">  function unused() &#123;</span><br><span class=\"line\">    if (originalThing) &#123;</span><br><span class=\"line\">      console.log(&quot;hi&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  theThing = &#123;</span><br><span class=\"line\">    longStr: new Array(1000000).join(&apos;*&apos;),</span><br><span class=\"line\">    someMethod: function () &#123;</span><br><span class=\"line\">      console.log(&apos;1111&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  originalThing = null;    //手动释放局部作用域中的变量</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(replaceThing,1000)</span><br></pre></td></tr></table></figure>\n"},{"title":"vue双向数据绑定原理","date":"2019-10-30T05:57:52.000Z","author":"胡豪","_content":"\n## 首先我们要了解Object.defineProperty()\n\n\n一、Object.defineProperty()的作用就是直接在一个对象上定义一个新属性，或者修改一个已经存在的属性\n\n1.1 属性描述符\n通过Object.defineProperty()为对象定义属性，有两种形式，且不能混合使用，分别为数据描述符，存取描述符，下面分别描述下两者的区别：\n\n数据描述符 --特有的两个属性（value,writable）\n\n```js\nlet Person = {}\nObject.defineProperty(Person, 'name', {\n   value: 'jack',\n   writable: true // 是否可以改变\n})\n```\n\n属性名 | 默认值 \n-|-\nvalue | undefined \nget | undefined \nset | undefined \nwritable | false \nenumerable | false \nconfigurable | false\n\n\n二、什么是 getter 和 setter  \ngetter 是一种获得属性值的方法，setter 是一种设置属性值的方法\ngetter 负责查询值，它不带任何参数，setter 则负责设置键值，值是以参数的形式传递，在他的函数体中，一切的 return 都是无效的\nget/set 访问器不是对象的属性，而是属性的特性，特性只有内部才用，因此在 javaScript 中不能直接访问他们，为了表示特性是内部值用两队中括号括起来表示如[[Value]]\n对象的属性又可分为对象属性和访问器属性\n\n## set/get\n\n```js\nvar person = {\n  _name: \"\",\n  get name() {\n    return this._name;\n  },\n  set name(n) {\n    this._name = n;\n  }\n};\n\n// 测试\nperson.name; // 输出 --> ''\nperson.name = \"xiaoming\";\nperson.name; // 输出 --> xiaoming\n```\n\n## 存取描述符 --是由一对 getter、setter 函数功能来描述的属性\nget：一个给属性提供getter的方法，如果没有getter则为undefined。该方法返回值被用作属性值。默认为undefined。\nset：一个给属性提供setter的方法，如果没有setter则为undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认值为undefined。 \n```\nvar person = function() {\n    var _name = ' ';\n    var obj = {};\n    Object.defineProperty(obj, 'name', {\n        configurable: true,\n        enumerable: true,\n        get: function() {\n            return _name;\n        },\n        set: function(n) {\n            _name = n;\n        }\n    })\n    return obj;\n}();\nperson.name = \"xiaoming\";\nperson.name // 输出 --> xiaoming\n```\n\n## vue 的双项数据绑定原理\n\nvue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。我们先来看 Object.defineProperty()这个方法：\n\n```js\nvar obj = {};\nObject.defineProperty(obj, \"name\", {\n  get: function() {\n    console.log(\"我被获取了\");\n    return val;\n  },\n  set: function(newVal) {\n    console.log(\"我被设置了\");\n  }\n});\nobj.name = \"fei\"; //在给obj设置name属性的时候，触发了set这个方法\nvar val = obj.name; //在得到obj的name属性，会触发get方法\n```\n\nvue 是通过数据劫持的方式来做数据绑定的，其中最核心的方法便是通过 Object.defineProperty()来实现对属性的劫持，那么在设置或者获取的时候我们就可以在 get 或者 set 方法里假如其他的触发函数，达到监听数据变动的目的，无疑这个方法是本文中最重要、最基础的内容之一。\n\n## 实现最简单的双向绑定\n\n通过 Object.defineProperty()可以实现数据劫持，是的属性在赋值的时候触发 set 方法\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"demo\"></div>\n    <input type=\"text\" id=\"inp\">\n    <script>\n        var obj  = {};\n        var demo = document.querySelector('#demo')\n        var inp = document.querySelector('#inp')\n        Object.defineProperty(obj, 'name', {\n            get: function() {\n                return val;\n            },\n            set: function (newVal) {//当该属性被赋值的时候触发\n                inp.value = newVal;\n                demo.innerHTML = newVal;\n            }\n        })\n        inp.addEventListener('input', function(e) {\n            // 给obj的name属性赋值，进而触发该属性的set方法\n            obj.name = e.target.value;\n        });\n        obj.name = 'changme';//在给obj设置name属性的时候，触发了set这个方法\n    </script>\n</body>\n</html>\n```\n\n## vue 代码实现\n\nobserver 实现，主要是给每个 vue 的属性用 Object.defineProperty()，代码如下\n\n```js\nfunction defineReactive(obj, key, val) {\n  var dep = new Dep();\n  Object.defineProperty(obj, key, {\n    get: function() {\n      //添加订阅者watcher到主题对象Dep\n      if (Dep.target) {\n        // JS的浏览器单线程特性，保证这个全局变量在同一时间内，只会有同一个监听器使用\n        dep.addSub(Dep.target);\n      }\n      return val;\n    },\n    set: function(newVal) {\n      if (newVal === val) return;\n      val = newVal;\n      console.log(val);\n      // 作为发布者发出通知\n      dep.notify(); //通知后dep会循环调用各自的update方法更新视图\n    }\n  });\n}\nfunction observe(obj, vm) {\n  Object.keys(obj).forEach(function(key) {\n    defineReactive(vm, key, obj[key]);\n  });\n}\n``` ","source":"_posts/vue双向数据绑定原理.md","raw":"---\ntitle: vue双向数据绑定原理\ndate: 2019-10-30 13:57:52\nauthor: 胡豪\ncategories: \n  - vue\ntags:\n  - vue \n---\n\n## 首先我们要了解Object.defineProperty()\n\n\n一、Object.defineProperty()的作用就是直接在一个对象上定义一个新属性，或者修改一个已经存在的属性\n\n1.1 属性描述符\n通过Object.defineProperty()为对象定义属性，有两种形式，且不能混合使用，分别为数据描述符，存取描述符，下面分别描述下两者的区别：\n\n数据描述符 --特有的两个属性（value,writable）\n\n```js\nlet Person = {}\nObject.defineProperty(Person, 'name', {\n   value: 'jack',\n   writable: true // 是否可以改变\n})\n```\n\n属性名 | 默认值 \n-|-\nvalue | undefined \nget | undefined \nset | undefined \nwritable | false \nenumerable | false \nconfigurable | false\n\n\n二、什么是 getter 和 setter  \ngetter 是一种获得属性值的方法，setter 是一种设置属性值的方法\ngetter 负责查询值，它不带任何参数，setter 则负责设置键值，值是以参数的形式传递，在他的函数体中，一切的 return 都是无效的\nget/set 访问器不是对象的属性，而是属性的特性，特性只有内部才用，因此在 javaScript 中不能直接访问他们，为了表示特性是内部值用两队中括号括起来表示如[[Value]]\n对象的属性又可分为对象属性和访问器属性\n\n## set/get\n\n```js\nvar person = {\n  _name: \"\",\n  get name() {\n    return this._name;\n  },\n  set name(n) {\n    this._name = n;\n  }\n};\n\n// 测试\nperson.name; // 输出 --> ''\nperson.name = \"xiaoming\";\nperson.name; // 输出 --> xiaoming\n```\n\n## 存取描述符 --是由一对 getter、setter 函数功能来描述的属性\nget：一个给属性提供getter的方法，如果没有getter则为undefined。该方法返回值被用作属性值。默认为undefined。\nset：一个给属性提供setter的方法，如果没有setter则为undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认值为undefined。 \n```\nvar person = function() {\n    var _name = ' ';\n    var obj = {};\n    Object.defineProperty(obj, 'name', {\n        configurable: true,\n        enumerable: true,\n        get: function() {\n            return _name;\n        },\n        set: function(n) {\n            _name = n;\n        }\n    })\n    return obj;\n}();\nperson.name = \"xiaoming\";\nperson.name // 输出 --> xiaoming\n```\n\n## vue 的双项数据绑定原理\n\nvue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。我们先来看 Object.defineProperty()这个方法：\n\n```js\nvar obj = {};\nObject.defineProperty(obj, \"name\", {\n  get: function() {\n    console.log(\"我被获取了\");\n    return val;\n  },\n  set: function(newVal) {\n    console.log(\"我被设置了\");\n  }\n});\nobj.name = \"fei\"; //在给obj设置name属性的时候，触发了set这个方法\nvar val = obj.name; //在得到obj的name属性，会触发get方法\n```\n\nvue 是通过数据劫持的方式来做数据绑定的，其中最核心的方法便是通过 Object.defineProperty()来实现对属性的劫持，那么在设置或者获取的时候我们就可以在 get 或者 set 方法里假如其他的触发函数，达到监听数据变动的目的，无疑这个方法是本文中最重要、最基础的内容之一。\n\n## 实现最简单的双向绑定\n\n通过 Object.defineProperty()可以实现数据劫持，是的属性在赋值的时候触发 set 方法\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"demo\"></div>\n    <input type=\"text\" id=\"inp\">\n    <script>\n        var obj  = {};\n        var demo = document.querySelector('#demo')\n        var inp = document.querySelector('#inp')\n        Object.defineProperty(obj, 'name', {\n            get: function() {\n                return val;\n            },\n            set: function (newVal) {//当该属性被赋值的时候触发\n                inp.value = newVal;\n                demo.innerHTML = newVal;\n            }\n        })\n        inp.addEventListener('input', function(e) {\n            // 给obj的name属性赋值，进而触发该属性的set方法\n            obj.name = e.target.value;\n        });\n        obj.name = 'changme';//在给obj设置name属性的时候，触发了set这个方法\n    </script>\n</body>\n</html>\n```\n\n## vue 代码实现\n\nobserver 实现，主要是给每个 vue 的属性用 Object.defineProperty()，代码如下\n\n```js\nfunction defineReactive(obj, key, val) {\n  var dep = new Dep();\n  Object.defineProperty(obj, key, {\n    get: function() {\n      //添加订阅者watcher到主题对象Dep\n      if (Dep.target) {\n        // JS的浏览器单线程特性，保证这个全局变量在同一时间内，只会有同一个监听器使用\n        dep.addSub(Dep.target);\n      }\n      return val;\n    },\n    set: function(newVal) {\n      if (newVal === val) return;\n      val = newVal;\n      console.log(val);\n      // 作为发布者发出通知\n      dep.notify(); //通知后dep会循环调用各自的update方法更新视图\n    }\n  });\n}\nfunction observe(obj, vm) {\n  Object.keys(obj).forEach(function(key) {\n    defineReactive(vm, key, obj[key]);\n  });\n}\n``` ","slug":"vue双向数据绑定原理","published":1,"updated":"2021-03-29T05:44:19.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hyq3000yy4tzgfiijw5z","content":"<h2 id=\"首先我们要了解Object-defineProperty\"><a href=\"#首先我们要了解Object-defineProperty\" class=\"headerlink\" title=\"首先我们要了解Object.defineProperty()\"></a>首先我们要了解Object.defineProperty()</h2><p>一、Object.defineProperty()的作用就是直接在一个对象上定义一个新属性，或者修改一个已经存在的属性</p>\n<p>1.1 属性描述符<br>通过Object.defineProperty()为对象定义属性，有两种形式，且不能混合使用，分别为数据描述符，存取描述符，下面分别描述下两者的区别：</p>\n<p>数据描述符 –特有的两个属性（value,writable）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Person = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Person, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">   value: <span class=\"string\">'jack'</span>,</span><br><span class=\"line\">   writable: <span class=\"literal\">true</span> <span class=\"comment\">// 是否可以改变</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>默认值 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>undefined </td>\n</tr>\n<tr>\n<td>get</td>\n<td>undefined </td>\n</tr>\n<tr>\n<td>set</td>\n<td>undefined </td>\n</tr>\n<tr>\n<td>writable</td>\n<td>false </td>\n</tr>\n<tr>\n<td>enumerable</td>\n<td>false </td>\n</tr>\n<tr>\n<td>configurable</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<p>二、什么是 getter 和 setter<br>getter 是一种获得属性值的方法，setter 是一种设置属性值的方法<br>getter 负责查询值，它不带任何参数，setter 则负责设置键值，值是以参数的形式传递，在他的函数体中，一切的 return 都是无效的<br>get/set 访问器不是对象的属性，而是属性的特性，特性只有内部才用，因此在 javaScript 中不能直接访问他们，为了表示特性是内部值用两队中括号括起来表示如[[Value]]<br>对象的属性又可分为对象属性和访问器属性</p>\n<h2 id=\"set-get\"><a href=\"#set-get\" class=\"headerlink\" title=\"set/get\"></a>set/get</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  _name: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"keyword\">get</span> name() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._name;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span> name(n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._name = n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\">person.name; <span class=\"comment\">// 输出 --&gt; ''</span></span><br><span class=\"line\">person.name = <span class=\"string\">\"xiaoming\"</span>;</span><br><span class=\"line\">person.name; <span class=\"comment\">// 输出 --&gt; xiaoming</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"存取描述符-–是由一对-getter、setter-函数功能来描述的属性\"><a href=\"#存取描述符-–是由一对-getter、setter-函数功能来描述的属性\" class=\"headerlink\" title=\"存取描述符 –是由一对 getter、setter 函数功能来描述的属性\"></a>存取描述符 –是由一对 getter、setter 函数功能来描述的属性</h2><p>get：一个给属性提供getter的方法，如果没有getter则为undefined。该方法返回值被用作属性值。默认为undefined。<br>set：一个给属性提供setter的方法，如果没有setter则为undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认值为undefined。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = function() &#123;</span><br><span class=\"line\">    var _name = &apos; &apos;;</span><br><span class=\"line\">    var obj = &#123;&#125;;</span><br><span class=\"line\">    Object.defineProperty(obj, &apos;name&apos;, &#123;</span><br><span class=\"line\">        configurable: true,</span><br><span class=\"line\">        enumerable: true,</span><br><span class=\"line\">        get: function() &#123;</span><br><span class=\"line\">            return _name;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: function(n) &#123;</span><br><span class=\"line\">            _name = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return obj;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\">person.name = &quot;xiaoming&quot;;</span><br><span class=\"line\">person.name // 输出 --&gt; xiaoming</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"vue-的双项数据绑定原理\"><a href=\"#vue-的双项数据绑定原理\" class=\"headerlink\" title=\"vue 的双项数据绑定原理\"></a>vue 的双项数据绑定原理</h2><p>vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。我们先来看 Object.defineProperty()这个方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"name\"</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我被获取了\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(newVal) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我被设置了\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">obj.name = <span class=\"string\">\"fei\"</span>; <span class=\"comment\">//在给obj设置name属性的时候，触发了set这个方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> val = obj.name; <span class=\"comment\">//在得到obj的name属性，会触发get方法</span></span><br></pre></td></tr></table></figure>\n<p>vue 是通过数据劫持的方式来做数据绑定的，其中最核心的方法便是通过 Object.defineProperty()来实现对属性的劫持，那么在设置或者获取的时候我们就可以在 get 或者 set 方法里假如其他的触发函数，达到监听数据变动的目的，无疑这个方法是本文中最重要、最基础的内容之一。</p>\n<h2 id=\"实现最简单的双向绑定\"><a href=\"#实现最简单的双向绑定\" class=\"headerlink\" title=\"实现最简单的双向绑定\"></a>实现最简单的双向绑定</h2><p>通过 Object.defineProperty()可以实现数据劫持，是的属性在赋值的时候触发 set 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"demo\"</span>&gt;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;input type=\"text\" id=\"inp\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        var obj  = &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">        var demo = document.querySelector('#demo')</span></span><br><span class=\"line\"><span class=\"regexp\">        var inp = document.querySelector('#inp')</span></span><br><span class=\"line\"><span class=\"regexp\">        Object.defineProperty(obj, 'name', &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            get: function() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                return val;</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">            set: function (newVal) &#123;/</span><span class=\"regexp\">/当该属性被赋值的时候触发</span></span><br><span class=\"line\"><span class=\"regexp\">                inp.value = newVal;</span></span><br><span class=\"line\"><span class=\"regexp\">                demo.innerHTML = newVal;</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">        inp.addEventListener('input', function(e) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            /</span><span class=\"regexp\">/ 给obj的name属性赋值，进而触发该属性的set方法</span></span><br><span class=\"line\"><span class=\"regexp\">            obj.name = e.target.value;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">        obj.name = 'changme';/</span><span class=\"regexp\">/在给obj设置name属性的时候，触发了set这个方法</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>script&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"vue-代码实现\"><a href=\"#vue-代码实现\" class=\"headerlink\" title=\"vue 代码实现\"></a>vue 代码实现</h2><p>observer 实现，主要是给每个 vue 的属性用 Object.defineProperty()，代码如下</p>\n<pre><code class=\"js\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">obj, key, val</span>) </span>{\n  <span class=\"keyword\">var</span> dep = <span class=\"keyword\">new</span> Dep();\n  <span class=\"built_in\">Object</span>.defineProperty(obj, key, {\n    <span class=\"keyword\">get</span>: function() {\n      <span class=\"comment\">//添加订阅者watcher到主题对象Dep</span>\n      <span class=\"keyword\">if</span> (Dep.target) {\n        <span class=\"comment\">// JS的浏览器单线程特性，保证这个全局变量在同一时间内，只会有同一个监听器使用</span>\n        dep.addSub(Dep.target);\n      }\n      <span class=\"keyword\">return</span> val;\n    },\n    <span class=\"keyword\">set</span>: function(newVal) {\n      <span class=\"keyword\">if</span> (newVal === val) <span class=\"keyword\">return</span>;\n      val = newVal;\n      <span class=\"built_in\">console</span>.log(val);\n      <span class=\"comment\">// 作为发布者发出通知</span>\n      dep.notify(); <span class=\"comment\">//通知后dep会循环调用各自的update方法更新视图</span>\n    }\n  });\n}\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">obj, vm</span>) </span>{\n  <span class=\"built_in\">Object</span>.keys(obj).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>{\n    defineReactive(vm, key, obj[key]);\n  });\n}\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"首先我们要了解Object-defineProperty\"><a href=\"#首先我们要了解Object-defineProperty\" class=\"headerlink\" title=\"首先我们要了解Object.defineProperty()\"></a>首先我们要了解Object.defineProperty()</h2><p>一、Object.defineProperty()的作用就是直接在一个对象上定义一个新属性，或者修改一个已经存在的属性</p>\n<p>1.1 属性描述符<br>通过Object.defineProperty()为对象定义属性，有两种形式，且不能混合使用，分别为数据描述符，存取描述符，下面分别描述下两者的区别：</p>\n<p>数据描述符 –特有的两个属性（value,writable）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Person = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Person, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">   value: <span class=\"string\">'jack'</span>,</span><br><span class=\"line\">   writable: <span class=\"literal\">true</span> <span class=\"comment\">// 是否可以改变</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>默认值 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>undefined </td>\n</tr>\n<tr>\n<td>get</td>\n<td>undefined </td>\n</tr>\n<tr>\n<td>set</td>\n<td>undefined </td>\n</tr>\n<tr>\n<td>writable</td>\n<td>false </td>\n</tr>\n<tr>\n<td>enumerable</td>\n<td>false </td>\n</tr>\n<tr>\n<td>configurable</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<p>二、什么是 getter 和 setter<br>getter 是一种获得属性值的方法，setter 是一种设置属性值的方法<br>getter 负责查询值，它不带任何参数，setter 则负责设置键值，值是以参数的形式传递，在他的函数体中，一切的 return 都是无效的<br>get/set 访问器不是对象的属性，而是属性的特性，特性只有内部才用，因此在 javaScript 中不能直接访问他们，为了表示特性是内部值用两队中括号括起来表示如[[Value]]<br>对象的属性又可分为对象属性和访问器属性</p>\n<h2 id=\"set-get\"><a href=\"#set-get\" class=\"headerlink\" title=\"set/get\"></a>set/get</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  _name: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"keyword\">get</span> name() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._name;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span> name(n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._name = n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\">person.name; <span class=\"comment\">// 输出 --&gt; ''</span></span><br><span class=\"line\">person.name = <span class=\"string\">\"xiaoming\"</span>;</span><br><span class=\"line\">person.name; <span class=\"comment\">// 输出 --&gt; xiaoming</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"存取描述符-–是由一对-getter、setter-函数功能来描述的属性\"><a href=\"#存取描述符-–是由一对-getter、setter-函数功能来描述的属性\" class=\"headerlink\" title=\"存取描述符 –是由一对 getter、setter 函数功能来描述的属性\"></a>存取描述符 –是由一对 getter、setter 函数功能来描述的属性</h2><p>get：一个给属性提供getter的方法，如果没有getter则为undefined。该方法返回值被用作属性值。默认为undefined。<br>set：一个给属性提供setter的方法，如果没有setter则为undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认值为undefined。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = function() &#123;</span><br><span class=\"line\">    var _name = &apos; &apos;;</span><br><span class=\"line\">    var obj = &#123;&#125;;</span><br><span class=\"line\">    Object.defineProperty(obj, &apos;name&apos;, &#123;</span><br><span class=\"line\">        configurable: true,</span><br><span class=\"line\">        enumerable: true,</span><br><span class=\"line\">        get: function() &#123;</span><br><span class=\"line\">            return _name;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: function(n) &#123;</span><br><span class=\"line\">            _name = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return obj;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\">person.name = &quot;xiaoming&quot;;</span><br><span class=\"line\">person.name // 输出 --&gt; xiaoming</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"vue-的双项数据绑定原理\"><a href=\"#vue-的双项数据绑定原理\" class=\"headerlink\" title=\"vue 的双项数据绑定原理\"></a>vue 的双项数据绑定原理</h2><p>vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。我们先来看 Object.defineProperty()这个方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"name\"</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我被获取了\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(newVal) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我被设置了\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">obj.name = <span class=\"string\">\"fei\"</span>; <span class=\"comment\">//在给obj设置name属性的时候，触发了set这个方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> val = obj.name; <span class=\"comment\">//在得到obj的name属性，会触发get方法</span></span><br></pre></td></tr></table></figure>\n<p>vue 是通过数据劫持的方式来做数据绑定的，其中最核心的方法便是通过 Object.defineProperty()来实现对属性的劫持，那么在设置或者获取的时候我们就可以在 get 或者 set 方法里假如其他的触发函数，达到监听数据变动的目的，无疑这个方法是本文中最重要、最基础的内容之一。</p>\n<h2 id=\"实现最简单的双向绑定\"><a href=\"#实现最简单的双向绑定\" class=\"headerlink\" title=\"实现最简单的双向绑定\"></a>实现最简单的双向绑定</h2><p>通过 Object.defineProperty()可以实现数据劫持，是的属性在赋值的时候触发 set 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">\"en\"</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"demo\"</span>&gt;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;input type=\"text\" id=\"inp\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        var obj  = &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\">        var demo = document.querySelector('#demo')</span></span><br><span class=\"line\"><span class=\"regexp\">        var inp = document.querySelector('#inp')</span></span><br><span class=\"line\"><span class=\"regexp\">        Object.defineProperty(obj, 'name', &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            get: function() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                return val;</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;,</span></span><br><span class=\"line\"><span class=\"regexp\">            set: function (newVal) &#123;/</span><span class=\"regexp\">/当该属性被赋值的时候触发</span></span><br><span class=\"line\"><span class=\"regexp\">                inp.value = newVal;</span></span><br><span class=\"line\"><span class=\"regexp\">                demo.innerHTML = newVal;</span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">        inp.addEventListener('input', function(e) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            /</span><span class=\"regexp\">/ 给obj的name属性赋值，进而触发该属性的set方法</span></span><br><span class=\"line\"><span class=\"regexp\">            obj.name = e.target.value;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">        obj.name = 'changme';/</span><span class=\"regexp\">/在给obj设置name属性的时候，触发了set这个方法</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>script&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"vue-代码实现\"><a href=\"#vue-代码实现\" class=\"headerlink\" title=\"vue 代码实现\"></a>vue 代码实现</h2><p>observer 实现，主要是给每个 vue 的属性用 Object.defineProperty()，代码如下</p>\n<pre><code class=\"js\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">obj, key, val</span>) </span>{\n  <span class=\"keyword\">var</span> dep = <span class=\"keyword\">new</span> Dep();\n  <span class=\"built_in\">Object</span>.defineProperty(obj, key, {\n    <span class=\"keyword\">get</span>: function() {\n      <span class=\"comment\">//添加订阅者watcher到主题对象Dep</span>\n      <span class=\"keyword\">if</span> (Dep.target) {\n        <span class=\"comment\">// JS的浏览器单线程特性，保证这个全局变量在同一时间内，只会有同一个监听器使用</span>\n        dep.addSub(Dep.target);\n      }\n      <span class=\"keyword\">return</span> val;\n    },\n    <span class=\"keyword\">set</span>: function(newVal) {\n      <span class=\"keyword\">if</span> (newVal === val) <span class=\"keyword\">return</span>;\n      val = newVal;\n      <span class=\"built_in\">console</span>.log(val);\n      <span class=\"comment\">// 作为发布者发出通知</span>\n      dep.notify(); <span class=\"comment\">//通知后dep会循环调用各自的update方法更新视图</span>\n    }\n  });\n}\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">obj, vm</span>) </span>{\n  <span class=\"built_in\">Object</span>.keys(obj).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>{\n    defineReactive(vm, key, obj[key]);\n  });\n}\n</code></pre>\n"},{"title":"win10安装mysql数据库","date":"2019-11-28T06:51:58.000Z","author":"胡豪","_content":"\n## Windows安装mysql数据库服务\n\n### 一\n官网上下载压缩包，并解压至本地磁盘\n\n\n打开我们刚刚解压的文件夹，在bin目录下，创建一个my.ini文件，内容如下：\n```dos\n[client]\n# 设置mysql客户端默认字符集\ndefault-character-set=utf8\n \n[mysqld]\n# 设置3306端口\nport = 3306\n# 设置mysql的安装目录\nbasedir=C:\\\\mysql\\\\mysql-8.0.11\n# 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错\n# datadir=C:\\\\mysql\\\\mysql-8.0.11\\\\sqldata\n# 允许最大连接数\nmax_connections=20\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n```\n\n\n### 二\n\n先补充常用Dos命令\n```1 dir\n无参数：查看当前所在目录的文件和文件夹。\n/s：查看当前目录已经其所有子目录的文件和文件夹。\n/a：查看包括隐含文件的所有文件。\n/ah：只显示出隐含文件。\n/w：以紧凑方式（一行显示5个文件）显示文件和文件夹。\n/p：以分页方式（显示一页之后会自动暂停）显示。\n|more：前面那个符号是“\\”上面的那个，叫做重定向符号，就是把一个\n命令的结果输出为另外一个命令的参数。more也是一个命令，dir /w |more\n得到的结果和dir /w /p的结果是一样的。\n其他的参数大家可以用：dir/?查看。\n2 cd\ncd 目录名：进入特定的目录。如果看到有个目录显示为：abcdef ghi 就\n输入：cdabcdef.ghi进入该目录。\ncd\\ 退回到根目录。\ncd..退回到上一级目录。\n3 md rd\nmd 目录名：建立特定的文件夹。 （dos下面习惯叫目录，win下面习惯叫文\n件夹。呵呵！）\nrd 目录名：删除特定的文件夹。\n4 cls\n清除屏幕。\n5 copy\ncopy 路径\\文件名 路径\\文件名 ：把一个文件拷贝到另一个地方。\n6 move\nmove 路径\\文件名 路径\\文件名 ：把一个文件移动（就是剪切+复制）到另\n一个地方。\n```\n\n先以管理员身份运行cmd，进入mysql安装路径下bin文件夹目录\n\n进入目录后执行以下命令初始化数据库：\n```\nmysqld --initialize --console     # 初始化数据库\n```\n![QQ浏览器截图20191202134950](http://tva1.sinaimg.cn/large/b535b7d3ly1g9iggq8xwrj20x702l0sn.jpg)\n运行之后会生成第一次初始化mysql数据库root用户随机生成的密码，红色框中的字符串为登录root用户使用的密码，请注意该密码登录时一定要加上双引号，不然无法登录成功。\n\n\n目录下运行 : \n```\nmysqld --install     # mysql安装命令\n```  \n\n若报错，信息如下：Install/Remove of the Service Denied  \n请正确选择“用管理员身份打开”打开cmd.exe程序\n\n出现信息如下\n```mysqld : 无法将“mysqld”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径\n正确，然后再试一次。\n所在位置 行:1 字符: 1\n+ mysqld install\n+ ~~~~~~\n    + CategoryInfo          : ObjectNotFound: (mysqld:String) [], CommandNotFoundException\n    + FullyQualifiedErrorId : CommandNotFoundException\n```\n请使用`.\\mysqld --install`命令解决\n\n出现信息如： Service successfully installed. 则说明安装成功\n\n\n启动mysql服务\n```\nnet  start  mysql    # 启动mysql服务\n```\n\n\n登录mysql\n```\nmysql -uroot -p //回车\n输入密码：\"w3sYN%WxSfsH\"\n# 登录mysql \n# 其格式为：mysql   -u 用户名  -p  密码\n```\n\n![QQ浏览器截图20191202135128](http://tva1.sinaimg.cn/large/b535b7d3ly1g9iggq50zyj20gh06e3yg.jpg)","source":"_posts/win10安装mysql数据库.md","raw":"---\ntitle: win10安装mysql数据库\ndate: 2019-11-28 14:51:58\nauthor: 胡豪\ncategories:\n  - mysql\ntags:\n  - mysql\n---\n\n## Windows安装mysql数据库服务\n\n### 一\n官网上下载压缩包，并解压至本地磁盘\n\n\n打开我们刚刚解压的文件夹，在bin目录下，创建一个my.ini文件，内容如下：\n```dos\n[client]\n# 设置mysql客户端默认字符集\ndefault-character-set=utf8\n \n[mysqld]\n# 设置3306端口\nport = 3306\n# 设置mysql的安装目录\nbasedir=C:\\\\mysql\\\\mysql-8.0.11\n# 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错\n# datadir=C:\\\\mysql\\\\mysql-8.0.11\\\\sqldata\n# 允许最大连接数\nmax_connections=20\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server=utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n```\n\n\n### 二\n\n先补充常用Dos命令\n```1 dir\n无参数：查看当前所在目录的文件和文件夹。\n/s：查看当前目录已经其所有子目录的文件和文件夹。\n/a：查看包括隐含文件的所有文件。\n/ah：只显示出隐含文件。\n/w：以紧凑方式（一行显示5个文件）显示文件和文件夹。\n/p：以分页方式（显示一页之后会自动暂停）显示。\n|more：前面那个符号是“\\”上面的那个，叫做重定向符号，就是把一个\n命令的结果输出为另外一个命令的参数。more也是一个命令，dir /w |more\n得到的结果和dir /w /p的结果是一样的。\n其他的参数大家可以用：dir/?查看。\n2 cd\ncd 目录名：进入特定的目录。如果看到有个目录显示为：abcdef ghi 就\n输入：cdabcdef.ghi进入该目录。\ncd\\ 退回到根目录。\ncd..退回到上一级目录。\n3 md rd\nmd 目录名：建立特定的文件夹。 （dos下面习惯叫目录，win下面习惯叫文\n件夹。呵呵！）\nrd 目录名：删除特定的文件夹。\n4 cls\n清除屏幕。\n5 copy\ncopy 路径\\文件名 路径\\文件名 ：把一个文件拷贝到另一个地方。\n6 move\nmove 路径\\文件名 路径\\文件名 ：把一个文件移动（就是剪切+复制）到另\n一个地方。\n```\n\n先以管理员身份运行cmd，进入mysql安装路径下bin文件夹目录\n\n进入目录后执行以下命令初始化数据库：\n```\nmysqld --initialize --console     # 初始化数据库\n```\n![QQ浏览器截图20191202134950](http://tva1.sinaimg.cn/large/b535b7d3ly1g9iggq8xwrj20x702l0sn.jpg)\n运行之后会生成第一次初始化mysql数据库root用户随机生成的密码，红色框中的字符串为登录root用户使用的密码，请注意该密码登录时一定要加上双引号，不然无法登录成功。\n\n\n目录下运行 : \n```\nmysqld --install     # mysql安装命令\n```  \n\n若报错，信息如下：Install/Remove of the Service Denied  \n请正确选择“用管理员身份打开”打开cmd.exe程序\n\n出现信息如下\n```mysqld : 无法将“mysqld”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径\n正确，然后再试一次。\n所在位置 行:1 字符: 1\n+ mysqld install\n+ ~~~~~~\n    + CategoryInfo          : ObjectNotFound: (mysqld:String) [], CommandNotFoundException\n    + FullyQualifiedErrorId : CommandNotFoundException\n```\n请使用`.\\mysqld --install`命令解决\n\n出现信息如： Service successfully installed. 则说明安装成功\n\n\n启动mysql服务\n```\nnet  start  mysql    # 启动mysql服务\n```\n\n\n登录mysql\n```\nmysql -uroot -p //回车\n输入密码：\"w3sYN%WxSfsH\"\n# 登录mysql \n# 其格式为：mysql   -u 用户名  -p  密码\n```\n\n![QQ浏览器截图20191202135128](http://tva1.sinaimg.cn/large/b535b7d3ly1g9iggq50zyj20gh06e3yg.jpg)","slug":"win10安装mysql数据库","published":1,"updated":"2019-12-02T08:29:53.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hyq50011y4tz0ga444w6","content":"<h2 id=\"Windows安装mysql数据库服务\"><a href=\"#Windows安装mysql数据库服务\" class=\"headerlink\" title=\"Windows安装mysql数据库服务\"></a>Windows安装mysql数据库服务</h2><h3 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h3><p>官网上下载压缩包，并解压至本地磁盘</p>\n<p>打开我们刚刚解压的文件夹，在bin目录下，创建一个my.ini文件，内容如下：<br><figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\"># 设置mysql客户端默认字符集</span><br><span class=\"line\">default-character-<span class=\"built_in\">set</span>=utf8</span><br><span class=\"line\"> </span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"># 设置<span class=\"number\">3306</span>端口</span><br><span class=\"line\">port = <span class=\"number\">3306</span></span><br><span class=\"line\"># 设置mysql的安装目录</span><br><span class=\"line\">basedir=C:\\\\mysql\\\\mysql-<span class=\"number\">8</span>.<span class=\"number\">0</span>.<span class=\"number\">11</span></span><br><span class=\"line\"># 设置 mysql数据库的数据的存放目录，MySQL <span class=\"number\">8</span>+ 不需要以下配置，系统自己生成即可，否则有可能报错</span><br><span class=\"line\"># datadir=C:\\\\mysql\\\\mysql-<span class=\"number\">8</span>.<span class=\"number\">0</span>.<span class=\"number\">11</span>\\\\sqldata</span><br><span class=\"line\"># 允许最大连接数</span><br><span class=\"line\">max_connections=<span class=\"number\">20</span></span><br><span class=\"line\"># 服务端使用的字符集默认为<span class=\"number\">8</span>比特编码的latin1字符集</span><br><span class=\"line\">character-<span class=\"built_in\">set</span>-server=utf8</span><br><span class=\"line\"># 创建新表时将使用的默认存储引擎</span><br><span class=\"line\">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h3><p>先补充常用Dos命令<br><figure class=\"highlight plain\"><figcaption><span>dir</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">无参数：查看当前所在目录的文件和文件夹。</span><br><span class=\"line\">/s：查看当前目录已经其所有子目录的文件和文件夹。</span><br><span class=\"line\">/a：查看包括隐含文件的所有文件。</span><br><span class=\"line\">/ah：只显示出隐含文件。</span><br><span class=\"line\">/w：以紧凑方式（一行显示5个文件）显示文件和文件夹。</span><br><span class=\"line\">/p：以分页方式（显示一页之后会自动暂停）显示。</span><br><span class=\"line\">|more：前面那个符号是“\\”上面的那个，叫做重定向符号，就是把一个</span><br><span class=\"line\">命令的结果输出为另外一个命令的参数。more也是一个命令，dir /w |more</span><br><span class=\"line\">得到的结果和dir /w /p的结果是一样的。</span><br><span class=\"line\">其他的参数大家可以用：dir/?查看。</span><br><span class=\"line\">2 cd</span><br><span class=\"line\">cd 目录名：进入特定的目录。如果看到有个目录显示为：abcdef ghi 就</span><br><span class=\"line\">输入：cdabcdef.ghi进入该目录。</span><br><span class=\"line\">cd\\ 退回到根目录。</span><br><span class=\"line\">cd..退回到上一级目录。</span><br><span class=\"line\">3 md rd</span><br><span class=\"line\">md 目录名：建立特定的文件夹。 （dos下面习惯叫目录，win下面习惯叫文</span><br><span class=\"line\">件夹。呵呵！）</span><br><span class=\"line\">rd 目录名：删除特定的文件夹。</span><br><span class=\"line\">4 cls</span><br><span class=\"line\">清除屏幕。</span><br><span class=\"line\">5 copy</span><br><span class=\"line\">copy 路径\\文件名 路径\\文件名 ：把一个文件拷贝到另一个地方。</span><br><span class=\"line\">6 move</span><br><span class=\"line\">move 路径\\文件名 路径\\文件名 ：把一个文件移动（就是剪切+复制）到另</span><br><span class=\"line\">一个地方。</span><br></pre></td></tr></table></figure></p>\n<p>先以管理员身份运行cmd，进入mysql安装路径下bin文件夹目录</p>\n<p>进入目录后执行以下命令初始化数据库：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --initialize --console     # 初始化数据库</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://tva1.sinaimg.cn/large/b535b7d3ly1g9iggq8xwrj20x702l0sn.jpg\" alt=\"QQ浏览器截图20191202134950\"><br>运行之后会生成第一次初始化mysql数据库root用户随机生成的密码，红色框中的字符串为登录root用户使用的密码，请注意该密码登录时一定要加上双引号，不然无法登录成功。</p>\n<p>目录下运行 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --install     # mysql安装命令</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">若报错，信息如下：Install/Remove of the Service Denied  </span><br><span class=\"line\">请正确选择“用管理员身份打开”打开cmd.exe程序</span><br><span class=\"line\"></span><br><span class=\"line\">出现信息如下</span><br><span class=\"line\">```mysqld : 无法将“mysqld”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径</span><br><span class=\"line\">正确，然后再试一次。</span><br><span class=\"line\">所在位置 行:1 字符: 1</span><br><span class=\"line\">+ mysqld install</span><br><span class=\"line\">+ ~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : ObjectNotFound: (mysqld:String) [], CommandNotFoundException</span><br><span class=\"line\">    + FullyQualifiedErrorId : CommandNotFoundException</span><br></pre></td></tr></table></figure></p>\n<p>请使用<code>.\\mysqld --install</code>命令解决</p>\n<p>出现信息如： Service successfully installed. 则说明安装成功</p>\n<p>启动mysql服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net  start  mysql    # 启动mysql服务</span><br></pre></td></tr></table></figure></p>\n<p>登录mysql<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p //回车</span><br><span class=\"line\">输入密码：&quot;w3sYN%WxSfsH&quot;</span><br><span class=\"line\"># 登录mysql </span><br><span class=\"line\"># 其格式为：mysql   -u 用户名  -p  密码</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://tva1.sinaimg.cn/large/b535b7d3ly1g9iggq50zyj20gh06e3yg.jpg\" alt=\"QQ浏览器截图20191202135128\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Windows安装mysql数据库服务\"><a href=\"#Windows安装mysql数据库服务\" class=\"headerlink\" title=\"Windows安装mysql数据库服务\"></a>Windows安装mysql数据库服务</h2><h3 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h3><p>官网上下载压缩包，并解压至本地磁盘</p>\n<p>打开我们刚刚解压的文件夹，在bin目录下，创建一个my.ini文件，内容如下：<br><figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\"># 设置mysql客户端默认字符集</span><br><span class=\"line\">default-character-<span class=\"built_in\">set</span>=utf8</span><br><span class=\"line\"> </span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\"># 设置<span class=\"number\">3306</span>端口</span><br><span class=\"line\">port = <span class=\"number\">3306</span></span><br><span class=\"line\"># 设置mysql的安装目录</span><br><span class=\"line\">basedir=C:\\\\mysql\\\\mysql-<span class=\"number\">8</span>.<span class=\"number\">0</span>.<span class=\"number\">11</span></span><br><span class=\"line\"># 设置 mysql数据库的数据的存放目录，MySQL <span class=\"number\">8</span>+ 不需要以下配置，系统自己生成即可，否则有可能报错</span><br><span class=\"line\"># datadir=C:\\\\mysql\\\\mysql-<span class=\"number\">8</span>.<span class=\"number\">0</span>.<span class=\"number\">11</span>\\\\sqldata</span><br><span class=\"line\"># 允许最大连接数</span><br><span class=\"line\">max_connections=<span class=\"number\">20</span></span><br><span class=\"line\"># 服务端使用的字符集默认为<span class=\"number\">8</span>比特编码的latin1字符集</span><br><span class=\"line\">character-<span class=\"built_in\">set</span>-server=utf8</span><br><span class=\"line\"># 创建新表时将使用的默认存储引擎</span><br><span class=\"line\">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h3><p>先补充常用Dos命令<br><figure class=\"highlight plain\"><figcaption><span>dir</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">无参数：查看当前所在目录的文件和文件夹。</span><br><span class=\"line\">/s：查看当前目录已经其所有子目录的文件和文件夹。</span><br><span class=\"line\">/a：查看包括隐含文件的所有文件。</span><br><span class=\"line\">/ah：只显示出隐含文件。</span><br><span class=\"line\">/w：以紧凑方式（一行显示5个文件）显示文件和文件夹。</span><br><span class=\"line\">/p：以分页方式（显示一页之后会自动暂停）显示。</span><br><span class=\"line\">|more：前面那个符号是“\\”上面的那个，叫做重定向符号，就是把一个</span><br><span class=\"line\">命令的结果输出为另外一个命令的参数。more也是一个命令，dir /w |more</span><br><span class=\"line\">得到的结果和dir /w /p的结果是一样的。</span><br><span class=\"line\">其他的参数大家可以用：dir/?查看。</span><br><span class=\"line\">2 cd</span><br><span class=\"line\">cd 目录名：进入特定的目录。如果看到有个目录显示为：abcdef ghi 就</span><br><span class=\"line\">输入：cdabcdef.ghi进入该目录。</span><br><span class=\"line\">cd\\ 退回到根目录。</span><br><span class=\"line\">cd..退回到上一级目录。</span><br><span class=\"line\">3 md rd</span><br><span class=\"line\">md 目录名：建立特定的文件夹。 （dos下面习惯叫目录，win下面习惯叫文</span><br><span class=\"line\">件夹。呵呵！）</span><br><span class=\"line\">rd 目录名：删除特定的文件夹。</span><br><span class=\"line\">4 cls</span><br><span class=\"line\">清除屏幕。</span><br><span class=\"line\">5 copy</span><br><span class=\"line\">copy 路径\\文件名 路径\\文件名 ：把一个文件拷贝到另一个地方。</span><br><span class=\"line\">6 move</span><br><span class=\"line\">move 路径\\文件名 路径\\文件名 ：把一个文件移动（就是剪切+复制）到另</span><br><span class=\"line\">一个地方。</span><br></pre></td></tr></table></figure></p>\n<p>先以管理员身份运行cmd，进入mysql安装路径下bin文件夹目录</p>\n<p>进入目录后执行以下命令初始化数据库：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --initialize --console     # 初始化数据库</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://tva1.sinaimg.cn/large/b535b7d3ly1g9iggq8xwrj20x702l0sn.jpg\" alt=\"QQ浏览器截图20191202134950\"><br>运行之后会生成第一次初始化mysql数据库root用户随机生成的密码，红色框中的字符串为登录root用户使用的密码，请注意该密码登录时一定要加上双引号，不然无法登录成功。</p>\n<p>目录下运行 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqld --install     # mysql安装命令</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">若报错，信息如下：Install/Remove of the Service Denied  </span><br><span class=\"line\">请正确选择“用管理员身份打开”打开cmd.exe程序</span><br><span class=\"line\"></span><br><span class=\"line\">出现信息如下</span><br><span class=\"line\">```mysqld : 无法将“mysqld”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径</span><br><span class=\"line\">正确，然后再试一次。</span><br><span class=\"line\">所在位置 行:1 字符: 1</span><br><span class=\"line\">+ mysqld install</span><br><span class=\"line\">+ ~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : ObjectNotFound: (mysqld:String) [], CommandNotFoundException</span><br><span class=\"line\">    + FullyQualifiedErrorId : CommandNotFoundException</span><br></pre></td></tr></table></figure></p>\n<p>请使用<code>.\\mysqld --install</code>命令解决</p>\n<p>出现信息如： Service successfully installed. 则说明安装成功</p>\n<p>启动mysql服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net  start  mysql    # 启动mysql服务</span><br></pre></td></tr></table></figure></p>\n<p>登录mysql<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p //回车</span><br><span class=\"line\">输入密码：&quot;w3sYN%WxSfsH&quot;</span><br><span class=\"line\"># 登录mysql </span><br><span class=\"line\"># 其格式为：mysql   -u 用户名  -p  密码</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://tva1.sinaimg.cn/large/b535b7d3ly1g9iggq50zyj20gh06e3yg.jpg\" alt=\"QQ浏览器截图20191202135128\"></p>\n"},{"title":"使用console进行 性能测试 和 计算代码运行时间","date":"2019-09-17T06:42:09.000Z","author":"胡豪","_content":"\n## 前言\n对于前端开发人员，在开发过程中经常需要监控某些表达式或变量的值，如果使用用 debugger 会显得过于笨重，最常用的方法是会将值输出到控制台上方便调试。最常用的语句就是console.log(expression)了。\n\n\n## trace\n\n`console.trace()`用来追踪函数的调用过程。\n\n在大型项目尤其是框架开发中，函数的调用轨迹可以十分复杂，`console.trace()`方法可以将函数的被调用过程清楚地输出到控制台上。\n```html\n<button onclick=\"myFunction()\">跟踪轨迹</button>\n```\n\n```js \n\nfunction myFunction() {\n  console.log(1)\n  myOtherFunction();\n  console.log(2)\n}\n\nfunction myOtherFunction() {\n  console.log(3);\n  myOtherFunction2();\n  console.log(4);\n}\nfunction myOtherFunction2() {\n  console.trace();\n}\n```\n打印结果：\n![console.trace](https://tvax4.sinaimg.cn/large/b535b7d3ly1g7ua23a4x5j20w107bjrt.jpg)\n\n\n## table\n\n使用console将对象以表格呈现\n\n可将传入的对象，或数组以表格形式输出，相比传统树形输出，这种输出方案更适合内部元素排列整齐的对象或数组，不然可能会出现很多的 undefined。\n```js\nvar Teletubbies = {\n  Tinky:{ \n    name: 'Tinky',\n    age: '3'\n  },\n  lala: {\n    name: 'lala',\n    age: '6'\n  },\n  Daisy: {\n    name: 'Daisy',\n    age: '4'\n  },\n  po:{\n    name:'po',\n    age:'5'\n  }\n};\nconsole.table(Teletubbies);\n```\n打印结果：\n![console.table](https://tvax1.sinaimg.cn/large/b535b7d3ly1g7ua23dxjij20v1064gls.jpg)\n\n\n## console.time进行时间计算\n\n计算程序的执行时间\n\n可以将成对的console.time()和console.timeEnd()之间代码的运行时间输出到控制台上\n```js\nconsole.time('计时器');\nfor (var i = 0; i < 1000; i++) {\n  for (var j = 0; j < 1000; j++) {}\n}\nconsole.timeEnd('计时器');\n```\n以上代码可以计算出`console.time('计时器')`和`console.timeEnd('计时器')`之间的代码块所需要的时间。\n\n\n## 还可以console.log配合Date对象计算\n除了console.time()还可以用console.log配合Date对象计算\n```js\nvar beginTime = +new Date();\n  for (var i = 0; i < 1000; i++) {\n    for (var j = 0; j < 1000; j++) {}\n  }\nvar endTime = +new Date();\nconsole.log(\"用时共计\"+(endTime-beginTime)+\"ms\");\n\n\n//或者\nvar beginTime  = new Date().getTime() \nfor (var i = 0; i < 1000; i++) {\n    for (var j = 0; j < 1000; j++) {}\n  }\nvar endTime  = new Date().getTime()\nconsole.log(\"用时共计\"+(endTime-beginTime)+\"ms\");\n\n//或者\nvar beginTime  = Date.now()\nfor (var i = 0; i < 1000; i++) {\n    for (var j = 0; j < 1000; j++) {}\n  }\nvar endTime  = Date.now()\nconsole.log(\"用时共计\"+(endTime-beginTime)+\"ms\");\n```\n那么聪明的你肯定会问这三者的的区别\n\n### Date.now()与 new Date().getTime() 的区别\n它们都可以获取时间戳，但是实际上性能是不一样的（虽然差别不大，但是也算是一种性能的追求），可以做个测试\n```js\n  console.time('+new Date()')\n  for(var i = 0; i < 100000; i++) {\n    var o = + new Date()\n  }\n  console.timeEnd('+new Date()')\n\n  console.time('new Date().getTime:')\n  for(var j = 0; j < 100000; j++) {\n    var p = new Date().getTime();\n  }\n  console.timeEnd('new Date().getTime:')\n\n  console.time('Date.now()')\n  for(var k = 0; k < 100000; k++) {\n    var q = Date.now()\n  }\n  console.timeEnd('Date.now()') \n\n  //输出\n  +new Date(): 42.31396484375ms\n  new Date().getTime:: 33.93408203125ms\n  Date.now(): 24.561767578125ms\n```\n测试用例[https://jsperf.com/date-now-vs-new-date]\n\n![测试用例](https://tvax1.sinaimg.cn/large/b535b7d3ly1g7ua23h8toj20r20m6mxz.jpg)\n\n## profile\n\n使用`console.profile`测试程序性能\n\n开发中，我们常常要评估段代码或是某个函数的性能。在函数中手动打印时间固然可以，但显得不够灵活而且有误差。借助控制台以及console.profile()方法我们可以很方便地监控运行性能。\n\n```js\nfunction parent() {\n      for (var i = 0; i < 10000; i++) {\n            childA()\n      }\n}\n\nfunction childA() {\n      for (var i = 0; i < 2000; i++) {}\n}\n\nconsole.profile('性能分析');\nparent();\nconsole.profileEnd('性能分析');\n\n//执行后\n//Profile '性能分析' started.\n//Profile '性能分析' finished.\n```\n![console.profile](https://tva3.sinaimg.cn/large/b535b7d3ly1g7ua23n1qvj210105uaad.jpg)\n","source":"_posts/使用console进行-性能测试-和-计算代码运行时间.md","raw":"---\ntitle: 使用console进行 性能测试 和 计算代码运行时间\ndate: 2019-09-17 14:42:09\nauthor: 胡豪\ncategories: \n- JavaScript \ntags:\n- 性能测试 \n---\n\n## 前言\n对于前端开发人员，在开发过程中经常需要监控某些表达式或变量的值，如果使用用 debugger 会显得过于笨重，最常用的方法是会将值输出到控制台上方便调试。最常用的语句就是console.log(expression)了。\n\n\n## trace\n\n`console.trace()`用来追踪函数的调用过程。\n\n在大型项目尤其是框架开发中，函数的调用轨迹可以十分复杂，`console.trace()`方法可以将函数的被调用过程清楚地输出到控制台上。\n```html\n<button onclick=\"myFunction()\">跟踪轨迹</button>\n```\n\n```js \n\nfunction myFunction() {\n  console.log(1)\n  myOtherFunction();\n  console.log(2)\n}\n\nfunction myOtherFunction() {\n  console.log(3);\n  myOtherFunction2();\n  console.log(4);\n}\nfunction myOtherFunction2() {\n  console.trace();\n}\n```\n打印结果：\n![console.trace](https://tvax4.sinaimg.cn/large/b535b7d3ly1g7ua23a4x5j20w107bjrt.jpg)\n\n\n## table\n\n使用console将对象以表格呈现\n\n可将传入的对象，或数组以表格形式输出，相比传统树形输出，这种输出方案更适合内部元素排列整齐的对象或数组，不然可能会出现很多的 undefined。\n```js\nvar Teletubbies = {\n  Tinky:{ \n    name: 'Tinky',\n    age: '3'\n  },\n  lala: {\n    name: 'lala',\n    age: '6'\n  },\n  Daisy: {\n    name: 'Daisy',\n    age: '4'\n  },\n  po:{\n    name:'po',\n    age:'5'\n  }\n};\nconsole.table(Teletubbies);\n```\n打印结果：\n![console.table](https://tvax1.sinaimg.cn/large/b535b7d3ly1g7ua23dxjij20v1064gls.jpg)\n\n\n## console.time进行时间计算\n\n计算程序的执行时间\n\n可以将成对的console.time()和console.timeEnd()之间代码的运行时间输出到控制台上\n```js\nconsole.time('计时器');\nfor (var i = 0; i < 1000; i++) {\n  for (var j = 0; j < 1000; j++) {}\n}\nconsole.timeEnd('计时器');\n```\n以上代码可以计算出`console.time('计时器')`和`console.timeEnd('计时器')`之间的代码块所需要的时间。\n\n\n## 还可以console.log配合Date对象计算\n除了console.time()还可以用console.log配合Date对象计算\n```js\nvar beginTime = +new Date();\n  for (var i = 0; i < 1000; i++) {\n    for (var j = 0; j < 1000; j++) {}\n  }\nvar endTime = +new Date();\nconsole.log(\"用时共计\"+(endTime-beginTime)+\"ms\");\n\n\n//或者\nvar beginTime  = new Date().getTime() \nfor (var i = 0; i < 1000; i++) {\n    for (var j = 0; j < 1000; j++) {}\n  }\nvar endTime  = new Date().getTime()\nconsole.log(\"用时共计\"+(endTime-beginTime)+\"ms\");\n\n//或者\nvar beginTime  = Date.now()\nfor (var i = 0; i < 1000; i++) {\n    for (var j = 0; j < 1000; j++) {}\n  }\nvar endTime  = Date.now()\nconsole.log(\"用时共计\"+(endTime-beginTime)+\"ms\");\n```\n那么聪明的你肯定会问这三者的的区别\n\n### Date.now()与 new Date().getTime() 的区别\n它们都可以获取时间戳，但是实际上性能是不一样的（虽然差别不大，但是也算是一种性能的追求），可以做个测试\n```js\n  console.time('+new Date()')\n  for(var i = 0; i < 100000; i++) {\n    var o = + new Date()\n  }\n  console.timeEnd('+new Date()')\n\n  console.time('new Date().getTime:')\n  for(var j = 0; j < 100000; j++) {\n    var p = new Date().getTime();\n  }\n  console.timeEnd('new Date().getTime:')\n\n  console.time('Date.now()')\n  for(var k = 0; k < 100000; k++) {\n    var q = Date.now()\n  }\n  console.timeEnd('Date.now()') \n\n  //输出\n  +new Date(): 42.31396484375ms\n  new Date().getTime:: 33.93408203125ms\n  Date.now(): 24.561767578125ms\n```\n测试用例[https://jsperf.com/date-now-vs-new-date]\n\n![测试用例](https://tvax1.sinaimg.cn/large/b535b7d3ly1g7ua23h8toj20r20m6mxz.jpg)\n\n## profile\n\n使用`console.profile`测试程序性能\n\n开发中，我们常常要评估段代码或是某个函数的性能。在函数中手动打印时间固然可以，但显得不够灵活而且有误差。借助控制台以及console.profile()方法我们可以很方便地监控运行性能。\n\n```js\nfunction parent() {\n      for (var i = 0; i < 10000; i++) {\n            childA()\n      }\n}\n\nfunction childA() {\n      for (var i = 0; i < 2000; i++) {}\n}\n\nconsole.profile('性能分析');\nparent();\nconsole.profileEnd('性能分析');\n\n//执行后\n//Profile '性能分析' started.\n//Profile '性能分析' finished.\n```\n![console.profile](https://tva3.sinaimg.cn/large/b535b7d3ly1g7ua23n1qvj210105uaad.jpg)\n","slug":"使用console进行-性能测试-和-计算代码运行时间","published":1,"updated":"2019-10-11T07:11:00.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hyq70014y4tzeewe6qn5","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于前端开发人员，在开发过程中经常需要监控某些表达式或变量的值，如果使用用 debugger 会显得过于笨重，最常用的方法是会将值输出到控制台上方便调试。最常用的语句就是console.log(expression)了。</p>\n<h2 id=\"trace\"><a href=\"#trace\" class=\"headerlink\" title=\"trace\"></a>trace</h2><p><code>console.trace()</code>用来追踪函数的调用过程。</p>\n<p>在大型项目尤其是框架开发中，函数的调用轨迹可以十分复杂，<code>console.trace()</code>方法可以将函数的被调用过程清楚地输出到控制台上。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"myFunction()\"</span>&gt;</span>跟踪轨迹<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  myOtherFunction();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myOtherFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">  myOtherFunction2();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myOtherFunction2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.trace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打印结果：<br><img src=\"https://tvax4.sinaimg.cn/large/b535b7d3ly1g7ua23a4x5j20w107bjrt.jpg\" alt=\"console.trace\"></p>\n<h2 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h2><p>使用console将对象以表格呈现</p>\n<p>可将传入的对象，或数组以表格形式输出，相比传统树形输出，这种输出方案更适合内部元素排列整齐的对象或数组，不然可能会出现很多的 undefined。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Teletubbies = &#123;</span><br><span class=\"line\">  Tinky:&#123; </span><br><span class=\"line\">    name: <span class=\"string\">'Tinky'</span>,</span><br><span class=\"line\">    age: <span class=\"string\">'3'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  lala: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lala'</span>,</span><br><span class=\"line\">    age: <span class=\"string\">'6'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Daisy: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Daisy'</span>,</span><br><span class=\"line\">    age: <span class=\"string\">'4'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  po:&#123;</span><br><span class=\"line\">    name:<span class=\"string\">'po'</span>,</span><br><span class=\"line\">    age:<span class=\"string\">'5'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(Teletubbies);</span><br></pre></td></tr></table></figure></p>\n<p>打印结果：<br><img src=\"https://tvax1.sinaimg.cn/large/b535b7d3ly1g7ua23dxjij20v1064gls.jpg\" alt=\"console.table\"></p>\n<h2 id=\"console-time进行时间计算\"><a href=\"#console-time进行时间计算\" class=\"headerlink\" title=\"console.time进行时间计算\"></a>console.time进行时间计算</h2><p>计算程序的执行时间</p>\n<p>可以将成对的console.time()和console.timeEnd()之间代码的运行时间输出到控制台上<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'计时器'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">1000</span>; j++) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'计时器'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>以上代码可以计算出<code>console.time(&#39;计时器&#39;)</code>和<code>console.timeEnd(&#39;计时器&#39;)</code>之间的代码块所需要的时间。</p>\n<h2 id=\"还可以console-log配合Date对象计算\"><a href=\"#还可以console-log配合Date对象计算\" class=\"headerlink\" title=\"还可以console.log配合Date对象计算\"></a>还可以console.log配合Date对象计算</h2><p>除了console.time()还可以用console.log配合Date对象计算<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> beginTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">1000</span>; j++) &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> endTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"用时共计\"</span>+(endTime-beginTime)+<span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> beginTime  = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">1000</span>; j++) &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> endTime  = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"用时共计\"</span>+(endTime-beginTime)+<span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> beginTime  = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">1000</span>; j++) &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> endTime  = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"用时共计\"</span>+(endTime-beginTime)+<span class=\"string\">\"ms\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>那么聪明的你肯定会问这三者的的区别</p>\n<h3 id=\"Date-now-与-new-Date-getTime-的区别\"><a href=\"#Date-now-与-new-Date-getTime-的区别\" class=\"headerlink\" title=\"Date.now()与 new Date().getTime() 的区别\"></a>Date.now()与 new Date().getTime() 的区别</h3><p>它们都可以获取时间戳，但是实际上性能是不一样的（虽然差别不大，但是也算是一种性能的追求），可以做个测试<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'+new Date()'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'+new Date()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'new Date().getTime:'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">100000</span>; j++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'new Date().getTime:'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'Date.now()'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">100000</span>; k++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> q = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'Date.now()'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(): <span class=\"number\">42.31396484375</span>ms</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime:: <span class=\"number\">33.93408203125</span>ms</span><br><span class=\"line\"><span class=\"built_in\">Date</span>.now(): <span class=\"number\">24.561767578125</span>ms</span><br></pre></td></tr></table></figure></p>\n<p>测试用例[<a href=\"https://jsperf.com/date-now-vs-new-date]\" target=\"_blank\" rel=\"noopener\">https://jsperf.com/date-now-vs-new-date]</a></p>\n<p><img src=\"https://tvax1.sinaimg.cn/large/b535b7d3ly1g7ua23h8toj20r20m6mxz.jpg\" alt=\"测试用例\"></p>\n<h2 id=\"profile\"><a href=\"#profile\" class=\"headerlink\" title=\"profile\"></a>profile</h2><p>使用<code>console.profile</code>测试程序性能</p>\n<p>开发中，我们常常要评估段代码或是某个函数的性能。在函数中手动打印时间固然可以，但显得不够灵活而且有误差。借助控制台以及console.profile()方法我们可以很方便地监控运行性能。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">            childA()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">childA</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2000</span>; i++) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.profile(<span class=\"string\">'性能分析'</span>);</span><br><span class=\"line\">parent();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.profileEnd(<span class=\"string\">'性能分析'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行后</span></span><br><span class=\"line\"><span class=\"comment\">//Profile '性能分析' started.</span></span><br><span class=\"line\"><span class=\"comment\">//Profile '性能分析' finished.</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://tva3.sinaimg.cn/large/b535b7d3ly1g7ua23n1qvj210105uaad.jpg\" alt=\"console.profile\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于前端开发人员，在开发过程中经常需要监控某些表达式或变量的值，如果使用用 debugger 会显得过于笨重，最常用的方法是会将值输出到控制台上方便调试。最常用的语句就是console.log(expression)了。</p>\n<h2 id=\"trace\"><a href=\"#trace\" class=\"headerlink\" title=\"trace\"></a>trace</h2><p><code>console.trace()</code>用来追踪函数的调用过程。</p>\n<p>在大型项目尤其是框架开发中，函数的调用轨迹可以十分复杂，<code>console.trace()</code>方法可以将函数的被调用过程清楚地输出到控制台上。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"myFunction()\"</span>&gt;</span>跟踪轨迹<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">  myOtherFunction();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myOtherFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">  myOtherFunction2();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myOtherFunction2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.trace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打印结果：<br><img src=\"https://tvax4.sinaimg.cn/large/b535b7d3ly1g7ua23a4x5j20w107bjrt.jpg\" alt=\"console.trace\"></p>\n<h2 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h2><p>使用console将对象以表格呈现</p>\n<p>可将传入的对象，或数组以表格形式输出，相比传统树形输出，这种输出方案更适合内部元素排列整齐的对象或数组，不然可能会出现很多的 undefined。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Teletubbies = &#123;</span><br><span class=\"line\">  Tinky:&#123; </span><br><span class=\"line\">    name: <span class=\"string\">'Tinky'</span>,</span><br><span class=\"line\">    age: <span class=\"string\">'3'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  lala: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lala'</span>,</span><br><span class=\"line\">    age: <span class=\"string\">'6'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Daisy: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Daisy'</span>,</span><br><span class=\"line\">    age: <span class=\"string\">'4'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  po:&#123;</span><br><span class=\"line\">    name:<span class=\"string\">'po'</span>,</span><br><span class=\"line\">    age:<span class=\"string\">'5'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(Teletubbies);</span><br></pre></td></tr></table></figure></p>\n<p>打印结果：<br><img src=\"https://tvax1.sinaimg.cn/large/b535b7d3ly1g7ua23dxjij20v1064gls.jpg\" alt=\"console.table\"></p>\n<h2 id=\"console-time进行时间计算\"><a href=\"#console-time进行时间计算\" class=\"headerlink\" title=\"console.time进行时间计算\"></a>console.time进行时间计算</h2><p>计算程序的执行时间</p>\n<p>可以将成对的console.time()和console.timeEnd()之间代码的运行时间输出到控制台上<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'计时器'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">1000</span>; j++) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'计时器'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>以上代码可以计算出<code>console.time(&#39;计时器&#39;)</code>和<code>console.timeEnd(&#39;计时器&#39;)</code>之间的代码块所需要的时间。</p>\n<h2 id=\"还可以console-log配合Date对象计算\"><a href=\"#还可以console-log配合Date对象计算\" class=\"headerlink\" title=\"还可以console.log配合Date对象计算\"></a>还可以console.log配合Date对象计算</h2><p>除了console.time()还可以用console.log配合Date对象计算<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> beginTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">1000</span>; j++) &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> endTime = +<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"用时共计\"</span>+(endTime-beginTime)+<span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> beginTime  = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">1000</span>; j++) &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> endTime  = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"用时共计\"</span>+(endTime-beginTime)+<span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> beginTime  = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">1000</span>; j++) &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> endTime  = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"用时共计\"</span>+(endTime-beginTime)+<span class=\"string\">\"ms\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>那么聪明的你肯定会问这三者的的区别</p>\n<h3 id=\"Date-now-与-new-Date-getTime-的区别\"><a href=\"#Date-now-与-new-Date-getTime-的区别\" class=\"headerlink\" title=\"Date.now()与 new Date().getTime() 的区别\"></a>Date.now()与 new Date().getTime() 的区别</h3><p>它们都可以获取时间戳，但是实际上性能是不一样的（虽然差别不大，但是也算是一种性能的追求），可以做个测试<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'+new Date()'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'+new Date()'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'new Date().getTime:'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">100000</span>; j++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'new Date().getTime:'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'Date.now()'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">100000</span>; k++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> q = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'Date.now()'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(): <span class=\"number\">42.31396484375</span>ms</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime:: <span class=\"number\">33.93408203125</span>ms</span><br><span class=\"line\"><span class=\"built_in\">Date</span>.now(): <span class=\"number\">24.561767578125</span>ms</span><br></pre></td></tr></table></figure></p>\n<p>测试用例[<a href=\"https://jsperf.com/date-now-vs-new-date]\" target=\"_blank\" rel=\"noopener\">https://jsperf.com/date-now-vs-new-date]</a></p>\n<p><img src=\"https://tvax1.sinaimg.cn/large/b535b7d3ly1g7ua23h8toj20r20m6mxz.jpg\" alt=\"测试用例\"></p>\n<h2 id=\"profile\"><a href=\"#profile\" class=\"headerlink\" title=\"profile\"></a>profile</h2><p>使用<code>console.profile</code>测试程序性能</p>\n<p>开发中，我们常常要评估段代码或是某个函数的性能。在函数中手动打印时间固然可以，但显得不够灵活而且有误差。借助控制台以及console.profile()方法我们可以很方便地监控运行性能。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">            childA()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">childA</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2000</span>; i++) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.profile(<span class=\"string\">'性能分析'</span>);</span><br><span class=\"line\">parent();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.profileEnd(<span class=\"string\">'性能分析'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行后</span></span><br><span class=\"line\"><span class=\"comment\">//Profile '性能分析' started.</span></span><br><span class=\"line\"><span class=\"comment\">//Profile '性能分析' finished.</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://tva3.sinaimg.cn/large/b535b7d3ly1g7ua23n1qvj210105uaad.jpg\" alt=\"console.profile\"></p>\n"},{"title":"关于元素在网页中的位置总结","date":"2020-02-04T13:05:10.000Z","author":"胡豪","_content":"\n## offsetLeft与style.left的区别\noffsetLeft 获取的是相对于父对象的左边距\n\nleft 获取或设置相对于 具有定位属性(position定义为relative)的父对象 的左边距\n\n如果父div的position定义为relative,子div的position定义为absolute，那么子div的style.left的值是相对于父div的值，\n这同offsetLeft是相同的，区别在于：\n1. style.left 返回的是字符串，如28px，offsetLeft返回的是数值28，如果需要对取得的值进行计算，\n还用offsetLeft比较方便。\n2. style.left是读写的，offsetLeft是只读的，所以要改变div的位置，只能修改style.left。\n3. style.left的值需要事先定义，否则取到的值为空。而且必须要定义在html里，我做过试验，如果定义在\ncss里，style.left的值仍然 为空，这就是我刚开始碰到的问题，总是取不到style.left的值。offsetLeft则仍然能够取到，无需事先定义div的位置。\n\n","source":"_posts/关于元素在网页中的位置总结.md","raw":"---\ntitle: 关于元素在网页中的位置总结\ndate: 2020-02-04 21:05:10\nauthor: 胡豪\ncategories:\n  - CSS\ntags:\n  - CSS\n---\n\n## offsetLeft与style.left的区别\noffsetLeft 获取的是相对于父对象的左边距\n\nleft 获取或设置相对于 具有定位属性(position定义为relative)的父对象 的左边距\n\n如果父div的position定义为relative,子div的position定义为absolute，那么子div的style.left的值是相对于父div的值，\n这同offsetLeft是相同的，区别在于：\n1. style.left 返回的是字符串，如28px，offsetLeft返回的是数值28，如果需要对取得的值进行计算，\n还用offsetLeft比较方便。\n2. style.left是读写的，offsetLeft是只读的，所以要改变div的位置，只能修改style.left。\n3. style.left的值需要事先定义，否则取到的值为空。而且必须要定义在html里，我做过试验，如果定义在\ncss里，style.left的值仍然 为空，这就是我刚开始碰到的问题，总是取不到style.left的值。offsetLeft则仍然能够取到，无需事先定义div的位置。\n\n","slug":"关于元素在网页中的位置总结","published":1,"updated":"2020-02-06T07:07:52.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hyqc0019y4tz17yy00va","content":"<h2 id=\"offsetLeft与style-left的区别\"><a href=\"#offsetLeft与style-left的区别\" class=\"headerlink\" title=\"offsetLeft与style.left的区别\"></a>offsetLeft与style.left的区别</h2><p>offsetLeft 获取的是相对于父对象的左边距</p>\n<p>left 获取或设置相对于 具有定位属性(position定义为relative)的父对象 的左边距</p>\n<p>如果父div的position定义为relative,子div的position定义为absolute，那么子div的style.left的值是相对于父div的值，<br>这同offsetLeft是相同的，区别在于：</p>\n<ol>\n<li>style.left 返回的是字符串，如28px，offsetLeft返回的是数值28，如果需要对取得的值进行计算，<br>还用offsetLeft比较方便。</li>\n<li>style.left是读写的，offsetLeft是只读的，所以要改变div的位置，只能修改style.left。</li>\n<li>style.left的值需要事先定义，否则取到的值为空。而且必须要定义在html里，我做过试验，如果定义在<br>css里，style.left的值仍然 为空，这就是我刚开始碰到的问题，总是取不到style.left的值。offsetLeft则仍然能够取到，无需事先定义div的位置。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"offsetLeft与style-left的区别\"><a href=\"#offsetLeft与style-left的区别\" class=\"headerlink\" title=\"offsetLeft与style.left的区别\"></a>offsetLeft与style.left的区别</h2><p>offsetLeft 获取的是相对于父对象的左边距</p>\n<p>left 获取或设置相对于 具有定位属性(position定义为relative)的父对象 的左边距</p>\n<p>如果父div的position定义为relative,子div的position定义为absolute，那么子div的style.left的值是相对于父div的值，<br>这同offsetLeft是相同的，区别在于：</p>\n<ol>\n<li>style.left 返回的是字符串，如28px，offsetLeft返回的是数值28，如果需要对取得的值进行计算，<br>还用offsetLeft比较方便。</li>\n<li>style.left是读写的，offsetLeft是只读的，所以要改变div的位置，只能修改style.left。</li>\n<li>style.left的值需要事先定义，否则取到的值为空。而且必须要定义在html里，我做过试验，如果定义在<br>css里，style.left的值仍然 为空，这就是我刚开始碰到的问题，总是取不到style.left的值。offsetLeft则仍然能够取到，无需事先定义div的位置。</li>\n</ol>\n"},{"title":"如何在nuxt中使用Vuex做登陆管理","date":"2019-11-04T02:45:08.000Z","author":"胡豪","_content":"\n## 前言\n\n在vue中vuex可以拿来做状态管理，今天记录下在nuxt框架下如何使用vuex实现项目中的登陆状态的管理\n\n\n## Vuex\n用token进行验证登录,根据约定,把token放在header中  \n根目录下创建一个store文件夹，在store中创建一个index.js\n\n### 简述Vuex\nVuex是单项数据流，利用Vuex做状态管理，可以对数据更好地追踪与bug发现  \n- state 初始化状态  \n- gatter 对数据的过滤操作\n- mutations 进行业务逻辑操作，它是同步的\n- action 如果需要异步操作，可以写在action中\n\n\n### /store/index.js\n```js\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport axios from \"axios\";\n\nVue.use(Vuex);\n\nconst store = () =>\n  new Vuex.Store({\n    state: {\n      user: {\n        isLogin: false,\n        userInfo: \"\",\n        token: \"\",\n        ticket: \"\"\n      }\n    },\n    mutations: {\n      login(state, data) { \n        state.user.isLogin = true;\n        state.user.userInfo = data.userInfo;\n        state.user.userInfo.token = data.token;\n        axios.defaults.headers.common[\"Authorization\"] = data.token;      \n      },\n      loginout(state) {\n        state.user.isLogin = false;\n        state.user.userInfo = \"\";\n        axios.defaults.headers.common[\"Authorization\"] = \"undefined\";\n      },\n      // 设置用户 openId 对应的 key\n      setTicket(state, data) {\n        state.user.ticket = data;\n      }\n    },\n    actions: {\n      nuxtServerInit({ commit }, { req }) { \n        if (req.session) {\n          if (req.session.authUser) {\n            commit(\"login\", req.session.authUser);\n          } else if (req.session.ticket) {\n            commit(\"setTicket\", req.session.ticket);\n          }\n        }\n      }\n    }\n  });\nexport default store;\n```\n\n## middleware \n官方文档: [https://zh.nuxtjs.org/guide/routing#%E4%B8%AD%E9%97%B4%E4%BB%B6](https://zh.nuxtjs.org/guide/routing/#%E4%B8%AD%E9%97%B4%E4%BB%B6)  \n利用middleware实现不登录无法访问\n\n```js\nexport default async function ({ store,redirect }) {\n  //用户未登录就跳转登录页\n  if(!store.state.user.isLogin){\n    redirect('/login')\n  }\n}\n```\n在组件中使用`middleware: 'mustLogin', data() {return {}}`\n\n## 登陆组件login\n登陆页，接口验证成功后，更新store存储的状态 `this.$store.commit(\"login\", result.data);`\n\n完整代码如下：\n```js\nmethods: {\n  async submitForm(formName) {\n    const account = this.loginForm.account;\n    const password = this.loginForm.password;\n    this.$refs[formName].validate(async valid => {\n      if (valid) {\n        let result = await login(account, password);\n        if (result.success) {\n          // 登录成功\n          this.$store.commit(\"login\", result.data);\n          if (window.history.length > 1) {\n            this.$router.go(-1);\n          } else {\n            this.$router.push(\"/\");\n          }\n        } else {\n          MessageBox({\n            type: \"error\",\n            title: \"登录信息\",\n            message: result.message\n          });\n        }\n      } else {\n        return false;\n      }\n    });\n  }\n} \n```\n## 登出组件login\n点击退出按钮，接口发送退出请求，更新store存储的状态 `this.$store.commit(\"loginout\",null);`\n```html\n<span v-if=\"$store.state.user.isLogin\" @click=\"loginOut\">退出</span>\n```\n\n```js\nmethods: {\n  async loginOut() { \n    await loginOut();\n    this.$store.commit(\"loginout\",null);\n    this.$router.push(\"/\")\n  }\n}\n```\n\n## 总结\n至此,就是nuxt中使用Vuex的整个流程,具体不同的地方就需要在项目中针对性地去调整修改。","source":"_posts/如何在nuxt中使用Vuex做登陆管理.md","raw":"---\ntitle: 如何在nuxt中使用Vuex做登陆管理\ndate: 2019-11-4 10:45:08\nauthor: 胡豪\ncategories:\n  - JavaScript\n  - vue\ntags:\n  - SSR\n  - Nuxt\n---\n\n## 前言\n\n在vue中vuex可以拿来做状态管理，今天记录下在nuxt框架下如何使用vuex实现项目中的登陆状态的管理\n\n\n## Vuex\n用token进行验证登录,根据约定,把token放在header中  \n根目录下创建一个store文件夹，在store中创建一个index.js\n\n### 简述Vuex\nVuex是单项数据流，利用Vuex做状态管理，可以对数据更好地追踪与bug发现  \n- state 初始化状态  \n- gatter 对数据的过滤操作\n- mutations 进行业务逻辑操作，它是同步的\n- action 如果需要异步操作，可以写在action中\n\n\n### /store/index.js\n```js\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport axios from \"axios\";\n\nVue.use(Vuex);\n\nconst store = () =>\n  new Vuex.Store({\n    state: {\n      user: {\n        isLogin: false,\n        userInfo: \"\",\n        token: \"\",\n        ticket: \"\"\n      }\n    },\n    mutations: {\n      login(state, data) { \n        state.user.isLogin = true;\n        state.user.userInfo = data.userInfo;\n        state.user.userInfo.token = data.token;\n        axios.defaults.headers.common[\"Authorization\"] = data.token;      \n      },\n      loginout(state) {\n        state.user.isLogin = false;\n        state.user.userInfo = \"\";\n        axios.defaults.headers.common[\"Authorization\"] = \"undefined\";\n      },\n      // 设置用户 openId 对应的 key\n      setTicket(state, data) {\n        state.user.ticket = data;\n      }\n    },\n    actions: {\n      nuxtServerInit({ commit }, { req }) { \n        if (req.session) {\n          if (req.session.authUser) {\n            commit(\"login\", req.session.authUser);\n          } else if (req.session.ticket) {\n            commit(\"setTicket\", req.session.ticket);\n          }\n        }\n      }\n    }\n  });\nexport default store;\n```\n\n## middleware \n官方文档: [https://zh.nuxtjs.org/guide/routing#%E4%B8%AD%E9%97%B4%E4%BB%B6](https://zh.nuxtjs.org/guide/routing/#%E4%B8%AD%E9%97%B4%E4%BB%B6)  \n利用middleware实现不登录无法访问\n\n```js\nexport default async function ({ store,redirect }) {\n  //用户未登录就跳转登录页\n  if(!store.state.user.isLogin){\n    redirect('/login')\n  }\n}\n```\n在组件中使用`middleware: 'mustLogin', data() {return {}}`\n\n## 登陆组件login\n登陆页，接口验证成功后，更新store存储的状态 `this.$store.commit(\"login\", result.data);`\n\n完整代码如下：\n```js\nmethods: {\n  async submitForm(formName) {\n    const account = this.loginForm.account;\n    const password = this.loginForm.password;\n    this.$refs[formName].validate(async valid => {\n      if (valid) {\n        let result = await login(account, password);\n        if (result.success) {\n          // 登录成功\n          this.$store.commit(\"login\", result.data);\n          if (window.history.length > 1) {\n            this.$router.go(-1);\n          } else {\n            this.$router.push(\"/\");\n          }\n        } else {\n          MessageBox({\n            type: \"error\",\n            title: \"登录信息\",\n            message: result.message\n          });\n        }\n      } else {\n        return false;\n      }\n    });\n  }\n} \n```\n## 登出组件login\n点击退出按钮，接口发送退出请求，更新store存储的状态 `this.$store.commit(\"loginout\",null);`\n```html\n<span v-if=\"$store.state.user.isLogin\" @click=\"loginOut\">退出</span>\n```\n\n```js\nmethods: {\n  async loginOut() { \n    await loginOut();\n    this.$store.commit(\"loginout\",null);\n    this.$router.push(\"/\")\n  }\n}\n```\n\n## 总结\n至此,就是nuxt中使用Vuex的整个流程,具体不同的地方就需要在项目中针对性地去调整修改。","slug":"如何在nuxt中使用Vuex做登陆管理","published":1,"updated":"2021-03-29T05:44:19.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hyqe001cy4tzeoe4fw7b","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在vue中vuex可以拿来做状态管理，今天记录下在nuxt框架下如何使用vuex实现项目中的登陆状态的管理</p>\n<h2 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h2><p>用token进行验证登录,根据约定,把token放在header中<br>根目录下创建一个store文件夹，在store中创建一个index.js</p>\n<h3 id=\"简述Vuex\"><a href=\"#简述Vuex\" class=\"headerlink\" title=\"简述Vuex\"></a>简述Vuex</h3><p>Vuex是单项数据流，利用Vuex做状态管理，可以对数据更好地追踪与bug发现  </p>\n<ul>\n<li>state 初始化状态  </li>\n<li>gatter 对数据的过滤操作</li>\n<li>mutations 进行业务逻辑操作，它是同步的</li>\n<li>action 如果需要异步操作，可以写在action中</li>\n</ul>\n<h3 id=\"store-index-js\"><a href=\"#store-index-js\" class=\"headerlink\" title=\"/store/index.js\"></a>/store/index.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">\"vuex\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">      user: &#123;</span><br><span class=\"line\">        isLogin: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        userInfo: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        token: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        ticket: <span class=\"string\">\"\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mutations: &#123;</span><br><span class=\"line\">      login(state, data) &#123; </span><br><span class=\"line\">        state.user.isLogin = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        state.user.userInfo = data.userInfo;</span><br><span class=\"line\">        state.user.userInfo.token = data.token;</span><br><span class=\"line\">        axios.defaults.headers.common[<span class=\"string\">\"Authorization\"</span>] = data.token;      </span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      loginout(state) &#123;</span><br><span class=\"line\">        state.user.isLogin = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        state.user.userInfo = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        axios.defaults.headers.common[<span class=\"string\">\"Authorization\"</span>] = <span class=\"string\">\"undefined\"</span>;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 设置用户 openId 对应的 key</span></span><br><span class=\"line\">      setTicket(state, data) &#123;</span><br><span class=\"line\">        state.user.ticket = data;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    actions: &#123;</span><br><span class=\"line\">      nuxtServerInit(&#123; commit &#125;, &#123; req &#125;) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (req.session) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (req.session.authUser) &#123;</span><br><span class=\"line\">            commit(<span class=\"string\">\"login\"</span>, req.session.authUser);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (req.session.ticket) &#123;</span><br><span class=\"line\">            commit(<span class=\"string\">\"setTicket\"</span>, req.session.ticket);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br></pre></td></tr></table></figure>\n<h2 id=\"middleware\"><a href=\"#middleware\" class=\"headerlink\" title=\"middleware\"></a>middleware</h2><p>官方文档: <a href=\"https://zh.nuxtjs.org/guide/routing/#%E4%B8%AD%E9%97%B4%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">https://zh.nuxtjs.org/guide/routing#%E4%B8%AD%E9%97%B4%E4%BB%B6</a><br>利用middleware实现不登录无法访问</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">&#123; store,redirect &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//用户未登录就跳转登录页</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!store.state.user.isLogin)&#123;</span><br><span class=\"line\">    redirect(<span class=\"string\">'/login'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在组件中使用<code>middleware: &#39;mustLogin&#39;, data() {return {}}</code></p>\n<h2 id=\"登陆组件login\"><a href=\"#登陆组件login\" class=\"headerlink\" title=\"登陆组件login\"></a>登陆组件login</h2><p>登陆页，接口验证成功后，更新store存储的状态 <code>this.$store.commit(&quot;login&quot;, result.data);</code></p>\n<p>完整代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> submitForm(formName) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> account = <span class=\"keyword\">this</span>.loginForm.account;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> password = <span class=\"keyword\">this</span>.loginForm.password;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$refs[formName].validate(<span class=\"keyword\">async</span> valid =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (valid) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> login(account, password);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.success) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 登录成功</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">\"login\"</span>, result.data);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.history.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$router.go(<span class=\"number\">-1</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$router.push(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          MessageBox(&#123;</span><br><span class=\"line\">            type: <span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">            title: <span class=\"string\">\"登录信息\"</span>,</span><br><span class=\"line\">            message: result.message</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"登出组件login\"><a href=\"#登出组件login\" class=\"headerlink\" title=\"登出组件login\"></a>登出组件login</h2><p>点击退出按钮，接口发送退出请求，更新store存储的状态 <code>this.$store.commit(&quot;loginout&quot;,null);</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"$store.state.user.isLogin\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"loginOut\"</span>&gt;</span>退出<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> loginOut() &#123; </span><br><span class=\"line\">    <span class=\"keyword\">await</span> loginOut();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">\"loginout\"</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$router.push(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此,就是nuxt中使用Vuex的整个流程,具体不同的地方就需要在项目中针对性地去调整修改。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在vue中vuex可以拿来做状态管理，今天记录下在nuxt框架下如何使用vuex实现项目中的登陆状态的管理</p>\n<h2 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h2><p>用token进行验证登录,根据约定,把token放在header中<br>根目录下创建一个store文件夹，在store中创建一个index.js</p>\n<h3 id=\"简述Vuex\"><a href=\"#简述Vuex\" class=\"headerlink\" title=\"简述Vuex\"></a>简述Vuex</h3><p>Vuex是单项数据流，利用Vuex做状态管理，可以对数据更好地追踪与bug发现  </p>\n<ul>\n<li>state 初始化状态  </li>\n<li>gatter 对数据的过滤操作</li>\n<li>mutations 进行业务逻辑操作，它是同步的</li>\n<li>action 如果需要异步操作，可以写在action中</li>\n</ul>\n<h3 id=\"store-index-js\"><a href=\"#store-index-js\" class=\"headerlink\" title=\"/store/index.js\"></a>/store/index.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">\"vuex\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">      user: &#123;</span><br><span class=\"line\">        isLogin: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        userInfo: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        token: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        ticket: <span class=\"string\">\"\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mutations: &#123;</span><br><span class=\"line\">      login(state, data) &#123; </span><br><span class=\"line\">        state.user.isLogin = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        state.user.userInfo = data.userInfo;</span><br><span class=\"line\">        state.user.userInfo.token = data.token;</span><br><span class=\"line\">        axios.defaults.headers.common[<span class=\"string\">\"Authorization\"</span>] = data.token;      </span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      loginout(state) &#123;</span><br><span class=\"line\">        state.user.isLogin = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        state.user.userInfo = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        axios.defaults.headers.common[<span class=\"string\">\"Authorization\"</span>] = <span class=\"string\">\"undefined\"</span>;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 设置用户 openId 对应的 key</span></span><br><span class=\"line\">      setTicket(state, data) &#123;</span><br><span class=\"line\">        state.user.ticket = data;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    actions: &#123;</span><br><span class=\"line\">      nuxtServerInit(&#123; commit &#125;, &#123; req &#125;) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (req.session) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (req.session.authUser) &#123;</span><br><span class=\"line\">            commit(<span class=\"string\">\"login\"</span>, req.session.authUser);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (req.session.ticket) &#123;</span><br><span class=\"line\">            commit(<span class=\"string\">\"setTicket\"</span>, req.session.ticket);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br></pre></td></tr></table></figure>\n<h2 id=\"middleware\"><a href=\"#middleware\" class=\"headerlink\" title=\"middleware\"></a>middleware</h2><p>官方文档: <a href=\"https://zh.nuxtjs.org/guide/routing/#%E4%B8%AD%E9%97%B4%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">https://zh.nuxtjs.org/guide/routing#%E4%B8%AD%E9%97%B4%E4%BB%B6</a><br>利用middleware实现不登录无法访问</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">&#123; store,redirect &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//用户未登录就跳转登录页</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!store.state.user.isLogin)&#123;</span><br><span class=\"line\">    redirect(<span class=\"string\">'/login'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在组件中使用<code>middleware: &#39;mustLogin&#39;, data() {return {}}</code></p>\n<h2 id=\"登陆组件login\"><a href=\"#登陆组件login\" class=\"headerlink\" title=\"登陆组件login\"></a>登陆组件login</h2><p>登陆页，接口验证成功后，更新store存储的状态 <code>this.$store.commit(&quot;login&quot;, result.data);</code></p>\n<p>完整代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> submitForm(formName) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> account = <span class=\"keyword\">this</span>.loginForm.account;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> password = <span class=\"keyword\">this</span>.loginForm.password;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$refs[formName].validate(<span class=\"keyword\">async</span> valid =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (valid) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> login(account, password);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.success) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 登录成功</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">\"login\"</span>, result.data);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.history.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$router.go(<span class=\"number\">-1</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.$router.push(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          MessageBox(&#123;</span><br><span class=\"line\">            type: <span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">            title: <span class=\"string\">\"登录信息\"</span>,</span><br><span class=\"line\">            message: result.message</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"登出组件login\"><a href=\"#登出组件login\" class=\"headerlink\" title=\"登出组件login\"></a>登出组件login</h2><p>点击退出按钮，接口发送退出请求，更新store存储的状态 <code>this.$store.commit(&quot;loginout&quot;,null);</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"$store.state.user.isLogin\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"loginOut\"</span>&gt;</span>退出<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> loginOut() &#123; </span><br><span class=\"line\">    <span class=\"keyword\">await</span> loginOut();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$store.commit(<span class=\"string\">\"loginout\"</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$router.push(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此,就是nuxt中使用Vuex的整个流程,具体不同的地方就需要在项目中针对性地去调整修改。</p>\n"},{"title":"常用CSS","date":"2019-12-06T05:59:49.000Z","author":"胡豪","_content":"\n###常用CSS汇总\n```css\n//div里放入input的css\n.inputBox input{\n  outline: none;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border:0;\n  text-indent:10px;\n}\n\n//css三角形\n.progress .progress-value:after {\n    content: \"\";\n    border-top: 7px solid #393a3d;\n    border-left: 7px solid transparent;\n    border-right: 7px solid transparent;\n    position: absolute;\n    bottom: -7px;\n    left: 35%;\n}\n\nOverflow参数： \nvisible : 　不剪切内容也不添加滚动条。假如显式声明此默认值，对象将被剪切为包含对象的window或frame的大小。并且clip属性设置将失效\nauto : 　此为body对象和textarea的默认值。在需要时剪切内容并添加滚动条\nhidden : 　不显示超过对象尺寸的内容\nscroll : 　总是显示滚动条\n\n\n适配手机屏幕代码\n<metaname=\"viewport\"content=\"width=device-width,initial-scale=1\">\n\n\n//手机/微信 开发必备 插件 网站\nhttp://www.swiper.com.cn/\n\ntable 中td占位多行多列的方法\ncolspan 单元格占多少列\nrowspan 单元格占多少行\n\n\ninput number 去掉后面的那个 上下箭头\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\ninput[type=\"number\"] {\n  -moz-appearance: textfield;\n}\n\n//文本超出省略...\n{\n  text-overflow:ellipsis;\n  overflow:hidden;\n  white-space: nowrap;\n}\n\n/*这个是多行超出隐藏的*/\n{\n  text-overflow: ellipsis;\n  -webkit-line-clamp:3;\n  display: -webkit-box;     \n}\n\n\n/*  png、jpg制作 font-class 步骤（效果不是很好）*/\n  网站：http://www.pngtosvg.com/   将 jpg、png转换为 svg\n  网站：http://iconfont.cn/   批量上传到阿里的svg库，然后转换为字体文件下载\n  css 直接 应用\n\n\n/* 使用png转font-class方法 */\n  1、使用软件inkscape软件，首先  “文件”“打开”“png文件”----》“另存为”“inkscape SVG”类型文件\n  2、“文件”“导入”“刚才保存的svg图片”--> “路径”“提取位图轮廓”“更新确定”“保存”\n  3、依然使用网站 http://iconfont.cn/ 批量上传到阿里的svg库，然后转换为文字文件下载\n  4、打开font里面的demo，根据demo直接使用\n\n```","source":"_posts/常用CSS.md","raw":"---\ntitle: 常用CSS\ndate: 2019-12-06 13:59:49\nauthor: 胡豪\ncategories:\n  - CSS\ntags:\n  - CSS\n---\n\n###常用CSS汇总\n```css\n//div里放入input的css\n.inputBox input{\n  outline: none;\n  -webkit-appearance: none;\n  border-radius: 0;\n  border:0;\n  text-indent:10px;\n}\n\n//css三角形\n.progress .progress-value:after {\n    content: \"\";\n    border-top: 7px solid #393a3d;\n    border-left: 7px solid transparent;\n    border-right: 7px solid transparent;\n    position: absolute;\n    bottom: -7px;\n    left: 35%;\n}\n\nOverflow参数： \nvisible : 　不剪切内容也不添加滚动条。假如显式声明此默认值，对象将被剪切为包含对象的window或frame的大小。并且clip属性设置将失效\nauto : 　此为body对象和textarea的默认值。在需要时剪切内容并添加滚动条\nhidden : 　不显示超过对象尺寸的内容\nscroll : 　总是显示滚动条\n\n\n适配手机屏幕代码\n<metaname=\"viewport\"content=\"width=device-width,initial-scale=1\">\n\n\n//手机/微信 开发必备 插件 网站\nhttp://www.swiper.com.cn/\n\ntable 中td占位多行多列的方法\ncolspan 单元格占多少列\nrowspan 单元格占多少行\n\n\ninput number 去掉后面的那个 上下箭头\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\ninput[type=\"number\"] {\n  -moz-appearance: textfield;\n}\n\n//文本超出省略...\n{\n  text-overflow:ellipsis;\n  overflow:hidden;\n  white-space: nowrap;\n}\n\n/*这个是多行超出隐藏的*/\n{\n  text-overflow: ellipsis;\n  -webkit-line-clamp:3;\n  display: -webkit-box;     \n}\n\n\n/*  png、jpg制作 font-class 步骤（效果不是很好）*/\n  网站：http://www.pngtosvg.com/   将 jpg、png转换为 svg\n  网站：http://iconfont.cn/   批量上传到阿里的svg库，然后转换为字体文件下载\n  css 直接 应用\n\n\n/* 使用png转font-class方法 */\n  1、使用软件inkscape软件，首先  “文件”“打开”“png文件”----》“另存为”“inkscape SVG”类型文件\n  2、“文件”“导入”“刚才保存的svg图片”--> “路径”“提取位图轮廓”“更新确定”“保存”\n  3、依然使用网站 http://iconfont.cn/ 批量上传到阿里的svg库，然后转换为文字文件下载\n  4、打开font里面的demo，根据demo直接使用\n\n```","slug":"常用CSS","published":1,"updated":"2021-03-29T05:44:19.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hyqh001hy4tz3jgxwy3m","content":"<p>###常用CSS汇总<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//div里放入input的css</span><br><span class=\"line\"><span class=\"selector-class\">.inputBox</span> <span class=\"selector-tag\">input</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-appearance</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-indent</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//css三角形</span><br><span class=\"line\"><span class=\"selector-class\">.progress</span> <span class=\"selector-class\">.progress-value</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">7px</span> solid <span class=\"number\">#393a3d</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">7px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">7px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: -<span class=\"number\">7px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">35%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">Overflow</span>参数： </span><br><span class=\"line\"><span class=\"selector-tag\">visible</span> : 　不剪切内容也不添加滚动条。假如显式声明此默认值，对象将被剪切为包含对象的<span class=\"selector-tag\">window</span>或<span class=\"selector-tag\">frame</span>的大小。并且<span class=\"selector-tag\">clip</span>属性设置将失效</span><br><span class=\"line\"><span class=\"selector-tag\">auto</span> : 　此为<span class=\"selector-tag\">body</span>对象和<span class=\"selector-tag\">textarea</span>的默认值。在需要时剪切内容并添加滚动条</span><br><span class=\"line\"><span class=\"selector-tag\">hidden</span> : 　不显示超过对象尺寸的内容</span><br><span class=\"line\"><span class=\"selector-tag\">scroll</span> : 　总是显示滚动条</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">适配手机屏幕代码</span><br><span class=\"line\">&lt;metaname=\"viewport\"content=\"width=device-width,initial-scale=1\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//手机/微信 开发必备 插件 网站</span><br><span class=\"line\">http://www.swiper.com.cn/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> 中<span class=\"selector-tag\">td</span>占位多行多列的方法</span><br><span class=\"line\"><span class=\"selector-tag\">colspan</span> 单元格占多少列</span><br><span class=\"line\"><span class=\"selector-tag\">rowspan</span> 单元格占多少行</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span> <span class=\"selector-tag\">number</span> 去掉后面的那个 上下箭头</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::-webkit-outer-spin-button</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::-webkit-inner-spin-button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-appearance</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">\"number\"</span>]</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-appearance</span>: textfield;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//文本超出省略...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>:ellipsis;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*这个是多行超出隐藏的*/</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-line-clamp</span>:<span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-box;     </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  png、jpg制作 font-class 步骤（效果不是很好）*/</span></span><br><span class=\"line\">  网站：http://www.pngtosvg.com/   将 jpg、png转换为 svg</span><br><span class=\"line\">  网站：http://iconfont.cn/   批量上传到阿里的svg库，然后转换为字体文件下载</span><br><span class=\"line\">  <span class=\"selector-tag\">css</span> 直接 应用</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 使用png转font-class方法 */</span></span><br><span class=\"line\">  1、使用软件<span class=\"selector-tag\">inkscape</span>软件，首先  “文件”“打开”“<span class=\"selector-tag\">png</span>文件”<span class=\"selector-tag\">----</span>》“另存为”“<span class=\"selector-tag\">inkscape</span> <span class=\"selector-tag\">SVG</span>”类型文件</span><br><span class=\"line\">  2、“文件”“导入”“刚才保存的<span class=\"selector-tag\">svg</span>图片”<span class=\"selector-tag\">--</span>&gt; “路径”“提取位图轮廓”“更新确定”“保存”</span><br><span class=\"line\">  3、依然使用网站 http://iconfont.cn/ 批量上传到阿里的svg库，然后转换为文字文件下载</span><br><span class=\"line\">  4、打开<span class=\"selector-tag\">font</span>里面的<span class=\"selector-tag\">demo</span>，根据<span class=\"selector-tag\">demo</span>直接使用</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>###常用CSS汇总<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//div里放入input的css</span><br><span class=\"line\"><span class=\"selector-class\">.inputBox</span> <span class=\"selector-tag\">input</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-appearance</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-indent</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//css三角形</span><br><span class=\"line\"><span class=\"selector-class\">.progress</span> <span class=\"selector-class\">.progress-value</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">7px</span> solid <span class=\"number\">#393a3d</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">7px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">7px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: -<span class=\"number\">7px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">35%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">Overflow</span>参数： </span><br><span class=\"line\"><span class=\"selector-tag\">visible</span> : 　不剪切内容也不添加滚动条。假如显式声明此默认值，对象将被剪切为包含对象的<span class=\"selector-tag\">window</span>或<span class=\"selector-tag\">frame</span>的大小。并且<span class=\"selector-tag\">clip</span>属性设置将失效</span><br><span class=\"line\"><span class=\"selector-tag\">auto</span> : 　此为<span class=\"selector-tag\">body</span>对象和<span class=\"selector-tag\">textarea</span>的默认值。在需要时剪切内容并添加滚动条</span><br><span class=\"line\"><span class=\"selector-tag\">hidden</span> : 　不显示超过对象尺寸的内容</span><br><span class=\"line\"><span class=\"selector-tag\">scroll</span> : 　总是显示滚动条</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">适配手机屏幕代码</span><br><span class=\"line\">&lt;metaname=\"viewport\"content=\"width=device-width,initial-scale=1\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//手机/微信 开发必备 插件 网站</span><br><span class=\"line\">http://www.swiper.com.cn/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> 中<span class=\"selector-tag\">td</span>占位多行多列的方法</span><br><span class=\"line\"><span class=\"selector-tag\">colspan</span> 单元格占多少列</span><br><span class=\"line\"><span class=\"selector-tag\">rowspan</span> 单元格占多少行</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span> <span class=\"selector-tag\">number</span> 去掉后面的那个 上下箭头</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::-webkit-outer-spin-button</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::-webkit-inner-spin-button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-appearance</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">\"number\"</span>]</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-appearance</span>: textfield;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//文本超出省略...</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>:ellipsis;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*这个是多行超出隐藏的*/</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-line-clamp</span>:<span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-box;     </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  png、jpg制作 font-class 步骤（效果不是很好）*/</span></span><br><span class=\"line\">  网站：http://www.pngtosvg.com/   将 jpg、png转换为 svg</span><br><span class=\"line\">  网站：http://iconfont.cn/   批量上传到阿里的svg库，然后转换为字体文件下载</span><br><span class=\"line\">  <span class=\"selector-tag\">css</span> 直接 应用</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 使用png转font-class方法 */</span></span><br><span class=\"line\">  1、使用软件<span class=\"selector-tag\">inkscape</span>软件，首先  “文件”“打开”“<span class=\"selector-tag\">png</span>文件”<span class=\"selector-tag\">----</span>》“另存为”“<span class=\"selector-tag\">inkscape</span> <span class=\"selector-tag\">SVG</span>”类型文件</span><br><span class=\"line\">  2、“文件”“导入”“刚才保存的<span class=\"selector-tag\">svg</span>图片”<span class=\"selector-tag\">--</span>&gt; “路径”“提取位图轮廓”“更新确定”“保存”</span><br><span class=\"line\">  3、依然使用网站 http://iconfont.cn/ 批量上传到阿里的svg库，然后转换为文字文件下载</span><br><span class=\"line\">  4、打开<span class=\"selector-tag\">font</span>里面的<span class=\"selector-tag\">demo</span>，根据<span class=\"selector-tag\">demo</span>直接使用</span><br></pre></td></tr></table></figure></p>\n"},{"title":"浏览器图片缓存问题（图片改变页面无变化）","date":"2019-12-18T07:59:04.000Z","author":"胡豪","_content":"\n\n## 前言\n修改img的src属性刷新图片时，如果图片地址相同，图片无变化的问题\n\n最主要的原因浏览器会有缓存，它会认为图片没有变化，是相同的\n\n项目中需要上传图片预览.但是第二次上传图片显示的时候发现之前的图片没有改变.后经过分析发现是地址相同第二次改变img src属性的时候图片未发生改变,浏览器第二次不会去请求服务器 \n\n解决方案很easy:\n在修改img的src属性的时候加上一个随机数即可,让浏览器以为每次请求的服务器都不同.\n```js\nimage.attr('src', data.message+'?'+Math.random());\n\n//当然不用随机数，也可以用个当前时间的时间戳\n```\n\n或者局部图片更新\n手动再src属性中加入版本号\n```js\n<img src=\"./test.png?v1.0.1\" />\n```","source":"_posts/修改img的src属性刷新图片时，图片地址相同图片无变化的问题.md","raw":"---\ntitle: 浏览器图片缓存问题（图片改变页面无变化）\ndate: 2019-12-18 15:59:04\nauthor: 胡豪\ncategories: \n- JavaScript \ntags:\n- js基础\n---\n\n\n## 前言\n修改img的src属性刷新图片时，如果图片地址相同，图片无变化的问题\n\n最主要的原因浏览器会有缓存，它会认为图片没有变化，是相同的\n\n项目中需要上传图片预览.但是第二次上传图片显示的时候发现之前的图片没有改变.后经过分析发现是地址相同第二次改变img src属性的时候图片未发生改变,浏览器第二次不会去请求服务器 \n\n解决方案很easy:\n在修改img的src属性的时候加上一个随机数即可,让浏览器以为每次请求的服务器都不同.\n```js\nimage.attr('src', data.message+'?'+Math.random());\n\n//当然不用随机数，也可以用个当前时间的时间戳\n```\n\n或者局部图片更新\n手动再src属性中加入版本号\n```js\n<img src=\"./test.png?v1.0.1\" />\n```","slug":"修改img的src属性刷新图片时，图片地址相同图片无变化的问题","published":1,"updated":"2021-03-29T06:24:34.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hyqk001ky4tzd2uu9a2y","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>修改img的src属性刷新图片时，如果图片地址相同，图片无变化的问题</p>\n<p>最主要的原因浏览器会有缓存，它会认为图片没有变化，是相同的</p>\n<p>项目中需要上传图片预览.但是第二次上传图片显示的时候发现之前的图片没有改变.后经过分析发现是地址相同第二次改变img src属性的时候图片未发生改变,浏览器第二次不会去请求服务器 </p>\n<p>解决方案很easy:<br>在修改img的src属性的时候加上一个随机数即可,让浏览器以为每次请求的服务器都不同.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image.attr(<span class=\"string\">'src'</span>, data.message+<span class=\"string\">'?'</span>+<span class=\"built_in\">Math</span>.random());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当然不用随机数，也可以用个当前时间的时间戳</span></span><br></pre></td></tr></table></figure></p>\n<p>或者局部图片更新<br>手动再src属性中加入版本号<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=<span class=\"string\">\"./test.png?v1.0.1\"</span> /&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>修改img的src属性刷新图片时，如果图片地址相同，图片无变化的问题</p>\n<p>最主要的原因浏览器会有缓存，它会认为图片没有变化，是相同的</p>\n<p>项目中需要上传图片预览.但是第二次上传图片显示的时候发现之前的图片没有改变.后经过分析发现是地址相同第二次改变img src属性的时候图片未发生改变,浏览器第二次不会去请求服务器 </p>\n<p>解决方案很easy:<br>在修改img的src属性的时候加上一个随机数即可,让浏览器以为每次请求的服务器都不同.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image.attr(<span class=\"string\">'src'</span>, data.message+<span class=\"string\">'?'</span>+<span class=\"built_in\">Math</span>.random());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当然不用随机数，也可以用个当前时间的时间戳</span></span><br></pre></td></tr></table></figure></p>\n<p>或者局部图片更新<br>手动再src属性中加入版本号<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=<span class=\"string\">\"./test.png?v1.0.1\"</span> /&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"网页禁止审查及一些简单禁止用户对页面操作","date":"2021-03-05T03:02:26.000Z","author":"胡豪","_content":"\n## 前言\n\n对于一些网页，如原创文章，我们不希望用户对我们的网页文章内容拷贝粘贴，所以前端可以做一些操作去禁止，但这种操作也只是防君子不防小人，上有政策下有对策，还是有方法破解的。\n\n## 先说破解禁止 F12 方法\n\n遇到有些网页禁止 F12 审查，我们可以用空白网页先开调试模式，再在地址栏输入网址进入网页\n\n## 简单禁止 F12 审查\n\n此方法就是 js 监听 F12 键盘事件去做操作(不安全，存在绕过漏洞)\n\n```js\ndocument.onkeydown = function() {\n  if (window.event && window.event.keyCode == 123) {\n    alert(\"F12被禁用\");\n    event.keyCode = 0;\n    event.returnValue = false;\n  }\n  if (window.event && window.event.keyCode == 13) {\n    window.event.keyCode = 505;\n  }\n  if (window.event && window.event.keyCode == 8) {\n    alert(str + \"\\n请使用Del键进行字符的删除操作！\");\n    window.event.returnValue = false;\n  }\n};\n```\n\n## 屏蔽右键菜单\n\n```js\ndocument.oncontextmenu = function(event) {\n  if (window.event) {\n    event = window.event;\n  }\n  try {\n    var the = event.srcElement;\n    if (\n      !(\n        (the.tagName == \"INPUT\" && the.type.toLowerCase() == \"text\") ||\n        the.tagName == \"TEXTAREA\"\n      )\n    ) {\n      return false;\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n```\n\n## 屏蔽粘贴\n\n```js\ndocument.onpaste = function(event) {\n  if (window.event) {\n    event = window.event;\n  }\n  try {\n    var the = event.srcElement;\n    if (\n      !(\n        (the.tagName == \"INPUT\" && the.type.toLowerCase() == \"text\") ||\n        the.tagName == \"TEXTAREA\"\n      )\n    ) {\n      return false;\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n```\n\n## 屏蔽复制\n\n```js\ndocument.oncopy = function(event) {\n  if (window.event) {\n    event = window.event;\n  }\n  try {\n    var the = event.srcElement;\n    if (\n      !(\n        (the.tagName == \"INPUT\" && the.type.toLowerCase() == \"text\") ||\n        the.tagName == \"TEXTAREA\"\n      )\n    ) {\n      return false;\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n```\n\n## 屏蔽剪切\n\n```js\ndocument.oncut = function(event) {\n  if (window.event) {\n    event = window.event;\n  }\n  try {\n    var the = event.srcElement;\n    if (\n      !(\n        (the.tagName == \"INPUT\" && the.type.toLowerCase() == \"text\") ||\n        the.tagName == \"TEXTAREA\"\n      )\n    ) {\n      return false;\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n```\n\n## 屏蔽选中\n\n```js\ndocument.onselectstart = function(event) {\n  if (window.event) {\n    event = window.event;\n  }\n  try {\n    var the = event.srcElement;\n    if (\n      !(\n        (the.tagName == \"INPUT\" && the.type.toLowerCase() == \"text\") ||\n        the.tagName == \"TEXTAREA\"\n      )\n    ) {\n      return false;\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n```\n\n## 总结\n凡事无绝对，没法做到真正禁止。浏览器菜单里查看页面源代码，直接ctrl+s，爬虫  \n对于页面安全性研究不深，代码来源网上寻找，用时自取。","source":"_posts/网页禁止审查及一些简单禁止用户对页面操作.md","raw":"---\ntitle: 网页禁止审查及一些简单禁止用户对页面操作\ndate: 2021-3-05 11:02:26\nauthor: 胡豪\ncategories:\n  - JavaScript\ntags:\n  - js基础\n---\n\n## 前言\n\n对于一些网页，如原创文章，我们不希望用户对我们的网页文章内容拷贝粘贴，所以前端可以做一些操作去禁止，但这种操作也只是防君子不防小人，上有政策下有对策，还是有方法破解的。\n\n## 先说破解禁止 F12 方法\n\n遇到有些网页禁止 F12 审查，我们可以用空白网页先开调试模式，再在地址栏输入网址进入网页\n\n## 简单禁止 F12 审查\n\n此方法就是 js 监听 F12 键盘事件去做操作(不安全，存在绕过漏洞)\n\n```js\ndocument.onkeydown = function() {\n  if (window.event && window.event.keyCode == 123) {\n    alert(\"F12被禁用\");\n    event.keyCode = 0;\n    event.returnValue = false;\n  }\n  if (window.event && window.event.keyCode == 13) {\n    window.event.keyCode = 505;\n  }\n  if (window.event && window.event.keyCode == 8) {\n    alert(str + \"\\n请使用Del键进行字符的删除操作！\");\n    window.event.returnValue = false;\n  }\n};\n```\n\n## 屏蔽右键菜单\n\n```js\ndocument.oncontextmenu = function(event) {\n  if (window.event) {\n    event = window.event;\n  }\n  try {\n    var the = event.srcElement;\n    if (\n      !(\n        (the.tagName == \"INPUT\" && the.type.toLowerCase() == \"text\") ||\n        the.tagName == \"TEXTAREA\"\n      )\n    ) {\n      return false;\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n```\n\n## 屏蔽粘贴\n\n```js\ndocument.onpaste = function(event) {\n  if (window.event) {\n    event = window.event;\n  }\n  try {\n    var the = event.srcElement;\n    if (\n      !(\n        (the.tagName == \"INPUT\" && the.type.toLowerCase() == \"text\") ||\n        the.tagName == \"TEXTAREA\"\n      )\n    ) {\n      return false;\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n```\n\n## 屏蔽复制\n\n```js\ndocument.oncopy = function(event) {\n  if (window.event) {\n    event = window.event;\n  }\n  try {\n    var the = event.srcElement;\n    if (\n      !(\n        (the.tagName == \"INPUT\" && the.type.toLowerCase() == \"text\") ||\n        the.tagName == \"TEXTAREA\"\n      )\n    ) {\n      return false;\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n```\n\n## 屏蔽剪切\n\n```js\ndocument.oncut = function(event) {\n  if (window.event) {\n    event = window.event;\n  }\n  try {\n    var the = event.srcElement;\n    if (\n      !(\n        (the.tagName == \"INPUT\" && the.type.toLowerCase() == \"text\") ||\n        the.tagName == \"TEXTAREA\"\n      )\n    ) {\n      return false;\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n```\n\n## 屏蔽选中\n\n```js\ndocument.onselectstart = function(event) {\n  if (window.event) {\n    event = window.event;\n  }\n  try {\n    var the = event.srcElement;\n    if (\n      !(\n        (the.tagName == \"INPUT\" && the.type.toLowerCase() == \"text\") ||\n        the.tagName == \"TEXTAREA\"\n      )\n    ) {\n      return false;\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n```\n\n## 总结\n凡事无绝对，没法做到真正禁止。浏览器菜单里查看页面源代码，直接ctrl+s，爬虫  \n对于页面安全性研究不深，代码来源网上寻找，用时自取。","slug":"网页禁止审查及一些简单禁止用户对页面操作","published":1,"updated":"2021-03-29T05:55:03.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmu8hyr6002by4tzj6i6ke8h","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于一些网页，如原创文章，我们不希望用户对我们的网页文章内容拷贝粘贴，所以前端可以做一些操作去禁止，但这种操作也只是防君子不防小人，上有政策下有对策，还是有方法破解的。</p>\n<h2 id=\"先说破解禁止-F12-方法\"><a href=\"#先说破解禁止-F12-方法\" class=\"headerlink\" title=\"先说破解禁止 F12 方法\"></a>先说破解禁止 F12 方法</h2><p>遇到有些网页禁止 F12 审查，我们可以用空白网页先开调试模式，再在地址栏输入网址进入网页</p>\n<h2 id=\"简单禁止-F12-审查\"><a href=\"#简单禁止-F12-审查\" class=\"headerlink\" title=\"简单禁止 F12 审查\"></a>简单禁止 F12 审查</h2><p>此方法就是 js 监听 F12 键盘事件去做操作(不安全，存在绕过漏洞)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.onkeydown = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event &amp;&amp; <span class=\"built_in\">window</span>.event.keyCode == <span class=\"number\">123</span>) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"F12被禁用\"</span>);</span><br><span class=\"line\">    event.keyCode = <span class=\"number\">0</span>;</span><br><span class=\"line\">    event.returnValue = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event &amp;&amp; <span class=\"built_in\">window</span>.event.keyCode == <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.event.keyCode = <span class=\"number\">505</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event &amp;&amp; <span class=\"built_in\">window</span>.event.keyCode == <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">    alert(str + <span class=\"string\">\"\\n请使用Del键进行字符的删除操作！\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.event.returnValue = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"屏蔽右键菜单\"><a href=\"#屏蔽右键菜单\" class=\"headerlink\" title=\"屏蔽右键菜单\"></a>屏蔽右键菜单</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event) &#123;</span><br><span class=\"line\">    event = <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> the = event.srcElement;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !(</span><br><span class=\"line\">        (the.tagName == <span class=\"string\">\"INPUT\"</span> &amp;&amp; the.type.toLowerCase() == <span class=\"string\">\"text\"</span>) ||</span><br><span class=\"line\">        the.tagName == <span class=\"string\">\"TEXTAREA\"</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"屏蔽粘贴\"><a href=\"#屏蔽粘贴\" class=\"headerlink\" title=\"屏蔽粘贴\"></a>屏蔽粘贴</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.onpaste = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event) &#123;</span><br><span class=\"line\">    event = <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> the = event.srcElement;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !(</span><br><span class=\"line\">        (the.tagName == <span class=\"string\">\"INPUT\"</span> &amp;&amp; the.type.toLowerCase() == <span class=\"string\">\"text\"</span>) ||</span><br><span class=\"line\">        the.tagName == <span class=\"string\">\"TEXTAREA\"</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"屏蔽复制\"><a href=\"#屏蔽复制\" class=\"headerlink\" title=\"屏蔽复制\"></a>屏蔽复制</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncopy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event) &#123;</span><br><span class=\"line\">    event = <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> the = event.srcElement;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !(</span><br><span class=\"line\">        (the.tagName == <span class=\"string\">\"INPUT\"</span> &amp;&amp; the.type.toLowerCase() == <span class=\"string\">\"text\"</span>) ||</span><br><span class=\"line\">        the.tagName == <span class=\"string\">\"TEXTAREA\"</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"屏蔽剪切\"><a href=\"#屏蔽剪切\" class=\"headerlink\" title=\"屏蔽剪切\"></a>屏蔽剪切</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncut = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event) &#123;</span><br><span class=\"line\">    event = <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> the = event.srcElement;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !(</span><br><span class=\"line\">        (the.tagName == <span class=\"string\">\"INPUT\"</span> &amp;&amp; the.type.toLowerCase() == <span class=\"string\">\"text\"</span>) ||</span><br><span class=\"line\">        the.tagName == <span class=\"string\">\"TEXTAREA\"</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"屏蔽选中\"><a href=\"#屏蔽选中\" class=\"headerlink\" title=\"屏蔽选中\"></a>屏蔽选中</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.onselectstart = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event) &#123;</span><br><span class=\"line\">    event = <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> the = event.srcElement;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !(</span><br><span class=\"line\">        (the.tagName == <span class=\"string\">\"INPUT\"</span> &amp;&amp; the.type.toLowerCase() == <span class=\"string\">\"text\"</span>) ||</span><br><span class=\"line\">        the.tagName == <span class=\"string\">\"TEXTAREA\"</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>凡事无绝对，没法做到真正禁止。浏览器菜单里查看页面源代码，直接ctrl+s，爬虫<br>对于页面安全性研究不深，代码来源网上寻找，用时自取。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于一些网页，如原创文章，我们不希望用户对我们的网页文章内容拷贝粘贴，所以前端可以做一些操作去禁止，但这种操作也只是防君子不防小人，上有政策下有对策，还是有方法破解的。</p>\n<h2 id=\"先说破解禁止-F12-方法\"><a href=\"#先说破解禁止-F12-方法\" class=\"headerlink\" title=\"先说破解禁止 F12 方法\"></a>先说破解禁止 F12 方法</h2><p>遇到有些网页禁止 F12 审查，我们可以用空白网页先开调试模式，再在地址栏输入网址进入网页</p>\n<h2 id=\"简单禁止-F12-审查\"><a href=\"#简单禁止-F12-审查\" class=\"headerlink\" title=\"简单禁止 F12 审查\"></a>简单禁止 F12 审查</h2><p>此方法就是 js 监听 F12 键盘事件去做操作(不安全，存在绕过漏洞)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.onkeydown = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event &amp;&amp; <span class=\"built_in\">window</span>.event.keyCode == <span class=\"number\">123</span>) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"F12被禁用\"</span>);</span><br><span class=\"line\">    event.keyCode = <span class=\"number\">0</span>;</span><br><span class=\"line\">    event.returnValue = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event &amp;&amp; <span class=\"built_in\">window</span>.event.keyCode == <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.event.keyCode = <span class=\"number\">505</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event &amp;&amp; <span class=\"built_in\">window</span>.event.keyCode == <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">    alert(str + <span class=\"string\">\"\\n请使用Del键进行字符的删除操作！\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.event.returnValue = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"屏蔽右键菜单\"><a href=\"#屏蔽右键菜单\" class=\"headerlink\" title=\"屏蔽右键菜单\"></a>屏蔽右键菜单</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncontextmenu = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event) &#123;</span><br><span class=\"line\">    event = <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> the = event.srcElement;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !(</span><br><span class=\"line\">        (the.tagName == <span class=\"string\">\"INPUT\"</span> &amp;&amp; the.type.toLowerCase() == <span class=\"string\">\"text\"</span>) ||</span><br><span class=\"line\">        the.tagName == <span class=\"string\">\"TEXTAREA\"</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"屏蔽粘贴\"><a href=\"#屏蔽粘贴\" class=\"headerlink\" title=\"屏蔽粘贴\"></a>屏蔽粘贴</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.onpaste = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event) &#123;</span><br><span class=\"line\">    event = <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> the = event.srcElement;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !(</span><br><span class=\"line\">        (the.tagName == <span class=\"string\">\"INPUT\"</span> &amp;&amp; the.type.toLowerCase() == <span class=\"string\">\"text\"</span>) ||</span><br><span class=\"line\">        the.tagName == <span class=\"string\">\"TEXTAREA\"</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"屏蔽复制\"><a href=\"#屏蔽复制\" class=\"headerlink\" title=\"屏蔽复制\"></a>屏蔽复制</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncopy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event) &#123;</span><br><span class=\"line\">    event = <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> the = event.srcElement;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !(</span><br><span class=\"line\">        (the.tagName == <span class=\"string\">\"INPUT\"</span> &amp;&amp; the.type.toLowerCase() == <span class=\"string\">\"text\"</span>) ||</span><br><span class=\"line\">        the.tagName == <span class=\"string\">\"TEXTAREA\"</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"屏蔽剪切\"><a href=\"#屏蔽剪切\" class=\"headerlink\" title=\"屏蔽剪切\"></a>屏蔽剪切</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.oncut = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event) &#123;</span><br><span class=\"line\">    event = <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> the = event.srcElement;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !(</span><br><span class=\"line\">        (the.tagName == <span class=\"string\">\"INPUT\"</span> &amp;&amp; the.type.toLowerCase() == <span class=\"string\">\"text\"</span>) ||</span><br><span class=\"line\">        the.tagName == <span class=\"string\">\"TEXTAREA\"</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"屏蔽选中\"><a href=\"#屏蔽选中\" class=\"headerlink\" title=\"屏蔽选中\"></a>屏蔽选中</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.onselectstart = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event) &#123;</span><br><span class=\"line\">    event = <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> the = event.srcElement;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !(</span><br><span class=\"line\">        (the.tagName == <span class=\"string\">\"INPUT\"</span> &amp;&amp; the.type.toLowerCase() == <span class=\"string\">\"text\"</span>) ||</span><br><span class=\"line\">        the.tagName == <span class=\"string\">\"TEXTAREA\"</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>凡事无绝对，没法做到真正禁止。浏览器菜单里查看页面源代码，直接ctrl+s，爬虫<br>对于页面安全性研究不深，代码来源网上寻找，用时自取。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckmu8hyot0000y4tzwx3lfnqg","category_id":"ckmu8hyp20002y4tz6xftfx41","_id":"ckmu8hypg000cy4tzyj055tq3"},{"post_id":"ckmu8hyp60004y4tzrknic3ju","category_id":"ckmu8hypb0007y4tze67e1o6i","_id":"ckmu8hypn000iy4tzerpyp4ca"},{"post_id":"ckmu8hyp80005y4tzivl2h1w5","category_id":"ckmu8hyph000dy4tz5z0p0gdj","_id":"ckmu8hypt000oy4tzrboz1tdo"},{"post_id":"ckmu8hypa0006y4tzwyi2o5fj","category_id":"ckmu8hypn000jy4tz814mz906","_id":"ckmu8hyq2000wy4tzcfsdg7xo"},{"post_id":"ckmu8hypr000ny4tzpor9jdjl","category_id":"ckmu8hyp20002y4tz6xftfx41","_id":"ckmu8hyq40010y4tz3p3lneun"},{"post_id":"ckmu8hypu000ry4tz1w9x92js","category_id":"ckmu8hyp20002y4tz6xftfx41","_id":"ckmu8hyq70013y4tz189rjjyr"},{"post_id":"ckmu8hypd000ay4tza8l3t081","category_id":"ckmu8hyph000dy4tz5z0p0gdj","_id":"ckmu8hyqb0018y4tzinaax36g"},{"post_id":"ckmu8hyq3000yy4tzgfiijw5z","category_id":"ckmu8hyph000dy4tz5z0p0gdj","_id":"ckmu8hyqd001by4tznfwhw27v"},{"post_id":"ckmu8hypf000by4tzec79cz1n","category_id":"ckmu8hyq1000vy4tz12xp4tdf","_id":"ckmu8hyqh001gy4tz2nf8y1r5"},{"post_id":"ckmu8hyq70014y4tzeewe6qn5","category_id":"ckmu8hyp20002y4tz6xftfx41","_id":"ckmu8hyqj001jy4tzjycczi54"},{"post_id":"ckmu8hyqc0019y4tz17yy00va","category_id":"ckmu8hypn000jy4tz814mz906","_id":"ckmu8hyqo001oy4tz6i8hjiwq"},{"post_id":"ckmu8hypi000fy4tzae3zbvfi","category_id":"ckmu8hyq1000vy4tz12xp4tdf","_id":"ckmu8hyqp001qy4tz1e2vvb5s"},{"post_id":"ckmu8hyqh001hy4tz3jgxwy3m","category_id":"ckmu8hypn000jy4tz814mz906","_id":"ckmu8hyqs001uy4tzu54li0zz"},{"post_id":"ckmu8hypk000hy4tz51im3n1l","category_id":"ckmu8hyqf001dy4tz5ugq5t82","_id":"ckmu8hyqt001wy4tzpnud2m3x"},{"post_id":"ckmu8hyqk001ky4tzd2uu9a2y","category_id":"ckmu8hyp20002y4tz6xftfx41","_id":"ckmu8hyqu001zy4tzvvcenjun"},{"post_id":"ckmu8hypp000ly4tzh5cw1k01","category_id":"ckmu8hyq1000vy4tz12xp4tdf","_id":"ckmu8hyqv0021y4tz2s4ravv7"},{"post_id":"ckmu8hyq50011y4tz0ga444w6","category_id":"ckmu8hyqq001ry4tz8adwd4pc","_id":"ckmu8hyqw0022y4tzm317ofim"},{"post_id":"ckmu8hyqe001cy4tzeoe4fw7b","category_id":"ckmu8hyp20002y4tz6xftfx41","_id":"ckmu8hyqy0025y4tzw0j3uymt"},{"post_id":"ckmu8hyqe001cy4tzeoe4fw7b","category_id":"ckmu8hyqt001xy4tznfrllm8n","_id":"ckmu8hyqz0027y4tzvw5l36jg"},{"post_id":"ckmu8hyr6002by4tzj6i6ke8h","category_id":"ckmu8hyp20002y4tz6xftfx41","_id":"ckmu8hyr8002dy4tzrs7e6lym"}],"PostTag":[{"post_id":"ckmu8hyot0000y4tzwx3lfnqg","tag_id":"ckmu8hyp50003y4tz93re26j8","_id":"ckmu8hypc0009y4tzt29895rv"},{"post_id":"ckmu8hyp60004y4tzrknic3ju","tag_id":"ckmu8hypb0008y4tzt9ce0mah","_id":"ckmu8hypj000gy4tzawsuef2k"},{"post_id":"ckmu8hyp80005y4tzivl2h1w5","tag_id":"ckmu8hyph000ey4tzuwaseq08","_id":"ckmu8hypq000my4tz9hs9p7w9"},{"post_id":"ckmu8hypa0006y4tzwyi2o5fj","tag_id":"ckmu8hypo000ky4tzecr60xw0","_id":"ckmu8hypy000sy4tzivcxnhxz"},{"post_id":"ckmu8hypr000ny4tzpor9jdjl","tag_id":"ckmu8hypb0008y4tzt9ce0mah","_id":"ckmu8hyq1000uy4tzttzd7ddi"},{"post_id":"ckmu8hypu000ry4tz1w9x92js","tag_id":"ckmu8hypb0008y4tzt9ce0mah","_id":"ckmu8hyq4000zy4tzkjxufv4x"},{"post_id":"ckmu8hypd000ay4tza8l3t081","tag_id":"ckmu8hyph000ey4tzuwaseq08","_id":"ckmu8hyq70012y4tzg5e9n8w6"},{"post_id":"ckmu8hyq3000yy4tzgfiijw5z","tag_id":"ckmu8hyph000ey4tzuwaseq08","_id":"ckmu8hyqb0017y4tzlkc0bejj"},{"post_id":"ckmu8hypf000by4tzec79cz1n","tag_id":"ckmu8hyq2000xy4tzuc3lg0b3","_id":"ckmu8hyqd001ay4tz0rfiqq3c"},{"post_id":"ckmu8hyqc0019y4tz17yy00va","tag_id":"ckmu8hypo000ky4tzecr60xw0","_id":"ckmu8hyqh001fy4tz70e2y1es"},{"post_id":"ckmu8hypi000fy4tzae3zbvfi","tag_id":"ckmu8hyq2000xy4tzuc3lg0b3","_id":"ckmu8hyqj001iy4tzunvysr9y"},{"post_id":"ckmu8hyqh001hy4tz3jgxwy3m","tag_id":"ckmu8hypo000ky4tzecr60xw0","_id":"ckmu8hyqo001ny4tzyjmgt0fh"},{"post_id":"ckmu8hypk000hy4tz51im3n1l","tag_id":"ckmu8hyqg001ey4tzcw79d1wi","_id":"ckmu8hyqp001py4tzqkwyca3l"},{"post_id":"ckmu8hyqk001ky4tzd2uu9a2y","tag_id":"ckmu8hyp50003y4tz93re26j8","_id":"ckmu8hyqr001ty4tz7v6ji1nf"},{"post_id":"ckmu8hypp000ly4tzh5cw1k01","tag_id":"ckmu8hyq2000xy4tzuc3lg0b3","_id":"ckmu8hyqs001vy4tzophekdig"},{"post_id":"ckmu8hyq50011y4tz0ga444w6","tag_id":"ckmu8hyqr001sy4tz2iszmg6s","_id":"ckmu8hyqv0020y4tz0unml2p7"},{"post_id":"ckmu8hyq70014y4tzeewe6qn5","tag_id":"ckmu8hyqu001yy4tz8x4yaenb","_id":"ckmu8hyqx0024y4tzho1vamyw"},{"post_id":"ckmu8hyqe001cy4tzeoe4fw7b","tag_id":"ckmu8hyqw0023y4tzpwtswe62","_id":"ckmu8hyqz0028y4tzns32b04d"},{"post_id":"ckmu8hyqe001cy4tzeoe4fw7b","tag_id":"ckmu8hyqy0026y4tz2o2fonvs","_id":"ckmu8hyr00029y4tzn51wnpcc"},{"post_id":"ckmu8hyr6002by4tzj6i6ke8h","tag_id":"ckmu8hyp50003y4tz93re26j8","_id":"ckmu8hyr7002cy4tzghd3776g"}],"Tag":[{"name":"js基础","_id":"ckmu8hyp50003y4tz93re26j8"},{"name":"js","_id":"ckmu8hypb0008y4tzt9ce0mah"},{"name":"vue","_id":"ckmu8hyph000ey4tzuwaseq08"},{"name":"CSS","_id":"ckmu8hypo000ky4tzecr60xw0"},{"name":"gulp","_id":"ckmu8hyq2000xy4tzuc3lg0b3"},{"name":"elementUI","_id":"ckmu8hyqg001ey4tzcw79d1wi"},{"name":"mysql","_id":"ckmu8hyqr001sy4tz2iszmg6s"},{"name":"性能测试","_id":"ckmu8hyqu001yy4tz8x4yaenb"},{"name":"SSR","_id":"ckmu8hyqw0023y4tzpwtswe62"},{"name":"Nuxt","_id":"ckmu8hyqy0026y4tz2o2fonvs"}]}}