{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/tou.jpg","path":"images/tou.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/tou.jpg","path":"img/tou.jpg","modified":0,"renderable":1},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1510733361000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1510733361000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1510733361000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1510733361000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1510733361000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1510733361000},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1510733361000},{"_id":"themes/yilia/_config.yml","hash":"53054a37fc40165f218fcf9f160954525c9e2799","modified":1567563637157},{"_id":"themes/yilia/favicon.ico","hash":"7e3d33f03e444045c4d611ab6df575c6fdd65d69","modified":1567561075947},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1510733361000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1510733361000},{"_id":"source/_posts/==的隐式转换.md","hash":"8baf088b3c1c74527048b78c7a09cb8e9f2d162f","modified":1567495699898},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1555555979036},{"_id":"source/_posts/javascript中的Map.md","hash":"bb2d1c15f61587155dda50f89096ea72a09f5819","modified":1567495714240},{"_id":"source/_posts/javascript垃圾回收机制.md","hash":"b8fb93ae09e31dd51c210e40dd4989542594a0c4","modified":1567495708140},{"_id":"source/categories/index.md","hash":"93ce07dfb9ebd3f581f6afc9a379eed020e77768","modified":1567497516953},{"_id":"source/images/tou.jpg","hash":"f9b6df945f8c7f6ddc81287053c43b3a861d9047","modified":1555572542107},{"_id":"source/tags/index.md","hash":"0858e99660367272f233f5dd3deba3efd25e361d","modified":1567562046878},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1567495125567},{"_id":"themes/yilia/.git/config","hash":"316bc92d9936dc739c39161838a28fb4641cbea2","modified":1567495125569},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1567495125571},{"_id":"themes/yilia/.git/index","hash":"e94926dee21b1aef70035833a98610b755cb9397","modified":1567495130003},{"_id":"themes/yilia/.git/packed-refs","hash":"76b1aa9479dd3de329935b6d94a6624c5f716d23","modified":1567495125689},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1510733361000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1510733361000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1510733361000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1510733361000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1510733361000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1510733361000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1510733361000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1567495125763},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1567495125764},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1510733361000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1510733361000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1567495125768},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1567495125770},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1567495125771},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1567495125792},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1510733361000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1510733361000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1567495125758},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1510733361000},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1510733361000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1567495125573},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1567495125574},{"_id":"themes/yilia/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1567495125576},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1567495125577},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1567495125579},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1567495125583},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1567495125584},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1567495125586},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1567495125587},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1567495125589},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1567495125590},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1567495125594},{"_id":"themes/yilia/.git/logs/HEAD","hash":"4a8b5677fe3b86f23c6ccdd741c5f342f40a0fee","modified":1567495125598},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1567495125731},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1510733361000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1567495125776},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1567495125778},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1510733361000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1567495125781},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1567495125784},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1567495125783},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1567495125787},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1567495125788},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1567495125789},{"_id":"themes/yilia/source/img/tou.jpg","hash":"f9b6df945f8c7f6ddc81287053c43b3a861d9047","modified":1567495125791},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1510733361000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1510733361000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1510733361000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1510733361000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1510733361000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1510733361000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1510733361000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1510733361000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1510733361000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1510733361000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1510733361000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1567495125833},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1510733361000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1510733361000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1510733361000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1510733361000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1510733361000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1510733361000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1510733361000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1510733361000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1510733361000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1510733361000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1510733361000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1510733361000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1510733361000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1510733361000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1510733361000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1510733361000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1510733361000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1510733361000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1510733361000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1510733361000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1510733361000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1510733361000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1510733361000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1510733361000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1510733361000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1510733361000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1510733361000},{"_id":"themes/yilia/.git/objects/pack/pack-db2e8c7854ef417284a531f7f2e4126427dcb1c6.idx","hash":"a825f430536fd27fc10de5dc24bcc4e8facaa9b0","modified":1567495125611},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1567495125693},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1510733361000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1510733361000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1510733361000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1510733361000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1510733361000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1510733361000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1510733361000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1567495125825},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1510733361000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1567495125838},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1567495125840},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1567495125841},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1567495125828},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1567495125829},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"4a8b5677fe3b86f23c6ccdd741c5f342f40a0fee","modified":1567495125602},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1567495125700},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"4a8b5677fe3b86f23c6ccdd741c5f342f40a0fee","modified":1567495125605},{"_id":"themes/yilia/.git/objects/pack/pack-db2e8c7854ef417284a531f7f2e4126427dcb1c6.pack","hash":"a4a12bf32fe7ce0e90369c0e504be9650efe0e7a","modified":1567495125640},{"_id":"public/content.json","hash":"1664e7c0d43680806f39cea74651baff638adaef","modified":1567561113609},{"_id":"public/categories/index.html","hash":"862f1c852c7da9725cf9c92193281f4ec89cfc10","modified":1567564224207},{"_id":"public/tags/index.html","hash":"24e08f5040069f3ba5cd74b34a7799f7536d502b","modified":1567564224207},{"_id":"public/2019/09/03/hello-world/index.html","hash":"0ea39cbb55d870b9b56893a4cc1c36bdc16513ce","modified":1567564224207},{"_id":"public/2019/08/26/javascript中的Map/index.html","hash":"8071c9c01d36ddb52725338512cbe1cf20948e2d","modified":1567564224207},{"_id":"public/2019/07/01/javascript垃圾回收机制/index.html","hash":"c79a7151ce832b0839b1a74faf79a14c165e84e0","modified":1567564224208},{"_id":"public/2019/04/28/==的隐式转换/index.html","hash":"3cf06bfa156a929f3e47a4b61e4bbe4a1cc42c0b","modified":1567564224208},{"_id":"public/categories/JavaScript/index.html","hash":"a124759911887aceb3ef229dc7be9a0ac52064cd","modified":1567564224209},{"_id":"public/archives/index.html","hash":"20cdd91b0cca413a0ffbe5deb6343572553679ed","modified":1567564224208},{"_id":"public/archives/2019/index.html","hash":"157db20e59f8d6fe9fccd1cf32338190d67ce4f6","modified":1567564224208},{"_id":"public/archives/2019/04/index.html","hash":"3315a2ab78e257c98464dfc8552f8153277d2e74","modified":1567564224209},{"_id":"public/archives/2019/07/index.html","hash":"c3f752b467b7800eaeee7a0746234a67c7eada8f","modified":1567564224209},{"_id":"public/archives/2019/08/index.html","hash":"1014481d81fb2a5b39b3c247f0fe40f059ad6ee7","modified":1567564224209},{"_id":"public/archives/2019/09/index.html","hash":"b82035d74b2d0f27f6c8295223dcab8def8ae375","modified":1567564224209},{"_id":"public/index.html","hash":"a12558d5c4427e0fd5a109ba46c08d6e02bd75b9","modified":1567564224209},{"_id":"public/tags/js/index.html","hash":"61c9f39b5e96b22a5a8ebf1628aa90cbc3124b90","modified":1567564224209},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1567561114149},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1567561114149},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1567564171043},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1567561114150},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1567561114150},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1567561114150},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1567561114150},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1567561114150},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1567561114150},{"_id":"public/img/tou.jpg","hash":"f9b6df945f8c7f6ddc81287053c43b3a861d9047","modified":1567561114150},{"_id":"public/images/tou.jpg","hash":"f9b6df945f8c7f6ddc81287053c43b3a861d9047","modified":1567561114155},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1567561114175},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1567561114176},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1567561114186},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1567561114195},{"_id":"source/images/favicon.ico","hash":"7e3d33f03e444045c4d611ab6df575c6fdd65d69","modified":1567562265647},{"_id":"public/images/favicon.ico","hash":"7e3d33f03e444045c4d611ab6df575c6fdd65d69","modified":1567562451754}],"Category":[{"name":"JavaScript","_id":"ck04levvj000660ucf5i3pezf"}],"Data":[],"Page":[{"title":"categories","date":"2019-09-03T07:58:25.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-09-03 15:58:25\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-09-03T07:58:36.953Z","path":"categories/index.html","layout":"page","_id":"ck04levv0000160uc674tyc14","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-08-29T09:09:57.000Z","slug":"tags","noDate":"true","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-08-29 17:09:57\nslug: tags \nnoDate: \"true\"\ncomments: false\n---\n","updated":"2019-09-04T01:54:06.878Z","path":"tags/index.html","_id":"ck04levv5000360uc34tcvb7o","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"==的隐式转换","date":"2019-04-28T01:13:40.000Z","_content":"\n## 前言\n==在js中用到的很多，大家都知道两个等于号只判断值，===值和类型都会判断，接下来我们就来看看==是如何判断的\n \n```js\n     对象\n        \\\n        字符串   布尔值\n          \\      /\n            数值\n\n\n1. 对象和布尔值比较\n对象和布尔值进行比较时，对象先转换为字符串，然后再转换为数字，布尔值直接转换为数字\n[] == true;  //false  []转换为字符串'',然后转换为数字0,true转换为数字1，所以为false\n\n2. 对象和字符串比较\n对象和字符串进行比较时，对象转换为字符串，然后两者进行比较。\n[1,2,3] == '1,2,3' // true  [1,2,3]转化为'1,2,3'，然后和'1,2,3'， so结果为true;\n\n3. 对象和数字比较\n对象和数字进行比较时，对象先转换为字符串，然后转换为数字，再和数字进行比较。\n[1] == 1;  // true  `对象先转换为字符串再转换为数字，二者再比较 [1] => '1' => 1 所以结果为true\n\n4. 字符串和数字比较\n字符串和数字进行比较时，字符串转换成数字，二者再比较。\n'1' == 1 // true\n\n5. 字符串和布尔值比较\n字符串和布尔值进行比较时，二者全部转换成数值再比较。\n'1' == true; // true \n\n6. 布尔值和数字比较\n布尔值和数字进行比较时，布尔转换为数字，二者比较。\ntrue == 1 // true\n\n7. other\n来看一个有趣的题\n[] == false;\n![] == false;\n还有一些需要记住的，像：\nundefined == null //true undefined和null 比较返回true，二者和其他值比较返回false\nNumber(null) //0\n```","source":"_posts/==的隐式转换.md","raw":"---\ntitle: ==的隐式转换\ndate: 2019-04-28 09:13:40\ntags:\n---\n\n## 前言\n==在js中用到的很多，大家都知道两个等于号只判断值，===值和类型都会判断，接下来我们就来看看==是如何判断的\n \n```js\n     对象\n        \\\n        字符串   布尔值\n          \\      /\n            数值\n\n\n1. 对象和布尔值比较\n对象和布尔值进行比较时，对象先转换为字符串，然后再转换为数字，布尔值直接转换为数字\n[] == true;  //false  []转换为字符串'',然后转换为数字0,true转换为数字1，所以为false\n\n2. 对象和字符串比较\n对象和字符串进行比较时，对象转换为字符串，然后两者进行比较。\n[1,2,3] == '1,2,3' // true  [1,2,3]转化为'1,2,3'，然后和'1,2,3'， so结果为true;\n\n3. 对象和数字比较\n对象和数字进行比较时，对象先转换为字符串，然后转换为数字，再和数字进行比较。\n[1] == 1;  // true  `对象先转换为字符串再转换为数字，二者再比较 [1] => '1' => 1 所以结果为true\n\n4. 字符串和数字比较\n字符串和数字进行比较时，字符串转换成数字，二者再比较。\n'1' == 1 // true\n\n5. 字符串和布尔值比较\n字符串和布尔值进行比较时，二者全部转换成数值再比较。\n'1' == true; // true \n\n6. 布尔值和数字比较\n布尔值和数字进行比较时，布尔转换为数字，二者比较。\ntrue == 1 // true\n\n7. other\n来看一个有趣的题\n[] == false;\n![] == false;\n还有一些需要记住的，像：\nundefined == null //true undefined和null 比较返回true，二者和其他值比较返回false\nNumber(null) //0\n```","slug":"==的隐式转换","published":1,"updated":"2019-09-03T07:28:19.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck04levus000060ucfk02sjhx","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>==在js中用到的很多，大家都知道两个等于号只判断值，===值和类型都会判断，接下来我们就来看看==是如何判断的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     对象</span><br><span class=\"line\">        \\</span><br><span class=\"line\">        字符串   布尔值</span><br><span class=\"line\">          \\      /</span><br><span class=\"line\">            数值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 对象和布尔值比较</span><br><span class=\"line\">对象和布尔值进行比较时，对象先转换为字符串，然后再转换为数字，布尔值直接转换为数字</span><br><span class=\"line\">[] == <span class=\"literal\">true</span>;  <span class=\"comment\">//false  []转换为字符串'',然后转换为数字0,true转换为数字1，所以为false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 对象和字符串比较</span><br><span class=\"line\">对象和字符串进行比较时，对象转换为字符串，然后两者进行比较。</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] == <span class=\"string\">'1,2,3'</span> <span class=\"comment\">// true  [1,2,3]转化为'1,2,3'，然后和'1,2,3'， so结果为true;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> 对象和数字比较</span><br><span class=\"line\">对象和数字进行比较时，对象先转换为字符串，然后转换为数字，再和数字进行比较。</span><br><span class=\"line\">[<span class=\"number\">1</span>] == <span class=\"number\">1</span>;  <span class=\"comment\">// true  `对象先转换为字符串再转换为数字，二者再比较 [1] =&gt; '1' =&gt; 1 所以结果为true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span> 字符串和数字比较</span><br><span class=\"line\">字符串和数字进行比较时，字符串转换成数字，二者再比较。</span><br><span class=\"line\"><span class=\"string\">'1'</span> == <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span> 字符串和布尔值比较</span><br><span class=\"line\">字符串和布尔值进行比较时，二者全部转换成数值再比较。</span><br><span class=\"line\"><span class=\"string\">'1'</span> == <span class=\"literal\">true</span>; <span class=\"comment\">// true </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span> 布尔值和数字比较</span><br><span class=\"line\">布尔值和数字进行比较时，布尔转换为数字，二者比较。</span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7.</span> other</span><br><span class=\"line\">来看一个有趣的题</span><br><span class=\"line\">[] == <span class=\"literal\">false</span>;</span><br><span class=\"line\">![] == <span class=\"literal\">false</span>;</span><br><span class=\"line\">还有一些需要记住的，像：</span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">null</span> <span class=\"comment\">//true undefined和null 比较返回true，二者和其他值比较返回false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">null</span>) <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>==在js中用到的很多，大家都知道两个等于号只判断值，===值和类型都会判断，接下来我们就来看看==是如何判断的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     对象</span><br><span class=\"line\">        \\</span><br><span class=\"line\">        字符串   布尔值</span><br><span class=\"line\">          \\      /</span><br><span class=\"line\">            数值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 对象和布尔值比较</span><br><span class=\"line\">对象和布尔值进行比较时，对象先转换为字符串，然后再转换为数字，布尔值直接转换为数字</span><br><span class=\"line\">[] == <span class=\"literal\">true</span>;  <span class=\"comment\">//false  []转换为字符串'',然后转换为数字0,true转换为数字1，所以为false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 对象和字符串比较</span><br><span class=\"line\">对象和字符串进行比较时，对象转换为字符串，然后两者进行比较。</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] == <span class=\"string\">'1,2,3'</span> <span class=\"comment\">// true  [1,2,3]转化为'1,2,3'，然后和'1,2,3'， so结果为true;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> 对象和数字比较</span><br><span class=\"line\">对象和数字进行比较时，对象先转换为字符串，然后转换为数字，再和数字进行比较。</span><br><span class=\"line\">[<span class=\"number\">1</span>] == <span class=\"number\">1</span>;  <span class=\"comment\">// true  `对象先转换为字符串再转换为数字，二者再比较 [1] =&gt; '1' =&gt; 1 所以结果为true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span> 字符串和数字比较</span><br><span class=\"line\">字符串和数字进行比较时，字符串转换成数字，二者再比较。</span><br><span class=\"line\"><span class=\"string\">'1'</span> == <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span> 字符串和布尔值比较</span><br><span class=\"line\">字符串和布尔值进行比较时，二者全部转换成数值再比较。</span><br><span class=\"line\"><span class=\"string\">'1'</span> == <span class=\"literal\">true</span>; <span class=\"comment\">// true </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span> 布尔值和数字比较</span><br><span class=\"line\">布尔值和数字进行比较时，布尔转换为数字，二者比较。</span><br><span class=\"line\"><span class=\"literal\">true</span> == <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7.</span> other</span><br><span class=\"line\">来看一个有趣的题</span><br><span class=\"line\">[] == <span class=\"literal\">false</span>;</span><br><span class=\"line\">![] == <span class=\"literal\">false</span>;</span><br><span class=\"line\">还有一些需要记住的，像：</span><br><span class=\"line\"><span class=\"literal\">undefined</span> == <span class=\"literal\">null</span> <span class=\"comment\">//true undefined和null 比较返回true，二者和其他值比较返回false</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">null</span>) <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-09-03T07:03:23.867Z","updated":"2019-04-18T02:52:59.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck04levv2000260ucabvj7ve7","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"layout":"post","title":"javascript中的Map","date":"2019-08-26T02:53:41.000Z","_content":"\n\n# 探究javascript Map\n什么是Map，此处说的Map，非js中的map( )方法,下文会详细解释。  \nMap 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。  \nECMAScript6原生实现了Map类，即我们所说的字典，字典和集合很像，不过集合是以值值得形式存储元素，字典则是以键值的形式存储元素。字典也叫映射。\n## 语法\n\n```js\nnew Map([iterable])\n```\niterable (可迭代传参)\nIterable 可以是一个数组或者其他 iterable 对象，其元素为键值对(两个元素的数组，例如: [[ 1, 'one' ],[ 2, 'two' ]])。 每个键值对都会添加到新的 Map。null 会被当做 undefined。\n\n## 描述\n\n一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个  for...of 循环在每次迭代后会返回一个形式为[key，value]的数组。\n\n键的比较是基于 \"SameValueZero\" 算法：NaN 是与 NaN 相等的（虽然 NaN !== NaN），剩下所有其它的值是根据 === 运算符的结果判断是否相等。 \n\nObjects 和 Maps 类似的是，它们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（并且也没有其他内建的替代方式了）过去我们一直都把对象当成 Maps 使用。不过 Maps 和 Objects 有一些重要的区别，在下列情况里使用 Map 会是更好的选择：\n\n* 一个Object的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值，包括函数、对象、基本类型。\n* Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。\n* 你可以通过 size 属性直接获取一个 Map 的键值对个数，而 Object 的键值对个数只能手动计算。\n* Map 可直接进行迭代，而 Object 的迭代需要先获取它的键数组，然后再进行迭代。\n* Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然 ES5 开始可以用 map = Object.create(null) 来创建一个没有原型的对象，但是这种用法不太常见。\n* Map 在涉及频繁增删键值对的场景下会有些性能优势。\n\n最大的差别其实就是：object的键的类型是 字符串；map的键的类型是 可以是任意类型;  \nobject获取键值使用Object.keys（返回数组）；Map获取键值使用 map变量.keys() (返回迭代器)。\n\n\n## 属性\n\n* Map.length \n\n* get Map[@@species]\n\n* Map.prototype\n\n## Map 实例\n\n### *属性\nMap.prototype.constructor  \n返回一个函数，它创建了实例的原型。默认是Map函数。\n\nMap.prototype.size  \n返回Map对象的键/值对的数量。\n\n### *方法\n\nMap.prototype.clear()\n移除Map对象的所有键/值对 。\n\nMap.prototype.delete(key)\n如果 Map 对象中存在该元素，则移除它并返回 true；否则如果该元素不存在则返回 false\n\nMap.prototype.entries()\n返回一个新的 Iterator 对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。\n\nMap.prototype.forEach(callbackFn[, thisArg])\n按插入顺序，为 Map对象里的每一键值对调用一次callbackFn函数。如果为forEach提供了thisArg，它将在每次回调中作为this值。\n\nMap.prototype.get(key)\n返回键对应的值，如果不存在，则返回undefined。\n\nMap.prototype.has(key)\n返回一个布尔值，表示Map实例是否包含键对应的值。\n\nMap.prototype.keys()\n返回一个新的 Iterator对象， 它按插入顺序包含了Map对象中每个元素的键 。\n\nMap.prototype.set(key, value)\n设置Map对象中键的值。返回该Map对象。\n\nMap.prototype.values()\n返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的值 。\n\nMap.prototype[@@iterator]()\n返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。\n\n## 实例\n\n### 使用 Map 对象\n```js\nvar myMap = new Map();\n \nvar keyObj = {},\n    keyFunc = function () {},\n    keyString = \"a string\";\n \n// 添加键\nmyMap.set(keyString, \"和键'a string'关联的值\");\nmyMap.set(keyObj, \"和键keyObj关联的值\");\nmyMap.set(keyFunc, \"和键keyFunc关联的值\");\n \nmyMap.size; // 3\n \n// 读取值\nmyMap.get(keyString);    // \"和键'a string'关联的值\"\nmyMap.get(keyObj);       // \"和键keyObj关联的值\"\nmyMap.get(keyFunc);      // \"和键keyFunc关联的值\"\n \nmyMap.get(\"a string\");   // \"和键'a string'关联的值\"\n                         // 因为keyString === 'a string'\nmyMap.get({});           // undefined, 因为keyObj !== {}\nmyMap.get(function() {}) // undefined, 因为keyFunc !== function () {}\n```\n### 使用 for..of 方法迭代 Map\n```js\nvar myMap = new Map();\nmyMap.set(0, \"zero\");\nmyMap.set(1, \"one\");\nfor (var [key, value] of myMap) {\n  console.log(key + \" = \" + value);\n}\n// 将会显示两个log。一个是\"0 = zero\"另一个是\"1 = one\"\n\nfor (var key of myMap.keys()) {\n  console.log(key);\n}\n// 将会显示两个log。 一个是 \"0\" 另一个是 \"1\"\n\nfor (var value of myMap.values()) {\n  console.log(value);\n}\n// 将会显示两个log。 一个是 \"zero\" 另一个是 \"one\"\n\nfor (var [key, value] of myMap.entries()) {\n  console.log(key + \" = \" + value);\n}\n// 将会显示两个log。 一个是 \"0 = zero\" 另一个是 \"1 = one\"\n```\n### 使用 forEach() 方法迭代 Map\n```js\nmyMap.forEach(function(value, key) {\n  console.log(key + \" = \" + value);\n})\n// 将会显示两个logs。 一个是 \"0 = zero\" 另一个是 \"1 = one\"\n```\n### Map 与数组的关系\n```js\nvar kvArray = [[\"key1\", \"value1\"], [\"key2\", \"value2\"]];\n\n// 使用常规的Map构造函数可以将一个二维键值对数组转换成一个Map对象\nvar myMap = new Map(kvArray);\n\nmyMap.get(\"key1\"); // 返回值为 \"value1\"\n\n// 使用Array.from函数可以将一个Map对象转换成一个二维键值对数组\nconsole.log(Array.from(myMap)); // 输出和kvArray相同的数组\n\n// 或者在键或者值的迭代器上使用Array.from，进而得到只含有键或者值的数组\nconsole.log(Array.from(myMap.keys())); // 输出 [\"key1\", \"key2\"]\n```\n### 复制或合并 Maps\n```js\nvar original = new Map([\n  [1, 'one']\n]);\n\nvar clone = new Map(original);\n\nconsole.log(clone.get(1)); // one\nconsole.log(original === clone); // false. Useful for shallow comparison\n```\n请记住，数据本身未被克隆。\n\nMap对象间可以进行合并，但是会保持键的唯一性。\n```js\nvar first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\nvar second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n]);\n\n// 合并两个Map对象时，如果有重复的键值，则后面的会覆盖前面的。\n// 展开运算符本质上是将Map对象转换成数组。\nvar merged = new Map([...first, ...second]);\n\nconsole.log(merged.get(1)); // uno\nconsole.log(merged.get(2)); // dos\nconsole.log(merged.get(3)); // three\n```\nMap对象也能与数组合并：\n```js\nvar first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\nvar second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n]);\n\n// Map对象同数组进行合并时，如果有重复的键值，则后面的会覆盖前面的。\nvar merged = new Map([...first, ...second, [1, 'eins']]);\n\nconsole.log(merged.get(1)); // eins\nconsole.log(merged.get(2)); // dos\nconsole.log(merged.get(3)); // three\n```\n\n\n# 以上讲的是Map，那不得不说map( )是什么\n\nECMAScript5中我们有一个数组方法 map( ),区别于ECMAScript6 中 Map类  \nmap() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。\n\n## 语法\n``` js\nvar new_array = array.map(function callback(currentValue,index,arr), thisValue)\n```\n## 参数\ncallback 生成新数组元素的函数，使用三个参数：  \n* currentValue callback 数组中正在处理的当前元素。  \n* index可选 callback 数组中正在处理的当前元素的索引。  \n* array可选 callback  map 方法被调用的数组。\n\nthisArg可选 执行 callback 函数时使用的this 值。\n\n## 示例\n```js\nvar array1 = [1,3,6];\nconst map1 = array1.map(x => x *2);\nconsole.log(map1);   \n// > Array [2, 6, 12]\n```\n\n```js\nvar array1 = [1, 3,6];\n\nconst map1 = array1.map(x => {\n    if (x == 3) {\n      return x * 2;\n    }\n});\n \nconsole.log(map1);\n\n// > Array [undefined, 6, undefined]\n```\n出现undefined ：只是增加了一个条件，即x的值为3时才乘以2，之所以会出现undefined，是因为map()方法创建了一个新数组，但新数组并不是在遍历完array1后才被赋值的，而是每遍历一次就得到一个值。所以，下面这样修改后就正确了\n```js\nvar array1 = [1, 3,6];\n\nconst map1 = array1.map(x => {\n    if (x == 3) {\n      return x * 2;\n    }\n    return x\n});\n \nconsole.log(map1);\n\n// > Array [2, 6, 12]\n```\n可以使用 map 重新格式化数组中的对象\n```js\nvar oldArray = [{key: 1, value: 10}, \n                {key: 2, value: 20}, \n                {key: 3, value: 30}];\n\nvar nowArr = oldArray.map(function(obj) { \n   var rObj = {};\n   rObj[obj.key] = obj.value;\n   return rObj;\n});\n\n// nowArr 数组为： [{1: 10}, {2: 20}, {3: 30}], \n\n// oldArray 数组未被修改: \n// [{key: 1, value: 10}, \n//  {key: 2, value: 20}, \n//  {key: 3, value: 30}]\n```\n\n# 用ES5模拟实现ES6中的Map类\n\n与Set类一样，我们用Object的实例而不是数组存储元素,我们实现以下方法：\n1.set(key,value):向字典中添加新元素。\n\n2.remove(key):使用键名从字典中移除相应的元素。\n\n3.has(key):如果某个键值存在于字典中，返回true，否则返回false。\n\n4.get(key):通过键名找到指定的值并返回。\n\n5.clear():清空字典。\n\n6.size():返回字典中元素个数。\n\n7.values():将字典所有值以数组形式返回。\n\n8.getItems():返回items变量，代表字典本身。\n\n\n```js\nfunction Map() {\n    var items = {};\n    this.has = function(key){    //has方法判断某个键值是否在字典中\n        return key in items;\n    },\n    this.set = function(key,value){    //set方法为字典添加新元素或更新已有元素\n        items[key] = value;\n    },\n    this.remove = function(key){\n        if (this.has(key)) {\n            delete items[key];\n            return true;\n        }\n        return false;\n    },\n    this.get = function(key){\n        return this.has(key)?items[key]:undefined;\n    },\n    this.values = function(){\n        var values = [];\n         //for...in会遍历出对象原型上的属性，所以要this.hasOwnProperty()方法选出对象自身的属性。\n        for(var k in items){   \n            if (this.hasOwnProperty(k)) {\n                values.push(items[k]);\n            }\n        }\n        return values;\n    },\n    this.clear = function(){\n        items = {};\n    },\n    this.size = function(){\n        return Object.Keys(items).length;\n    },\n    this.getItems = function(){\n        return items;\n    }\n}\n```","source":"_posts/javascript中的Map.md","raw":"---\nlayout: post\ntitle: javascript中的Map\ndate: 2019-08-26 10:53:41\ncategories: \n- JavaScript \ntags:\n- js \n---\n\n\n# 探究javascript Map\n什么是Map，此处说的Map，非js中的map( )方法,下文会详细解释。  \nMap 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。  \nECMAScript6原生实现了Map类，即我们所说的字典，字典和集合很像，不过集合是以值值得形式存储元素，字典则是以键值的形式存储元素。字典也叫映射。\n## 语法\n\n```js\nnew Map([iterable])\n```\niterable (可迭代传参)\nIterable 可以是一个数组或者其他 iterable 对象，其元素为键值对(两个元素的数组，例如: [[ 1, 'one' ],[ 2, 'two' ]])。 每个键值对都会添加到新的 Map。null 会被当做 undefined。\n\n## 描述\n\n一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个  for...of 循环在每次迭代后会返回一个形式为[key，value]的数组。\n\n键的比较是基于 \"SameValueZero\" 算法：NaN 是与 NaN 相等的（虽然 NaN !== NaN），剩下所有其它的值是根据 === 运算符的结果判断是否相等。 \n\nObjects 和 Maps 类似的是，它们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（并且也没有其他内建的替代方式了）过去我们一直都把对象当成 Maps 使用。不过 Maps 和 Objects 有一些重要的区别，在下列情况里使用 Map 会是更好的选择：\n\n* 一个Object的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值，包括函数、对象、基本类型。\n* Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。\n* 你可以通过 size 属性直接获取一个 Map 的键值对个数，而 Object 的键值对个数只能手动计算。\n* Map 可直接进行迭代，而 Object 的迭代需要先获取它的键数组，然后再进行迭代。\n* Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然 ES5 开始可以用 map = Object.create(null) 来创建一个没有原型的对象，但是这种用法不太常见。\n* Map 在涉及频繁增删键值对的场景下会有些性能优势。\n\n最大的差别其实就是：object的键的类型是 字符串；map的键的类型是 可以是任意类型;  \nobject获取键值使用Object.keys（返回数组）；Map获取键值使用 map变量.keys() (返回迭代器)。\n\n\n## 属性\n\n* Map.length \n\n* get Map[@@species]\n\n* Map.prototype\n\n## Map 实例\n\n### *属性\nMap.prototype.constructor  \n返回一个函数，它创建了实例的原型。默认是Map函数。\n\nMap.prototype.size  \n返回Map对象的键/值对的数量。\n\n### *方法\n\nMap.prototype.clear()\n移除Map对象的所有键/值对 。\n\nMap.prototype.delete(key)\n如果 Map 对象中存在该元素，则移除它并返回 true；否则如果该元素不存在则返回 false\n\nMap.prototype.entries()\n返回一个新的 Iterator 对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。\n\nMap.prototype.forEach(callbackFn[, thisArg])\n按插入顺序，为 Map对象里的每一键值对调用一次callbackFn函数。如果为forEach提供了thisArg，它将在每次回调中作为this值。\n\nMap.prototype.get(key)\n返回键对应的值，如果不存在，则返回undefined。\n\nMap.prototype.has(key)\n返回一个布尔值，表示Map实例是否包含键对应的值。\n\nMap.prototype.keys()\n返回一个新的 Iterator对象， 它按插入顺序包含了Map对象中每个元素的键 。\n\nMap.prototype.set(key, value)\n设置Map对象中键的值。返回该Map对象。\n\nMap.prototype.values()\n返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的值 。\n\nMap.prototype[@@iterator]()\n返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。\n\n## 实例\n\n### 使用 Map 对象\n```js\nvar myMap = new Map();\n \nvar keyObj = {},\n    keyFunc = function () {},\n    keyString = \"a string\";\n \n// 添加键\nmyMap.set(keyString, \"和键'a string'关联的值\");\nmyMap.set(keyObj, \"和键keyObj关联的值\");\nmyMap.set(keyFunc, \"和键keyFunc关联的值\");\n \nmyMap.size; // 3\n \n// 读取值\nmyMap.get(keyString);    // \"和键'a string'关联的值\"\nmyMap.get(keyObj);       // \"和键keyObj关联的值\"\nmyMap.get(keyFunc);      // \"和键keyFunc关联的值\"\n \nmyMap.get(\"a string\");   // \"和键'a string'关联的值\"\n                         // 因为keyString === 'a string'\nmyMap.get({});           // undefined, 因为keyObj !== {}\nmyMap.get(function() {}) // undefined, 因为keyFunc !== function () {}\n```\n### 使用 for..of 方法迭代 Map\n```js\nvar myMap = new Map();\nmyMap.set(0, \"zero\");\nmyMap.set(1, \"one\");\nfor (var [key, value] of myMap) {\n  console.log(key + \" = \" + value);\n}\n// 将会显示两个log。一个是\"0 = zero\"另一个是\"1 = one\"\n\nfor (var key of myMap.keys()) {\n  console.log(key);\n}\n// 将会显示两个log。 一个是 \"0\" 另一个是 \"1\"\n\nfor (var value of myMap.values()) {\n  console.log(value);\n}\n// 将会显示两个log。 一个是 \"zero\" 另一个是 \"one\"\n\nfor (var [key, value] of myMap.entries()) {\n  console.log(key + \" = \" + value);\n}\n// 将会显示两个log。 一个是 \"0 = zero\" 另一个是 \"1 = one\"\n```\n### 使用 forEach() 方法迭代 Map\n```js\nmyMap.forEach(function(value, key) {\n  console.log(key + \" = \" + value);\n})\n// 将会显示两个logs。 一个是 \"0 = zero\" 另一个是 \"1 = one\"\n```\n### Map 与数组的关系\n```js\nvar kvArray = [[\"key1\", \"value1\"], [\"key2\", \"value2\"]];\n\n// 使用常规的Map构造函数可以将一个二维键值对数组转换成一个Map对象\nvar myMap = new Map(kvArray);\n\nmyMap.get(\"key1\"); // 返回值为 \"value1\"\n\n// 使用Array.from函数可以将一个Map对象转换成一个二维键值对数组\nconsole.log(Array.from(myMap)); // 输出和kvArray相同的数组\n\n// 或者在键或者值的迭代器上使用Array.from，进而得到只含有键或者值的数组\nconsole.log(Array.from(myMap.keys())); // 输出 [\"key1\", \"key2\"]\n```\n### 复制或合并 Maps\n```js\nvar original = new Map([\n  [1, 'one']\n]);\n\nvar clone = new Map(original);\n\nconsole.log(clone.get(1)); // one\nconsole.log(original === clone); // false. Useful for shallow comparison\n```\n请记住，数据本身未被克隆。\n\nMap对象间可以进行合并，但是会保持键的唯一性。\n```js\nvar first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\nvar second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n]);\n\n// 合并两个Map对象时，如果有重复的键值，则后面的会覆盖前面的。\n// 展开运算符本质上是将Map对象转换成数组。\nvar merged = new Map([...first, ...second]);\n\nconsole.log(merged.get(1)); // uno\nconsole.log(merged.get(2)); // dos\nconsole.log(merged.get(3)); // three\n```\nMap对象也能与数组合并：\n```js\nvar first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\nvar second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n]);\n\n// Map对象同数组进行合并时，如果有重复的键值，则后面的会覆盖前面的。\nvar merged = new Map([...first, ...second, [1, 'eins']]);\n\nconsole.log(merged.get(1)); // eins\nconsole.log(merged.get(2)); // dos\nconsole.log(merged.get(3)); // three\n```\n\n\n# 以上讲的是Map，那不得不说map( )是什么\n\nECMAScript5中我们有一个数组方法 map( ),区别于ECMAScript6 中 Map类  \nmap() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。\n\n## 语法\n``` js\nvar new_array = array.map(function callback(currentValue,index,arr), thisValue)\n```\n## 参数\ncallback 生成新数组元素的函数，使用三个参数：  \n* currentValue callback 数组中正在处理的当前元素。  \n* index可选 callback 数组中正在处理的当前元素的索引。  \n* array可选 callback  map 方法被调用的数组。\n\nthisArg可选 执行 callback 函数时使用的this 值。\n\n## 示例\n```js\nvar array1 = [1,3,6];\nconst map1 = array1.map(x => x *2);\nconsole.log(map1);   \n// > Array [2, 6, 12]\n```\n\n```js\nvar array1 = [1, 3,6];\n\nconst map1 = array1.map(x => {\n    if (x == 3) {\n      return x * 2;\n    }\n});\n \nconsole.log(map1);\n\n// > Array [undefined, 6, undefined]\n```\n出现undefined ：只是增加了一个条件，即x的值为3时才乘以2，之所以会出现undefined，是因为map()方法创建了一个新数组，但新数组并不是在遍历完array1后才被赋值的，而是每遍历一次就得到一个值。所以，下面这样修改后就正确了\n```js\nvar array1 = [1, 3,6];\n\nconst map1 = array1.map(x => {\n    if (x == 3) {\n      return x * 2;\n    }\n    return x\n});\n \nconsole.log(map1);\n\n// > Array [2, 6, 12]\n```\n可以使用 map 重新格式化数组中的对象\n```js\nvar oldArray = [{key: 1, value: 10}, \n                {key: 2, value: 20}, \n                {key: 3, value: 30}];\n\nvar nowArr = oldArray.map(function(obj) { \n   var rObj = {};\n   rObj[obj.key] = obj.value;\n   return rObj;\n});\n\n// nowArr 数组为： [{1: 10}, {2: 20}, {3: 30}], \n\n// oldArray 数组未被修改: \n// [{key: 1, value: 10}, \n//  {key: 2, value: 20}, \n//  {key: 3, value: 30}]\n```\n\n# 用ES5模拟实现ES6中的Map类\n\n与Set类一样，我们用Object的实例而不是数组存储元素,我们实现以下方法：\n1.set(key,value):向字典中添加新元素。\n\n2.remove(key):使用键名从字典中移除相应的元素。\n\n3.has(key):如果某个键值存在于字典中，返回true，否则返回false。\n\n4.get(key):通过键名找到指定的值并返回。\n\n5.clear():清空字典。\n\n6.size():返回字典中元素个数。\n\n7.values():将字典所有值以数组形式返回。\n\n8.getItems():返回items变量，代表字典本身。\n\n\n```js\nfunction Map() {\n    var items = {};\n    this.has = function(key){    //has方法判断某个键值是否在字典中\n        return key in items;\n    },\n    this.set = function(key,value){    //set方法为字典添加新元素或更新已有元素\n        items[key] = value;\n    },\n    this.remove = function(key){\n        if (this.has(key)) {\n            delete items[key];\n            return true;\n        }\n        return false;\n    },\n    this.get = function(key){\n        return this.has(key)?items[key]:undefined;\n    },\n    this.values = function(){\n        var values = [];\n         //for...in会遍历出对象原型上的属性，所以要this.hasOwnProperty()方法选出对象自身的属性。\n        for(var k in items){   \n            if (this.hasOwnProperty(k)) {\n                values.push(items[k]);\n            }\n        }\n        return values;\n    },\n    this.clear = function(){\n        items = {};\n    },\n    this.size = function(){\n        return Object.Keys(items).length;\n    },\n    this.getItems = function(){\n        return items;\n    }\n}\n```","slug":"javascript中的Map","published":1,"updated":"2019-09-03T07:28:34.240Z","comments":1,"photos":[],"link":"","_id":"ck04levvf000460uck07800vv","content":"<h1 id=\"探究javascript-Map\"><a href=\"#探究javascript-Map\" class=\"headerlink\" title=\"探究javascript Map\"></a>探究javascript Map</h1><p>什么是Map，此处说的Map，非js中的map( )方法,下文会详细解释。<br>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。<br>ECMAScript6原生实现了Map类，即我们所说的字典，字典和集合很像，不过集合是以值值得形式存储元素，字典则是以键值的形式存储元素。字典也叫映射。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([iterable])</span><br></pre></td></tr></table></figure>\n<p>iterable (可迭代传参)<br>Iterable 可以是一个数组或者其他 iterable 对象，其元素为键值对(两个元素的数组，例如: [[ 1, ‘one’ ],[ 2, ‘two’ ]])。 每个键值对都会添加到新的 Map。null 会被当做 undefined。</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个  for…of 循环在每次迭代后会返回一个形式为[key，value]的数组。</p>\n<p>键的比较是基于 “SameValueZero” 算法：NaN 是与 NaN 相等的（虽然 NaN !== NaN），剩下所有其它的值是根据 === 运算符的结果判断是否相等。 </p>\n<p>Objects 和 Maps 类似的是，它们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（并且也没有其他内建的替代方式了）过去我们一直都把对象当成 Maps 使用。不过 Maps 和 Objects 有一些重要的区别，在下列情况里使用 Map 会是更好的选择：</p>\n<ul>\n<li>一个Object的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值，包括函数、对象、基本类型。</li>\n<li>Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。</li>\n<li>你可以通过 size 属性直接获取一个 Map 的键值对个数，而 Object 的键值对个数只能手动计算。</li>\n<li>Map 可直接进行迭代，而 Object 的迭代需要先获取它的键数组，然后再进行迭代。</li>\n<li>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然 ES5 开始可以用 map = Object.create(null) 来创建一个没有原型的对象，但是这种用法不太常见。</li>\n<li>Map 在涉及频繁增删键值对的场景下会有些性能优势。</li>\n</ul>\n<p>最大的差别其实就是：object的键的类型是 字符串；map的键的类型是 可以是任意类型;<br>object获取键值使用Object.keys（返回数组）；Map获取键值使用 map变量.keys() (返回迭代器)。</p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ul>\n<li><p>Map.length </p>\n</li>\n<li><p>get Map[@@species]</p>\n</li>\n<li><p>Map.prototype</p>\n</li>\n</ul>\n<h2 id=\"Map-实例\"><a href=\"#Map-实例\" class=\"headerlink\" title=\"Map 实例\"></a>Map 实例</h2><h3 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"*属性\"></a>*属性</h3><p>Map.prototype.constructor<br>返回一个函数，它创建了实例的原型。默认是Map函数。</p>\n<p>Map.prototype.size<br>返回Map对象的键/值对的数量。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"*方法\"></a>*方法</h3><p>Map.prototype.clear()<br>移除Map对象的所有键/值对 。</p>\n<p>Map.prototype.delete(key)<br>如果 Map 对象中存在该元素，则移除它并返回 true；否则如果该元素不存在则返回 false</p>\n<p>Map.prototype.entries()<br>返回一个新的 Iterator 对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。</p>\n<p>Map.prototype.forEach(callbackFn[, thisArg])<br>按插入顺序，为 Map对象里的每一键值对调用一次callbackFn函数。如果为forEach提供了thisArg，它将在每次回调中作为this值。</p>\n<p>Map.prototype.get(key)<br>返回键对应的值，如果不存在，则返回undefined。</p>\n<p>Map.prototype.has(key)<br>返回一个布尔值，表示Map实例是否包含键对应的值。</p>\n<p>Map.prototype.keys()<br>返回一个新的 Iterator对象， 它按插入顺序包含了Map对象中每个元素的键 。</p>\n<p>Map.prototype.set(key, value)<br>设置Map对象中键的值。返回该Map对象。</p>\n<p>Map.prototype.values()<br>返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的值 。</p>\n<p>Map.prototype<a href>@@iterator</a><br>返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"使用-Map-对象\"><a href=\"#使用-Map-对象\" class=\"headerlink\" title=\"使用 Map 对象\"></a>使用 Map 对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> keyObj = &#123;&#125;,</span><br><span class=\"line\">    keyFunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">    keyString = <span class=\"string\">\"a string\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 添加键</span></span><br><span class=\"line\">myMap.set(keyString, <span class=\"string\">\"和键'a string'关联的值\"</span>);</span><br><span class=\"line\">myMap.set(keyObj, <span class=\"string\">\"和键keyObj关联的值\"</span>);</span><br><span class=\"line\">myMap.set(keyFunc, <span class=\"string\">\"和键keyFunc关联的值\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">myMap.size; <span class=\"comment\">// 3</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 读取值</span></span><br><span class=\"line\">myMap.get(keyString);    <span class=\"comment\">// \"和键'a string'关联的值\"</span></span><br><span class=\"line\">myMap.get(keyObj);       <span class=\"comment\">// \"和键keyObj关联的值\"</span></span><br><span class=\"line\">myMap.get(keyFunc);      <span class=\"comment\">// \"和键keyFunc关联的值\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">myMap.get(<span class=\"string\">\"a string\"</span>);   <span class=\"comment\">// \"和键'a string'关联的值\"</span></span><br><span class=\"line\">                         <span class=\"comment\">// 因为keyString === 'a string'</span></span><br><span class=\"line\">myMap.get(&#123;&#125;);           <span class=\"comment\">// undefined, 因为keyObj !== &#123;&#125;</span></span><br><span class=\"line\">myMap.get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;) <span class=\"comment\">// undefined, 因为keyFunc !== function () &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-for-of-方法迭代-Map\"><a href=\"#使用-for-of-方法迭代-Map\" class=\"headerlink\" title=\"使用 for..of 方法迭代 Map\"></a>使用 for..of 方法迭代 Map</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">myMap.set(<span class=\"number\">0</span>, <span class=\"string\">\"zero\"</span>);</span><br><span class=\"line\">myMap.set(<span class=\"number\">1</span>, <span class=\"string\">\"one\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> [key, value] <span class=\"keyword\">of</span> myMap) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" = \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个log。一个是\"0 = zero\"另一个是\"1 = one\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">of</span> myMap.keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个log。 一个是 \"0\" 另一个是 \"1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> value <span class=\"keyword\">of</span> myMap.values()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个log。 一个是 \"zero\" 另一个是 \"one\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> [key, value] <span class=\"keyword\">of</span> myMap.entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" = \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个log。 一个是 \"0 = zero\" 另一个是 \"1 = one\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-forEach-方法迭代-Map\"><a href=\"#使用-forEach-方法迭代-Map\" class=\"headerlink\" title=\"使用 forEach() 方法迭代 Map\"></a>使用 forEach() 方法迭代 Map</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myMap.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" = \"</span> + value);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个logs。 一个是 \"0 = zero\" 另一个是 \"1 = one\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Map-与数组的关系\"><a href=\"#Map-与数组的关系\" class=\"headerlink\" title=\"Map 与数组的关系\"></a>Map 与数组的关系</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> kvArray = [[<span class=\"string\">\"key1\"</span>, <span class=\"string\">\"value1\"</span>], [<span class=\"string\">\"key2\"</span>, <span class=\"string\">\"value2\"</span>]];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用常规的Map构造函数可以将一个二维键值对数组转换成一个Map对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(kvArray);</span><br><span class=\"line\"></span><br><span class=\"line\">myMap.get(<span class=\"string\">\"key1\"</span>); <span class=\"comment\">// 返回值为 \"value1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Array.from函数可以将一个Map对象转换成一个二维键值对数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(myMap)); <span class=\"comment\">// 输出和kvArray相同的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者在键或者值的迭代器上使用Array.from，进而得到只含有键或者值的数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(myMap.keys())); <span class=\"comment\">// 输出 [\"key1\", \"key2\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"复制或合并-Maps\"><a href=\"#复制或合并-Maps\" class=\"headerlink\" title=\"复制或合并 Maps\"></a>复制或合并 Maps</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> original = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> clone = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(original);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clone.get(<span class=\"number\">1</span>)); <span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(original === clone); <span class=\"comment\">// false. Useful for shallow comparison</span></span><br></pre></td></tr></table></figure>\n<p>请记住，数据本身未被克隆。</p>\n<p>Map对象间可以进行合并，但是会保持键的唯一性。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> first = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"string\">'three'</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> second = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'uno'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'dos'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并两个Map对象时，如果有重复的键值，则后面的会覆盖前面的。</span></span><br><span class=\"line\"><span class=\"comment\">// 展开运算符本质上是将Map对象转换成数组。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merged = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([...first, ...second]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">1</span>)); <span class=\"comment\">// uno</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">2</span>)); <span class=\"comment\">// dos</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">3</span>)); <span class=\"comment\">// three</span></span><br></pre></td></tr></table></figure></p>\n<p>Map对象也能与数组合并：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> first = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"string\">'three'</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> second = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'uno'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'dos'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Map对象同数组进行合并时，如果有重复的键值，则后面的会覆盖前面的。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merged = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([...first, ...second, [<span class=\"number\">1</span>, <span class=\"string\">'eins'</span>]]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">1</span>)); <span class=\"comment\">// eins</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">2</span>)); <span class=\"comment\">// dos</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">3</span>)); <span class=\"comment\">// three</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"以上讲的是Map，那不得不说map-是什么\"><a href=\"#以上讲的是Map，那不得不说map-是什么\" class=\"headerlink\" title=\"以上讲的是Map，那不得不说map( )是什么\"></a>以上讲的是Map，那不得不说map( )是什么</h1><p>ECMAScript5中我们有一个数组方法 map( ),区别于ECMAScript6 中 Map类<br>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p>\n<h2 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = array.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue,index,arr</span>), <span class=\"title\">thisValue</span>)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p>callback 生成新数组元素的函数，使用三个参数：  </p>\n<ul>\n<li>currentValue callback 数组中正在处理的当前元素。  </li>\n<li>index可选 callback 数组中正在处理的当前元素的索引。  </li>\n<li>array可选 callback  map 方法被调用的数组。</li>\n</ul>\n<p>thisArg可选 执行 callback 函数时使用的this 值。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> map1 = array1.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x *<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map1);   </span><br><span class=\"line\"><span class=\"comment\">// &gt; Array [2, 6, 12]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> map1 = array1.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt; Array [undefined, 6, undefined]</span></span><br></pre></td></tr></table></figure>\n<p>出现undefined ：只是增加了一个条件，即x的值为3时才乘以2，之所以会出现undefined，是因为map()方法创建了一个新数组，但新数组并不是在遍历完array1后才被赋值的，而是每遍历一次就得到一个值。所以，下面这样修改后就正确了<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> map1 = array1.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt; Array [2, 6, 12]</span></span><br></pre></td></tr></table></figure></p>\n<p>可以使用 map 重新格式化数组中的对象<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oldArray = [&#123;<span class=\"attr\">key</span>: <span class=\"number\">1</span>, <span class=\"attr\">value</span>: <span class=\"number\">10</span>&#125;, </span><br><span class=\"line\">                &#123;<span class=\"attr\">key</span>: <span class=\"number\">2</span>, <span class=\"attr\">value</span>: <span class=\"number\">20</span>&#125;, </span><br><span class=\"line\">                &#123;<span class=\"attr\">key</span>: <span class=\"number\">3</span>, <span class=\"attr\">value</span>: <span class=\"number\">30</span>&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nowArr = oldArray.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">var</span> rObj = &#123;&#125;;</span><br><span class=\"line\">   rObj[obj.key] = obj.value;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> rObj;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// nowArr 数组为： [&#123;1: 10&#125;, &#123;2: 20&#125;, &#123;3: 30&#125;], </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// oldArray 数组未被修改: </span></span><br><span class=\"line\"><span class=\"comment\">// [&#123;key: 1, value: 10&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//  &#123;key: 2, value: 20&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//  &#123;key: 3, value: 30&#125;]</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"用ES5模拟实现ES6中的Map类\"><a href=\"#用ES5模拟实现ES6中的Map类\" class=\"headerlink\" title=\"用ES5模拟实现ES6中的Map类\"></a>用ES5模拟实现ES6中的Map类</h1><p>与Set类一样，我们用Object的实例而不是数组存储元素,我们实现以下方法：<br>1.set(key,value):向字典中添加新元素。</p>\n<p>2.remove(key):使用键名从字典中移除相应的元素。</p>\n<p>3.has(key):如果某个键值存在于字典中，返回true，否则返回false。</p>\n<p>4.get(key):通过键名找到指定的值并返回。</p>\n<p>5.clear():清空字典。</p>\n<p>6.size():返回字典中元素个数。</p>\n<p>7.values():将字典所有值以数组形式返回。</p>\n<p>8.getItems():返回items变量，代表字典本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Map</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> items = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.has = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;    <span class=\"comment\">//has方法判断某个键值是否在字典中</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> items;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.set = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,value</span>)</span>&#123;    <span class=\"comment\">//set方法为字典添加新元素或更新已有元素</span></span><br><span class=\"line\">        items[key] = value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.has(key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> items[key];</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.has(key)?items[key]:<span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.values = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> values = [];</span><br><span class=\"line\">         <span class=\"comment\">//for...in会遍历出对象原型上的属性，所以要this.hasOwnProperty()方法选出对象自身的属性。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> items)&#123;   </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">                values.push(items[k]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> values;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        items = &#123;&#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.size = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.Keys(items).length;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getItems = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"探究javascript-Map\"><a href=\"#探究javascript-Map\" class=\"headerlink\" title=\"探究javascript Map\"></a>探究javascript Map</h1><p>什么是Map，此处说的Map，非js中的map( )方法,下文会详细解释。<br>Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。<br>ECMAScript6原生实现了Map类，即我们所说的字典，字典和集合很像，不过集合是以值值得形式存储元素，字典则是以键值的形式存储元素。字典也叫映射。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([iterable])</span><br></pre></td></tr></table></figure>\n<p>iterable (可迭代传参)<br>Iterable 可以是一个数组或者其他 iterable 对象，其元素为键值对(两个元素的数组，例如: [[ 1, ‘one’ ],[ 2, ‘two’ ]])。 每个键值对都会添加到新的 Map。null 会被当做 undefined。</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>一个Map对象在迭代时会根据对象中元素的插入顺序来进行 — 一个  for…of 循环在每次迭代后会返回一个形式为[key，value]的数组。</p>\n<p>键的比较是基于 “SameValueZero” 算法：NaN 是与 NaN 相等的（虽然 NaN !== NaN），剩下所有其它的值是根据 === 运算符的结果判断是否相等。 </p>\n<p>Objects 和 Maps 类似的是，它们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（并且也没有其他内建的替代方式了）过去我们一直都把对象当成 Maps 使用。不过 Maps 和 Objects 有一些重要的区别，在下列情况里使用 Map 会是更好的选择：</p>\n<ul>\n<li>一个Object的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值，包括函数、对象、基本类型。</li>\n<li>Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map 对象是按插入的顺序返回键值。</li>\n<li>你可以通过 size 属性直接获取一个 Map 的键值对个数，而 Object 的键值对个数只能手动计算。</li>\n<li>Map 可直接进行迭代，而 Object 的迭代需要先获取它的键数组，然后再进行迭代。</li>\n<li>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。虽然 ES5 开始可以用 map = Object.create(null) 来创建一个没有原型的对象，但是这种用法不太常见。</li>\n<li>Map 在涉及频繁增删键值对的场景下会有些性能优势。</li>\n</ul>\n<p>最大的差别其实就是：object的键的类型是 字符串；map的键的类型是 可以是任意类型;<br>object获取键值使用Object.keys（返回数组）；Map获取键值使用 map变量.keys() (返回迭代器)。</p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ul>\n<li><p>Map.length </p>\n</li>\n<li><p>get Map[@@species]</p>\n</li>\n<li><p>Map.prototype</p>\n</li>\n</ul>\n<h2 id=\"Map-实例\"><a href=\"#Map-实例\" class=\"headerlink\" title=\"Map 实例\"></a>Map 实例</h2><h3 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"*属性\"></a>*属性</h3><p>Map.prototype.constructor<br>返回一个函数，它创建了实例的原型。默认是Map函数。</p>\n<p>Map.prototype.size<br>返回Map对象的键/值对的数量。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"*方法\"></a>*方法</h3><p>Map.prototype.clear()<br>移除Map对象的所有键/值对 。</p>\n<p>Map.prototype.delete(key)<br>如果 Map 对象中存在该元素，则移除它并返回 true；否则如果该元素不存在则返回 false</p>\n<p>Map.prototype.entries()<br>返回一个新的 Iterator 对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。</p>\n<p>Map.prototype.forEach(callbackFn[, thisArg])<br>按插入顺序，为 Map对象里的每一键值对调用一次callbackFn函数。如果为forEach提供了thisArg，它将在每次回调中作为this值。</p>\n<p>Map.prototype.get(key)<br>返回键对应的值，如果不存在，则返回undefined。</p>\n<p>Map.prototype.has(key)<br>返回一个布尔值，表示Map实例是否包含键对应的值。</p>\n<p>Map.prototype.keys()<br>返回一个新的 Iterator对象， 它按插入顺序包含了Map对象中每个元素的键 。</p>\n<p>Map.prototype.set(key, value)<br>设置Map对象中键的值。返回该Map对象。</p>\n<p>Map.prototype.values()<br>返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的值 。</p>\n<p>Map.prototype<a href>@@iterator</a><br>返回一个新的Iterator对象，它按插入顺序包含了Map对象中每个元素的 [key, value] 数组。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"使用-Map-对象\"><a href=\"#使用-Map-对象\" class=\"headerlink\" title=\"使用 Map 对象\"></a>使用 Map 对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> keyObj = &#123;&#125;,</span><br><span class=\"line\">    keyFunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">    keyString = <span class=\"string\">\"a string\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 添加键</span></span><br><span class=\"line\">myMap.set(keyString, <span class=\"string\">\"和键'a string'关联的值\"</span>);</span><br><span class=\"line\">myMap.set(keyObj, <span class=\"string\">\"和键keyObj关联的值\"</span>);</span><br><span class=\"line\">myMap.set(keyFunc, <span class=\"string\">\"和键keyFunc关联的值\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">myMap.size; <span class=\"comment\">// 3</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 读取值</span></span><br><span class=\"line\">myMap.get(keyString);    <span class=\"comment\">// \"和键'a string'关联的值\"</span></span><br><span class=\"line\">myMap.get(keyObj);       <span class=\"comment\">// \"和键keyObj关联的值\"</span></span><br><span class=\"line\">myMap.get(keyFunc);      <span class=\"comment\">// \"和键keyFunc关联的值\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">myMap.get(<span class=\"string\">\"a string\"</span>);   <span class=\"comment\">// \"和键'a string'关联的值\"</span></span><br><span class=\"line\">                         <span class=\"comment\">// 因为keyString === 'a string'</span></span><br><span class=\"line\">myMap.get(&#123;&#125;);           <span class=\"comment\">// undefined, 因为keyObj !== &#123;&#125;</span></span><br><span class=\"line\">myMap.get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;) <span class=\"comment\">// undefined, 因为keyFunc !== function () &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-for-of-方法迭代-Map\"><a href=\"#使用-for-of-方法迭代-Map\" class=\"headerlink\" title=\"使用 for..of 方法迭代 Map\"></a>使用 for..of 方法迭代 Map</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">myMap.set(<span class=\"number\">0</span>, <span class=\"string\">\"zero\"</span>);</span><br><span class=\"line\">myMap.set(<span class=\"number\">1</span>, <span class=\"string\">\"one\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> [key, value] <span class=\"keyword\">of</span> myMap) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" = \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个log。一个是\"0 = zero\"另一个是\"1 = one\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">of</span> myMap.keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个log。 一个是 \"0\" 另一个是 \"1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> value <span class=\"keyword\">of</span> myMap.values()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个log。 一个是 \"zero\" 另一个是 \"one\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> [key, value] <span class=\"keyword\">of</span> myMap.entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" = \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个log。 一个是 \"0 = zero\" 另一个是 \"1 = one\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-forEach-方法迭代-Map\"><a href=\"#使用-forEach-方法迭代-Map\" class=\"headerlink\" title=\"使用 forEach() 方法迭代 Map\"></a>使用 forEach() 方法迭代 Map</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myMap.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" = \"</span> + value);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 将会显示两个logs。 一个是 \"0 = zero\" 另一个是 \"1 = one\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Map-与数组的关系\"><a href=\"#Map-与数组的关系\" class=\"headerlink\" title=\"Map 与数组的关系\"></a>Map 与数组的关系</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> kvArray = [[<span class=\"string\">\"key1\"</span>, <span class=\"string\">\"value1\"</span>], [<span class=\"string\">\"key2\"</span>, <span class=\"string\">\"value2\"</span>]];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用常规的Map构造函数可以将一个二维键值对数组转换成一个Map对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(kvArray);</span><br><span class=\"line\"></span><br><span class=\"line\">myMap.get(<span class=\"string\">\"key1\"</span>); <span class=\"comment\">// 返回值为 \"value1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Array.from函数可以将一个Map对象转换成一个二维键值对数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(myMap)); <span class=\"comment\">// 输出和kvArray相同的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者在键或者值的迭代器上使用Array.from，进而得到只含有键或者值的数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(myMap.keys())); <span class=\"comment\">// 输出 [\"key1\", \"key2\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"复制或合并-Maps\"><a href=\"#复制或合并-Maps\" class=\"headerlink\" title=\"复制或合并 Maps\"></a>复制或合并 Maps</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> original = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> clone = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(original);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(clone.get(<span class=\"number\">1</span>)); <span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(original === clone); <span class=\"comment\">// false. Useful for shallow comparison</span></span><br></pre></td></tr></table></figure>\n<p>请记住，数据本身未被克隆。</p>\n<p>Map对象间可以进行合并，但是会保持键的唯一性。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> first = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"string\">'three'</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> second = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'uno'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'dos'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 合并两个Map对象时，如果有重复的键值，则后面的会覆盖前面的。</span></span><br><span class=\"line\"><span class=\"comment\">// 展开运算符本质上是将Map对象转换成数组。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merged = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([...first, ...second]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">1</span>)); <span class=\"comment\">// uno</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">2</span>)); <span class=\"comment\">// dos</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">3</span>)); <span class=\"comment\">// three</span></span><br></pre></td></tr></table></figure></p>\n<p>Map对象也能与数组合并：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> first = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"string\">'three'</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> second = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'uno'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'dos'</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Map对象同数组进行合并时，如果有重复的键值，则后面的会覆盖前面的。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merged = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([...first, ...second, [<span class=\"number\">1</span>, <span class=\"string\">'eins'</span>]]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">1</span>)); <span class=\"comment\">// eins</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">2</span>)); <span class=\"comment\">// dos</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(merged.get(<span class=\"number\">3</span>)); <span class=\"comment\">// three</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"以上讲的是Map，那不得不说map-是什么\"><a href=\"#以上讲的是Map，那不得不说map-是什么\" class=\"headerlink\" title=\"以上讲的是Map，那不得不说map( )是什么\"></a>以上讲的是Map，那不得不说map( )是什么</h1><p>ECMAScript5中我们有一个数组方法 map( ),区别于ECMAScript6 中 Map类<br>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p>\n<h2 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = array.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue,index,arr</span>), <span class=\"title\">thisValue</span>)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><p>callback 生成新数组元素的函数，使用三个参数：  </p>\n<ul>\n<li>currentValue callback 数组中正在处理的当前元素。  </li>\n<li>index可选 callback 数组中正在处理的当前元素的索引。  </li>\n<li>array可选 callback  map 方法被调用的数组。</li>\n</ul>\n<p>thisArg可选 执行 callback 函数时使用的this 值。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> map1 = array1.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x *<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map1);   </span><br><span class=\"line\"><span class=\"comment\">// &gt; Array [2, 6, 12]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> map1 = array1.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt; Array [undefined, 6, undefined]</span></span><br></pre></td></tr></table></figure>\n<p>出现undefined ：只是增加了一个条件，即x的值为3时才乘以2，之所以会出现undefined，是因为map()方法创建了一个新数组，但新数组并不是在遍历完array1后才被赋值的，而是每遍历一次就得到一个值。所以，下面这样修改后就正确了<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> map1 = array1.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &gt; Array [2, 6, 12]</span></span><br></pre></td></tr></table></figure></p>\n<p>可以使用 map 重新格式化数组中的对象<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oldArray = [&#123;<span class=\"attr\">key</span>: <span class=\"number\">1</span>, <span class=\"attr\">value</span>: <span class=\"number\">10</span>&#125;, </span><br><span class=\"line\">                &#123;<span class=\"attr\">key</span>: <span class=\"number\">2</span>, <span class=\"attr\">value</span>: <span class=\"number\">20</span>&#125;, </span><br><span class=\"line\">                &#123;<span class=\"attr\">key</span>: <span class=\"number\">3</span>, <span class=\"attr\">value</span>: <span class=\"number\">30</span>&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nowArr = oldArray.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">var</span> rObj = &#123;&#125;;</span><br><span class=\"line\">   rObj[obj.key] = obj.value;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> rObj;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// nowArr 数组为： [&#123;1: 10&#125;, &#123;2: 20&#125;, &#123;3: 30&#125;], </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// oldArray 数组未被修改: </span></span><br><span class=\"line\"><span class=\"comment\">// [&#123;key: 1, value: 10&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//  &#123;key: 2, value: 20&#125;, </span></span><br><span class=\"line\"><span class=\"comment\">//  &#123;key: 3, value: 30&#125;]</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"用ES5模拟实现ES6中的Map类\"><a href=\"#用ES5模拟实现ES6中的Map类\" class=\"headerlink\" title=\"用ES5模拟实现ES6中的Map类\"></a>用ES5模拟实现ES6中的Map类</h1><p>与Set类一样，我们用Object的实例而不是数组存储元素,我们实现以下方法：<br>1.set(key,value):向字典中添加新元素。</p>\n<p>2.remove(key):使用键名从字典中移除相应的元素。</p>\n<p>3.has(key):如果某个键值存在于字典中，返回true，否则返回false。</p>\n<p>4.get(key):通过键名找到指定的值并返回。</p>\n<p>5.clear():清空字典。</p>\n<p>6.size():返回字典中元素个数。</p>\n<p>7.values():将字典所有值以数组形式返回。</p>\n<p>8.getItems():返回items变量，代表字典本身。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Map</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> items = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.has = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;    <span class=\"comment\">//has方法判断某个键值是否在字典中</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> key <span class=\"keyword\">in</span> items;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.set = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,value</span>)</span>&#123;    <span class=\"comment\">//set方法为字典添加新元素或更新已有元素</span></span><br><span class=\"line\">        items[key] = value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.has(key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> items[key];</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.has(key)?items[key]:<span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.values = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> values = [];</span><br><span class=\"line\">         <span class=\"comment\">//for...in会遍历出对象原型上的属性，所以要this.hasOwnProperty()方法选出对象自身的属性。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> items)&#123;   </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.hasOwnProperty(k)) &#123;</span><br><span class=\"line\">                values.push(items[k]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> values;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        items = &#123;&#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.size = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.Keys(items).length;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getItems = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"javascript垃圾回收机制","date":"2019-07-01T02:53:41.000Z","_content":"\n## 前言\n\n其实大多数的时候作为javascript开发者不需要太关心内存的使用和释放,因为所有的javascript环境都实现了各自的垃圾回收机制(garbage collector(GC)),但是随着现在的SPA越来越多也越来越大,越来越追求极致的性能渐渐也要求开发者能够适当的了解一些垃圾回收机制内部的实现原理,在性能优化和追踪内存泄漏的时候都能够起到一点帮助。看一段内存泄漏的代码\n``` javacript\n\nvar theThing = null;\nvar replaceThing = function () {\n  var originalThing = theThing;\n  var c = 'a'\n  function unused() {\n    if (originalThing) {\n      console.log(\"hi\");\n    }\n  };\n\n  theThing = {\n    longStr: new Array(1000000).join('*'),\n    someMethod: function () {\n      console.log('1111');\n    }\n  };\n};\n\nsetInterval(replaceThing,1000)\n\n```\n最早想要去深入了解javacript GC是看到这道找内存泄漏的题目(具体怎么内存泄漏,我们后面在分析).任何一种GC管理都需要做这几步:\n1. 识别哪些对象需要被回收。\n2. 回收/重复使用需要被回收对象的内存。\n3. 压缩/整理内存(有些可能没有)\n\n而常见的识别对象是否需要回收的机制有下面几种:\n* 引用计数 (Python)\n* 逃逸分析 (Java)\n* Tracing/Reachable 追踪分析 (javascript)\n\n今天就主要看一下V8中GC的具体实现方式\n\n## Tracing/Reachable 追踪分析\nGC的第一步就是要找出哪些对象需要被回收,哪些不需要。在追踪分析(Tracing/Reachable)中,认为可以被追踪到(reachability)的对象认为是不能被回收的对象,剩下的不能被追踪到的对象就是要回收的对象。\n在V8中,追踪分析会从根对象开始(GC Root)根据指针将所有被能被追踪到的对象标记为reachable,javascript中根对象包括调用堆栈和global对象。\n\n\n## The Generational Hypothesis\nGenerational Hypothesis的意思是大部分的对象在早期就需要被回收。基于这样的一个假设,有很多的编程语言的垃圾回收机制在设计的时候都是将内存分代,年轻代(young generation),和老代(old generation)。\n这里的代其实就是开辟两块space分别存储刚被分配的对象和经过两次GC还是没有被回收的对象。在V8中有两个垃圾回收器分别对年轻代和老代进行垃圾回收,Scavenger针对年轻代进行垃圾回收,Major GC针对老代进行垃圾回收,他们的算法也是不同的。\n\n### Scavenger\nV8在年轻代的内存space使用的是semi-space算法,也就是说将内存分为两半,同时只有一块的内存能被使用,另外一半是完全空的(或者说这一半内存都是可以被分配的)。在程序开始执行的时候,将所有的变量都分配可以被使用的一半内存中(叫做from-space)。当第一次GC开始的时候根据追踪分析结果,将所有可以reachable的对象(不能被释放的对象),全部转移到剩余一半可以被分配的内存中(to-space)，这样from-space中的内存又全部可以被分配了，这个时候如果又有新申明的对象需要分配内存,就会分配到这一块内存当中了,最后在转移完不能被释放的对象之后,还需要更新引用指针,指向在to-space中最新的地址。\n\n![第一次GC](http://img.pandihai.com/03.svg)\n\n\n第二次GC开始的时候,在原本的to-space中仍然不能被释放的对象首先转移到老代(old generation)的space中,这时候to-space中又全部可以被分配,重复之前的操作。从from-space中将不能被释放的对象转移过来。完成2次GC之后,存货了两次的对象现在就在老代里面了,而存活一次GC的对象现在就在to-space中了,这个to-space也被叫做intermediate generation(中生代).在Scavenger中回收内存有三个过程:标记(追踪分析),转移(from-space to to-space),更新指针地址。\n\n![第二次GC](http://img.pandihai.com/04.svg)<center><font color=gray size=2>第二次GC</font></center>\n\n\n在这种内存回收的机制中,其中一个问题就是转移对象的时候是会消耗一定性能的,但是根据Generational Hypothesis的假设大部分的对象在早期就会被回收了,这也就意味着只有少部分不能被回收的对象需要被移动，这也意味着如果这个假设不成立，比如我们的代码中有很多的闭包导致很多的作用域不能被释放,那么将会有大量的对象需要在space之间转移,是比较浪费性能的。但是相反的,基于大部分对象都可以在早期被回收的假设,如果大部分的对象在早期就可以被释放,这种机制的内存回收对这需要在早期就回收的对象其实是什么都不需要做的,只需要把不能释放的少部分对象进行转移（from-space to to-space）,然后在下次分配内存的时候把这部分需要释放的对象所占的内存直接覆盖就可以了(rewrite dead object)。\n\n#### Parallel\nParallel是V8中调度线程进行内存回收的一种算法,指的是主线程和帮助线程同时进行相同工作量的内存回收,这种算法还是会停止主线程正在进行的全部工作,但是工作量被平摊到几个线程之后,理论上时间也被参与线程的数量整除了(加上一些同步调度的开销)。Scavenger就是使用的这种线程调度机制,当需要进行内存回收的时候,所有的线程获得一定数量的存活的对象引用指针,开始同时将这些存活对象搬运到to-space中。不同的线程可能通过不同引用路径访问到同一个对象,当线程将存活对象转移到to-space之后,更新完指针地址后,会在from-space的老对象中留下一个forwarding指针,这样其他线程找到这个对象之后就可以通过这个指针来找到新的地址更新引用地址了。\n\n![Scavenger平行调度](http://img.pandihai.com/05.svg)<center><font color=gray size=2>Scavenger平行调度,同时有多个帮助线程和主线程参与</font></center>\n\n### Major GC\nMajor GC主要负责老代的内存回收,同样也是三个过程:标记(追踪分析),清除,整理压缩内存。标记这一步和Scavenger一样通过追踪分析确定哪些内存需要被回收,然后在对象被回收以后将被回收的内存加入到free-list这个数据结构中,free-list就像是一个个抽屉,每个抽屉的大小代表了从这个地址开始可以被连续分配的内存的大小,当我们需要在老代中重新分配内存的时候就可以快速的根据需要分配内存的大小找到一个合适的抽屉把内存进行分配。最后就是进行内存整理,这个就好像是Windows系统整理磁盘一样,将还没被幸存的对象利用free-list查找拷贝到其他的已经被整理完的page中,这样使小块的内存碎片也被整理完之后加以利用。跟Scavenger中一样来回拷贝对象也会有性能的消耗,在V8中只会对高度碎片化的page进行整理,对其他的page进行清除,这样在转移的时候也是一样的只需要转移存活的对象就可以了。\n\n#### Concurrent\nConcurrent同样也是V8中进行内存回收的线程调度算法,当主线程执行Javascript的时候,帮助线程同步进行内存回收的一些工作。相比Parallel来说这个算法要复杂的多,可能前一毫秒帮助线程在进行GC操作,后一毫秒主线程就改变了这个对象。也有可能帮助线程和主线程同时读取修改同一个对象。但是这种算法的优势就是当帮助线程进行GC工作的时候,主线程可以继续执行JavaScript,完全不会受到影响。Major GC就是采用的这个算法,当老代的内存到达一定系统自动计算的阀值,就开始进行Major GC,首先每个帮助线程都会获得一定数量的对象指针,开始针对这些对象进行标记,然后根据对象的引用指针对reachable对象都进行标记,在进行这些标记的同时,主线程仍然在执行JavaScript没有受到影响。当帮助线程完成标记,或者老代触及了设定的阀值,主线程也开始参与GC,他首先进行一步快速的标记确认,确保帮助线程在标记的同时主线程修改的对象标记正确(在帮助线程进行标记的时候,如果主线程执行的JavaScript修改了对象会有Write barriers,类似于有个标记)。当主线程确认所有存活的对象都被标记以后,主线程会和几个子线程一起,对一些内存page进行压缩和更新指针的工作,不是所有的page都需要进行压缩(只对高碎片化的进行压缩),不需要压缩的利用free-list进行打扫。\n\n![Major GC同步调度](http://img.pandihai.com/09.svg)<center><font color=gray size=2>Major GC同步调度</font></center>\n\n\n### 什么时候会执行GC\n在JavaScript中我们没办法用编程的方式主动触发GC,因为涉及到复杂的线程调度,主动的触发GC可能会影响正在执行的GC或者下次的GC。对于Scavenger来说,当在新生代中分配内存时,已经没有空间分配内存导致分配内存失败时,开始Scavenger垃圾回收,希望能释放一些内存,然后在尝试重新分配内存。对于老代来说,开启内存回收的时机要复杂很多,简单来说会根据老代中内存占用的百分比和需要被分配对象的百分比计算出一个合适的阀值,触及到这个阀值就会开启老代的垃圾回收。\n\n我们可以通过手动设置来设置新生代和老代的space大小:\n```js\n    node --max-old-space-size=1700 index.js\n    node --max-new-space-size=1024 index.js\n```\n\n\n#### 空闲时GC\n虽然我们通过JavaScript没办法主动触发GC,但是在V8中还有一个空闲GC的机制,他根据被嵌入宿主来决定什么时候属于空闲时来执行GC。比如V8在Chrome浏览器中,为了保证动画渲染的流畅,一秒钟需要渲染60个帧,相当于16.6毫秒渲染一帧,在16.6毫秒以内渲染完了一帧,比如只花了10毫秒就渲染完了这一帧的动画,那么你就有了6.6毫秒的空闲时间可以执行一些空闲时的GC(在许多新版本的浏览器中,开发者也可以通过[requestIdleCallback](https://developers.google.com/web/updates/2015/08/using-requestidlecallback)事件,利用浏览器空闲时间来提高性能,有兴趣的可以去了解[React 16 fiber的实现](https://www.youtube.com/watch?v=ZCuYPiUIONs))。\n\n![空闲时GC](http://img.pandihai.com/10.svg)<center><font color=gray size=2>利用主线程空闲时间进行GC</font></center>\n\n#### Incremental\n那么在空闲的几毫秒时间里能完成一次GC吗?那就是接下来就要介绍另外一种调度算法Incremental了,相比较于其他调度算法在暂停一次主线程执行一整次完成的GC,Incremental要求把一整个GC中的工作拆成一小块,和主线程中的JS递进的执行,或者在主线程有空闲时间的时候执行一小块GC任务。\n\n![Incremental](http://img.pandihai.com/06.svg)<center><font color=gray size=2>将一整个GC切分成一小块GC任务,插入到主线程中进行</font></center>\n\n### 总结\n不同JavaScript引擎实现GC都有不同程度的差异,本文主要以V8为例,有很多地方没有非常仔细的展开,比如：其实老代里面不是只有一块space,而是有4块space组成,每块space存放着不同的数据(old space,large object space,matedata space,code space)。垃圾回收设计本身就是一个很复杂的程序,有了GC,让开发者可以完全不用担心内存的管理问题。但是适当的了解垃圾回收的原理能够帮助我们更加深入的理解JavaScript的运行环境,也可以帮助我们写出更高效率的代码。\n\n最后的最后将之前的内存泄漏代码一步步的推演:\n\n1. 首先在全局作用域中声明了两个变量theThing和replaceThing,其中replaceThing被赋值为一个方法(callable object),然后调用setInterval方法,每隔1000毫秒调用一次replaceThing。\n2. 1000毫秒到了,执行replaceThing,创建一个新的局部作用域,根据hoist,先将方法unused方法声明,然后声明了originThing和c变量。这里特别要注意,**闭包是在方法声明的时候被创建的而不是在方法执行的时候创建的**,所以当声明了unused方法以后,同时创建了一个闭包,里面包含了unused方法使用的局部作用域变量originThing。**另外在V8中一旦作用域有闭包,这个上下文会被绑定到所有方法当中作为闭包,即使这个方法没有使用这个作用域中的任何一个变量**,所以在这里给全局作用域赋值的时候,someMethod作为一个方法,也被绑定一个unused创建的闭包,且被赋值在全局作用域中的theThing上了。\n3. 如果这时候开始第一次GC,从全局对象进行Reachable分析:theThing(reachable),replaceThing(reachable),theThing->longStr(reachable),theThing->someMethod(reachable),execution stack -> setInterval -> closure -> originThing(reachable)。   \n所有标记完成。此时:\n```js\n          from-space                                to-space\n\n    theThing         (reachable)                theThing\n    replaceThing     (reachable)                replaceThing\n    unused                                      originThing\n    originThing      (reachable)       =>       longStr  \n    c                                           someMethod\n    longStr          (reachable)                \n    someMethod       (reachable)                \n```\n4. 在过1000毫秒以后又执行replaceThing,又执行一遍步骤2\n5. 第二次GC开始\n\n```js\n          from-space                                to-space                           old-space\n\n    theThing         (reachable)                theThing                             originThing -> theThing\n    replaceThing     (reachable)                replaceThing                         theThing -> longStr\n    unused                                      originThing                          theThing -> someMethod\n    originThing      (reachable)       =>       longStr                    =>        someMethod -> originThing(closure)        \n    c                                           someMethod\n    longStr          (reachable)                \n    someMethod       (reachable)                \n```\n6. 因为闭包一直连着这originThing,导致了old-space中的originThing一直无法释放。随着时间的推移,每个1000毫秒执行一次replaceThing方法\n\n```js\n         old-space\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n```\n\n#### 结论 \n主要导致内存泄漏的原因是\n\n![闭包是在声明的时候被创建的](http://img.pandihai.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190708095349.png)<center><font color=gray size=2>闭包是在声明的时候被创建的,而不是执行的时候被创建的。</font></center>\n\n然后导致在originalThing还引用着老的theThing,theThing中的someMethod引用着originalThing导致全部都reachable无法释放。\n\n``` javacript\n\nvar theThing = null;\nvar replaceThing = function () {\n  var originalThing = theThing;\n  var c = 'a'\n  function unused() {\n    if (originalThing) {\n      console.log(\"hi\");\n    }\n  };\n\n  theThing = {\n    longStr: new Array(1000000).join('*'),\n    someMethod: function () {\n      console.log('1111');\n    }\n  };\n\n  originalThing = null;    //手动释放局部作用域中的变量\n};\n\nsetInterval(replaceThing,1000)\n\n```\n","source":"_posts/javascript垃圾回收机制.md","raw":"---\nlayout: post\ntitle: javascript垃圾回收机制\ndate: 2019-07-01 10:53:41\ntags:\n---\n\n## 前言\n\n其实大多数的时候作为javascript开发者不需要太关心内存的使用和释放,因为所有的javascript环境都实现了各自的垃圾回收机制(garbage collector(GC)),但是随着现在的SPA越来越多也越来越大,越来越追求极致的性能渐渐也要求开发者能够适当的了解一些垃圾回收机制内部的实现原理,在性能优化和追踪内存泄漏的时候都能够起到一点帮助。看一段内存泄漏的代码\n``` javacript\n\nvar theThing = null;\nvar replaceThing = function () {\n  var originalThing = theThing;\n  var c = 'a'\n  function unused() {\n    if (originalThing) {\n      console.log(\"hi\");\n    }\n  };\n\n  theThing = {\n    longStr: new Array(1000000).join('*'),\n    someMethod: function () {\n      console.log('1111');\n    }\n  };\n};\n\nsetInterval(replaceThing,1000)\n\n```\n最早想要去深入了解javacript GC是看到这道找内存泄漏的题目(具体怎么内存泄漏,我们后面在分析).任何一种GC管理都需要做这几步:\n1. 识别哪些对象需要被回收。\n2. 回收/重复使用需要被回收对象的内存。\n3. 压缩/整理内存(有些可能没有)\n\n而常见的识别对象是否需要回收的机制有下面几种:\n* 引用计数 (Python)\n* 逃逸分析 (Java)\n* Tracing/Reachable 追踪分析 (javascript)\n\n今天就主要看一下V8中GC的具体实现方式\n\n## Tracing/Reachable 追踪分析\nGC的第一步就是要找出哪些对象需要被回收,哪些不需要。在追踪分析(Tracing/Reachable)中,认为可以被追踪到(reachability)的对象认为是不能被回收的对象,剩下的不能被追踪到的对象就是要回收的对象。\n在V8中,追踪分析会从根对象开始(GC Root)根据指针将所有被能被追踪到的对象标记为reachable,javascript中根对象包括调用堆栈和global对象。\n\n\n## The Generational Hypothesis\nGenerational Hypothesis的意思是大部分的对象在早期就需要被回收。基于这样的一个假设,有很多的编程语言的垃圾回收机制在设计的时候都是将内存分代,年轻代(young generation),和老代(old generation)。\n这里的代其实就是开辟两块space分别存储刚被分配的对象和经过两次GC还是没有被回收的对象。在V8中有两个垃圾回收器分别对年轻代和老代进行垃圾回收,Scavenger针对年轻代进行垃圾回收,Major GC针对老代进行垃圾回收,他们的算法也是不同的。\n\n### Scavenger\nV8在年轻代的内存space使用的是semi-space算法,也就是说将内存分为两半,同时只有一块的内存能被使用,另外一半是完全空的(或者说这一半内存都是可以被分配的)。在程序开始执行的时候,将所有的变量都分配可以被使用的一半内存中(叫做from-space)。当第一次GC开始的时候根据追踪分析结果,将所有可以reachable的对象(不能被释放的对象),全部转移到剩余一半可以被分配的内存中(to-space)，这样from-space中的内存又全部可以被分配了，这个时候如果又有新申明的对象需要分配内存,就会分配到这一块内存当中了,最后在转移完不能被释放的对象之后,还需要更新引用指针,指向在to-space中最新的地址。\n\n![第一次GC](http://img.pandihai.com/03.svg)\n\n\n第二次GC开始的时候,在原本的to-space中仍然不能被释放的对象首先转移到老代(old generation)的space中,这时候to-space中又全部可以被分配,重复之前的操作。从from-space中将不能被释放的对象转移过来。完成2次GC之后,存货了两次的对象现在就在老代里面了,而存活一次GC的对象现在就在to-space中了,这个to-space也被叫做intermediate generation(中生代).在Scavenger中回收内存有三个过程:标记(追踪分析),转移(from-space to to-space),更新指针地址。\n\n![第二次GC](http://img.pandihai.com/04.svg)<center><font color=gray size=2>第二次GC</font></center>\n\n\n在这种内存回收的机制中,其中一个问题就是转移对象的时候是会消耗一定性能的,但是根据Generational Hypothesis的假设大部分的对象在早期就会被回收了,这也就意味着只有少部分不能被回收的对象需要被移动，这也意味着如果这个假设不成立，比如我们的代码中有很多的闭包导致很多的作用域不能被释放,那么将会有大量的对象需要在space之间转移,是比较浪费性能的。但是相反的,基于大部分对象都可以在早期被回收的假设,如果大部分的对象在早期就可以被释放,这种机制的内存回收对这需要在早期就回收的对象其实是什么都不需要做的,只需要把不能释放的少部分对象进行转移（from-space to to-space）,然后在下次分配内存的时候把这部分需要释放的对象所占的内存直接覆盖就可以了(rewrite dead object)。\n\n#### Parallel\nParallel是V8中调度线程进行内存回收的一种算法,指的是主线程和帮助线程同时进行相同工作量的内存回收,这种算法还是会停止主线程正在进行的全部工作,但是工作量被平摊到几个线程之后,理论上时间也被参与线程的数量整除了(加上一些同步调度的开销)。Scavenger就是使用的这种线程调度机制,当需要进行内存回收的时候,所有的线程获得一定数量的存活的对象引用指针,开始同时将这些存活对象搬运到to-space中。不同的线程可能通过不同引用路径访问到同一个对象,当线程将存活对象转移到to-space之后,更新完指针地址后,会在from-space的老对象中留下一个forwarding指针,这样其他线程找到这个对象之后就可以通过这个指针来找到新的地址更新引用地址了。\n\n![Scavenger平行调度](http://img.pandihai.com/05.svg)<center><font color=gray size=2>Scavenger平行调度,同时有多个帮助线程和主线程参与</font></center>\n\n### Major GC\nMajor GC主要负责老代的内存回收,同样也是三个过程:标记(追踪分析),清除,整理压缩内存。标记这一步和Scavenger一样通过追踪分析确定哪些内存需要被回收,然后在对象被回收以后将被回收的内存加入到free-list这个数据结构中,free-list就像是一个个抽屉,每个抽屉的大小代表了从这个地址开始可以被连续分配的内存的大小,当我们需要在老代中重新分配内存的时候就可以快速的根据需要分配内存的大小找到一个合适的抽屉把内存进行分配。最后就是进行内存整理,这个就好像是Windows系统整理磁盘一样,将还没被幸存的对象利用free-list查找拷贝到其他的已经被整理完的page中,这样使小块的内存碎片也被整理完之后加以利用。跟Scavenger中一样来回拷贝对象也会有性能的消耗,在V8中只会对高度碎片化的page进行整理,对其他的page进行清除,这样在转移的时候也是一样的只需要转移存活的对象就可以了。\n\n#### Concurrent\nConcurrent同样也是V8中进行内存回收的线程调度算法,当主线程执行Javascript的时候,帮助线程同步进行内存回收的一些工作。相比Parallel来说这个算法要复杂的多,可能前一毫秒帮助线程在进行GC操作,后一毫秒主线程就改变了这个对象。也有可能帮助线程和主线程同时读取修改同一个对象。但是这种算法的优势就是当帮助线程进行GC工作的时候,主线程可以继续执行JavaScript,完全不会受到影响。Major GC就是采用的这个算法,当老代的内存到达一定系统自动计算的阀值,就开始进行Major GC,首先每个帮助线程都会获得一定数量的对象指针,开始针对这些对象进行标记,然后根据对象的引用指针对reachable对象都进行标记,在进行这些标记的同时,主线程仍然在执行JavaScript没有受到影响。当帮助线程完成标记,或者老代触及了设定的阀值,主线程也开始参与GC,他首先进行一步快速的标记确认,确保帮助线程在标记的同时主线程修改的对象标记正确(在帮助线程进行标记的时候,如果主线程执行的JavaScript修改了对象会有Write barriers,类似于有个标记)。当主线程确认所有存活的对象都被标记以后,主线程会和几个子线程一起,对一些内存page进行压缩和更新指针的工作,不是所有的page都需要进行压缩(只对高碎片化的进行压缩),不需要压缩的利用free-list进行打扫。\n\n![Major GC同步调度](http://img.pandihai.com/09.svg)<center><font color=gray size=2>Major GC同步调度</font></center>\n\n\n### 什么时候会执行GC\n在JavaScript中我们没办法用编程的方式主动触发GC,因为涉及到复杂的线程调度,主动的触发GC可能会影响正在执行的GC或者下次的GC。对于Scavenger来说,当在新生代中分配内存时,已经没有空间分配内存导致分配内存失败时,开始Scavenger垃圾回收,希望能释放一些内存,然后在尝试重新分配内存。对于老代来说,开启内存回收的时机要复杂很多,简单来说会根据老代中内存占用的百分比和需要被分配对象的百分比计算出一个合适的阀值,触及到这个阀值就会开启老代的垃圾回收。\n\n我们可以通过手动设置来设置新生代和老代的space大小:\n```js\n    node --max-old-space-size=1700 index.js\n    node --max-new-space-size=1024 index.js\n```\n\n\n#### 空闲时GC\n虽然我们通过JavaScript没办法主动触发GC,但是在V8中还有一个空闲GC的机制,他根据被嵌入宿主来决定什么时候属于空闲时来执行GC。比如V8在Chrome浏览器中,为了保证动画渲染的流畅,一秒钟需要渲染60个帧,相当于16.6毫秒渲染一帧,在16.6毫秒以内渲染完了一帧,比如只花了10毫秒就渲染完了这一帧的动画,那么你就有了6.6毫秒的空闲时间可以执行一些空闲时的GC(在许多新版本的浏览器中,开发者也可以通过[requestIdleCallback](https://developers.google.com/web/updates/2015/08/using-requestidlecallback)事件,利用浏览器空闲时间来提高性能,有兴趣的可以去了解[React 16 fiber的实现](https://www.youtube.com/watch?v=ZCuYPiUIONs))。\n\n![空闲时GC](http://img.pandihai.com/10.svg)<center><font color=gray size=2>利用主线程空闲时间进行GC</font></center>\n\n#### Incremental\n那么在空闲的几毫秒时间里能完成一次GC吗?那就是接下来就要介绍另外一种调度算法Incremental了,相比较于其他调度算法在暂停一次主线程执行一整次完成的GC,Incremental要求把一整个GC中的工作拆成一小块,和主线程中的JS递进的执行,或者在主线程有空闲时间的时候执行一小块GC任务。\n\n![Incremental](http://img.pandihai.com/06.svg)<center><font color=gray size=2>将一整个GC切分成一小块GC任务,插入到主线程中进行</font></center>\n\n### 总结\n不同JavaScript引擎实现GC都有不同程度的差异,本文主要以V8为例,有很多地方没有非常仔细的展开,比如：其实老代里面不是只有一块space,而是有4块space组成,每块space存放着不同的数据(old space,large object space,matedata space,code space)。垃圾回收设计本身就是一个很复杂的程序,有了GC,让开发者可以完全不用担心内存的管理问题。但是适当的了解垃圾回收的原理能够帮助我们更加深入的理解JavaScript的运行环境,也可以帮助我们写出更高效率的代码。\n\n最后的最后将之前的内存泄漏代码一步步的推演:\n\n1. 首先在全局作用域中声明了两个变量theThing和replaceThing,其中replaceThing被赋值为一个方法(callable object),然后调用setInterval方法,每隔1000毫秒调用一次replaceThing。\n2. 1000毫秒到了,执行replaceThing,创建一个新的局部作用域,根据hoist,先将方法unused方法声明,然后声明了originThing和c变量。这里特别要注意,**闭包是在方法声明的时候被创建的而不是在方法执行的时候创建的**,所以当声明了unused方法以后,同时创建了一个闭包,里面包含了unused方法使用的局部作用域变量originThing。**另外在V8中一旦作用域有闭包,这个上下文会被绑定到所有方法当中作为闭包,即使这个方法没有使用这个作用域中的任何一个变量**,所以在这里给全局作用域赋值的时候,someMethod作为一个方法,也被绑定一个unused创建的闭包,且被赋值在全局作用域中的theThing上了。\n3. 如果这时候开始第一次GC,从全局对象进行Reachable分析:theThing(reachable),replaceThing(reachable),theThing->longStr(reachable),theThing->someMethod(reachable),execution stack -> setInterval -> closure -> originThing(reachable)。   \n所有标记完成。此时:\n```js\n          from-space                                to-space\n\n    theThing         (reachable)                theThing\n    replaceThing     (reachable)                replaceThing\n    unused                                      originThing\n    originThing      (reachable)       =>       longStr  \n    c                                           someMethod\n    longStr          (reachable)                \n    someMethod       (reachable)                \n```\n4. 在过1000毫秒以后又执行replaceThing,又执行一遍步骤2\n5. 第二次GC开始\n\n```js\n          from-space                                to-space                           old-space\n\n    theThing         (reachable)                theThing                             originThing -> theThing\n    replaceThing     (reachable)                replaceThing                         theThing -> longStr\n    unused                                      originThing                          theThing -> someMethod\n    originThing      (reachable)       =>       longStr                    =>        someMethod -> originThing(closure)        \n    c                                           someMethod\n    longStr          (reachable)                \n    someMethod       (reachable)                \n```\n6. 因为闭包一直连着这originThing,导致了old-space中的originThing一直无法释放。随着时间的推移,每个1000毫秒执行一次replaceThing方法\n\n```js\n         old-space\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n    originThing -> theThing -> longStr & someMethod -> originThing(closure)\n```\n\n#### 结论 \n主要导致内存泄漏的原因是\n\n![闭包是在声明的时候被创建的](http://img.pandihai.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190708095349.png)<center><font color=gray size=2>闭包是在声明的时候被创建的,而不是执行的时候被创建的。</font></center>\n\n然后导致在originalThing还引用着老的theThing,theThing中的someMethod引用着originalThing导致全部都reachable无法释放。\n\n``` javacript\n\nvar theThing = null;\nvar replaceThing = function () {\n  var originalThing = theThing;\n  var c = 'a'\n  function unused() {\n    if (originalThing) {\n      console.log(\"hi\");\n    }\n  };\n\n  theThing = {\n    longStr: new Array(1000000).join('*'),\n    someMethod: function () {\n      console.log('1111');\n    }\n  };\n\n  originalThing = null;    //手动释放局部作用域中的变量\n};\n\nsetInterval(replaceThing,1000)\n\n```\n","slug":"javascript垃圾回收机制","published":1,"updated":"2019-09-03T07:28:28.140Z","comments":1,"photos":[],"link":"","_id":"ck04levvh000560ucrh5ysskb","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>其实大多数的时候作为javascript开发者不需要太关心内存的使用和释放,因为所有的javascript环境都实现了各自的垃圾回收机制(garbage collector(GC)),但是随着现在的SPA越来越多也越来越大,越来越追求极致的性能渐渐也要求开发者能够适当的了解一些垃圾回收机制内部的实现原理,在性能优化和追踪内存泄漏的时候都能够起到一点帮助。看一段内存泄漏的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var theThing = null;</span><br><span class=\"line\">var replaceThing = function () &#123;</span><br><span class=\"line\">  var originalThing = theThing;</span><br><span class=\"line\">  var c = &apos;a&apos;</span><br><span class=\"line\">  function unused() &#123;</span><br><span class=\"line\">    if (originalThing) &#123;</span><br><span class=\"line\">      console.log(&quot;hi&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  theThing = &#123;</span><br><span class=\"line\">    longStr: new Array(1000000).join(&apos;*&apos;),</span><br><span class=\"line\">    someMethod: function () &#123;</span><br><span class=\"line\">      console.log(&apos;1111&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(replaceThing,1000)</span><br></pre></td></tr></table></figure></p>\n<p>最早想要去深入了解javacript GC是看到这道找内存泄漏的题目(具体怎么内存泄漏,我们后面在分析).任何一种GC管理都需要做这几步:</p>\n<ol>\n<li>识别哪些对象需要被回收。</li>\n<li>回收/重复使用需要被回收对象的内存。</li>\n<li>压缩/整理内存(有些可能没有)</li>\n</ol>\n<p>而常见的识别对象是否需要回收的机制有下面几种:</p>\n<ul>\n<li>引用计数 (Python)</li>\n<li>逃逸分析 (Java)</li>\n<li>Tracing/Reachable 追踪分析 (javascript)</li>\n</ul>\n<p>今天就主要看一下V8中GC的具体实现方式</p>\n<h2 id=\"Tracing-Reachable-追踪分析\"><a href=\"#Tracing-Reachable-追踪分析\" class=\"headerlink\" title=\"Tracing/Reachable 追踪分析\"></a>Tracing/Reachable 追踪分析</h2><p>GC的第一步就是要找出哪些对象需要被回收,哪些不需要。在追踪分析(Tracing/Reachable)中,认为可以被追踪到(reachability)的对象认为是不能被回收的对象,剩下的不能被追踪到的对象就是要回收的对象。<br>在V8中,追踪分析会从根对象开始(GC Root)根据指针将所有被能被追踪到的对象标记为reachable,javascript中根对象包括调用堆栈和global对象。</p>\n<h2 id=\"The-Generational-Hypothesis\"><a href=\"#The-Generational-Hypothesis\" class=\"headerlink\" title=\"The Generational Hypothesis\"></a>The Generational Hypothesis</h2><p>Generational Hypothesis的意思是大部分的对象在早期就需要被回收。基于这样的一个假设,有很多的编程语言的垃圾回收机制在设计的时候都是将内存分代,年轻代(young generation),和老代(old generation)。<br>这里的代其实就是开辟两块space分别存储刚被分配的对象和经过两次GC还是没有被回收的对象。在V8中有两个垃圾回收器分别对年轻代和老代进行垃圾回收,Scavenger针对年轻代进行垃圾回收,Major GC针对老代进行垃圾回收,他们的算法也是不同的。</p>\n<h3 id=\"Scavenger\"><a href=\"#Scavenger\" class=\"headerlink\" title=\"Scavenger\"></a>Scavenger</h3><p>V8在年轻代的内存space使用的是semi-space算法,也就是说将内存分为两半,同时只有一块的内存能被使用,另外一半是完全空的(或者说这一半内存都是可以被分配的)。在程序开始执行的时候,将所有的变量都分配可以被使用的一半内存中(叫做from-space)。当第一次GC开始的时候根据追踪分析结果,将所有可以reachable的对象(不能被释放的对象),全部转移到剩余一半可以被分配的内存中(to-space)，这样from-space中的内存又全部可以被分配了，这个时候如果又有新申明的对象需要分配内存,就会分配到这一块内存当中了,最后在转移完不能被释放的对象之后,还需要更新引用指针,指向在to-space中最新的地址。</p>\n<p><img src=\"http://img.pandihai.com/03.svg\" alt=\"第一次GC\"></p>\n<p>第二次GC开始的时候,在原本的to-space中仍然不能被释放的对象首先转移到老代(old generation)的space中,这时候to-space中又全部可以被分配,重复之前的操作。从from-space中将不能被释放的对象转移过来。完成2次GC之后,存货了两次的对象现在就在老代里面了,而存活一次GC的对象现在就在to-space中了,这个to-space也被叫做intermediate generation(中生代).在Scavenger中回收内存有三个过程:标记(追踪分析),转移(from-space to to-space),更新指针地址。</p>\n<p><img src=\"http://img.pandihai.com/04.svg\" alt=\"第二次GC\"><center><font color=\"gray\" size=\"2\">第二次GC</font></center></p>\n<p>在这种内存回收的机制中,其中一个问题就是转移对象的时候是会消耗一定性能的,但是根据Generational Hypothesis的假设大部分的对象在早期就会被回收了,这也就意味着只有少部分不能被回收的对象需要被移动，这也意味着如果这个假设不成立，比如我们的代码中有很多的闭包导致很多的作用域不能被释放,那么将会有大量的对象需要在space之间转移,是比较浪费性能的。但是相反的,基于大部分对象都可以在早期被回收的假设,如果大部分的对象在早期就可以被释放,这种机制的内存回收对这需要在早期就回收的对象其实是什么都不需要做的,只需要把不能释放的少部分对象进行转移（from-space to to-space）,然后在下次分配内存的时候把这部分需要释放的对象所占的内存直接覆盖就可以了(rewrite dead object)。</p>\n<h4 id=\"Parallel\"><a href=\"#Parallel\" class=\"headerlink\" title=\"Parallel\"></a>Parallel</h4><p>Parallel是V8中调度线程进行内存回收的一种算法,指的是主线程和帮助线程同时进行相同工作量的内存回收,这种算法还是会停止主线程正在进行的全部工作,但是工作量被平摊到几个线程之后,理论上时间也被参与线程的数量整除了(加上一些同步调度的开销)。Scavenger就是使用的这种线程调度机制,当需要进行内存回收的时候,所有的线程获得一定数量的存活的对象引用指针,开始同时将这些存活对象搬运到to-space中。不同的线程可能通过不同引用路径访问到同一个对象,当线程将存活对象转移到to-space之后,更新完指针地址后,会在from-space的老对象中留下一个forwarding指针,这样其他线程找到这个对象之后就可以通过这个指针来找到新的地址更新引用地址了。</p>\n<p><img src=\"http://img.pandihai.com/05.svg\" alt=\"Scavenger平行调度\"><center><font color=\"gray\" size=\"2\">Scavenger平行调度,同时有多个帮助线程和主线程参与</font></center></p>\n<h3 id=\"Major-GC\"><a href=\"#Major-GC\" class=\"headerlink\" title=\"Major GC\"></a>Major GC</h3><p>Major GC主要负责老代的内存回收,同样也是三个过程:标记(追踪分析),清除,整理压缩内存。标记这一步和Scavenger一样通过追踪分析确定哪些内存需要被回收,然后在对象被回收以后将被回收的内存加入到free-list这个数据结构中,free-list就像是一个个抽屉,每个抽屉的大小代表了从这个地址开始可以被连续分配的内存的大小,当我们需要在老代中重新分配内存的时候就可以快速的根据需要分配内存的大小找到一个合适的抽屉把内存进行分配。最后就是进行内存整理,这个就好像是Windows系统整理磁盘一样,将还没被幸存的对象利用free-list查找拷贝到其他的已经被整理完的page中,这样使小块的内存碎片也被整理完之后加以利用。跟Scavenger中一样来回拷贝对象也会有性能的消耗,在V8中只会对高度碎片化的page进行整理,对其他的page进行清除,这样在转移的时候也是一样的只需要转移存活的对象就可以了。</p>\n<h4 id=\"Concurrent\"><a href=\"#Concurrent\" class=\"headerlink\" title=\"Concurrent\"></a>Concurrent</h4><p>Concurrent同样也是V8中进行内存回收的线程调度算法,当主线程执行Javascript的时候,帮助线程同步进行内存回收的一些工作。相比Parallel来说这个算法要复杂的多,可能前一毫秒帮助线程在进行GC操作,后一毫秒主线程就改变了这个对象。也有可能帮助线程和主线程同时读取修改同一个对象。但是这种算法的优势就是当帮助线程进行GC工作的时候,主线程可以继续执行JavaScript,完全不会受到影响。Major GC就是采用的这个算法,当老代的内存到达一定系统自动计算的阀值,就开始进行Major GC,首先每个帮助线程都会获得一定数量的对象指针,开始针对这些对象进行标记,然后根据对象的引用指针对reachable对象都进行标记,在进行这些标记的同时,主线程仍然在执行JavaScript没有受到影响。当帮助线程完成标记,或者老代触及了设定的阀值,主线程也开始参与GC,他首先进行一步快速的标记确认,确保帮助线程在标记的同时主线程修改的对象标记正确(在帮助线程进行标记的时候,如果主线程执行的JavaScript修改了对象会有Write barriers,类似于有个标记)。当主线程确认所有存活的对象都被标记以后,主线程会和几个子线程一起,对一些内存page进行压缩和更新指针的工作,不是所有的page都需要进行压缩(只对高碎片化的进行压缩),不需要压缩的利用free-list进行打扫。</p>\n<p><img src=\"http://img.pandihai.com/09.svg\" alt=\"Major GC同步调度\"><center><font color=\"gray\" size=\"2\">Major GC同步调度</font></center></p>\n<h3 id=\"什么时候会执行GC\"><a href=\"#什么时候会执行GC\" class=\"headerlink\" title=\"什么时候会执行GC\"></a>什么时候会执行GC</h3><p>在JavaScript中我们没办法用编程的方式主动触发GC,因为涉及到复杂的线程调度,主动的触发GC可能会影响正在执行的GC或者下次的GC。对于Scavenger来说,当在新生代中分配内存时,已经没有空间分配内存导致分配内存失败时,开始Scavenger垃圾回收,希望能释放一些内存,然后在尝试重新分配内存。对于老代来说,开启内存回收的时机要复杂很多,简单来说会根据老代中内存占用的百分比和需要被分配对象的百分比计算出一个合适的阀值,触及到这个阀值就会开启老代的垃圾回收。</p>\n<p>我们可以通过手动设置来设置新生代和老代的space大小:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --max-old-space-size=<span class=\"number\">1700</span> index.js</span><br><span class=\"line\">node --max-<span class=\"keyword\">new</span>-space-size=<span class=\"number\">1024</span> index.js</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"空闲时GC\"><a href=\"#空闲时GC\" class=\"headerlink\" title=\"空闲时GC\"></a>空闲时GC</h4><p>虽然我们通过JavaScript没办法主动触发GC,但是在V8中还有一个空闲GC的机制,他根据被嵌入宿主来决定什么时候属于空闲时来执行GC。比如V8在Chrome浏览器中,为了保证动画渲染的流畅,一秒钟需要渲染60个帧,相当于16.6毫秒渲染一帧,在16.6毫秒以内渲染完了一帧,比如只花了10毫秒就渲染完了这一帧的动画,那么你就有了6.6毫秒的空闲时间可以执行一些空闲时的GC(在许多新版本的浏览器中,开发者也可以通过<a href=\"https://developers.google.com/web/updates/2015/08/using-requestidlecallback\" target=\"_blank\" rel=\"noopener\">requestIdleCallback</a>事件,利用浏览器空闲时间来提高性能,有兴趣的可以去了解<a href=\"https://www.youtube.com/watch?v=ZCuYPiUIONs\" target=\"_blank\" rel=\"noopener\">React 16 fiber的实现</a>)。</p>\n<p><img src=\"http://img.pandihai.com/10.svg\" alt=\"空闲时GC\"><center><font color=\"gray\" size=\"2\">利用主线程空闲时间进行GC</font></center></p>\n<h4 id=\"Incremental\"><a href=\"#Incremental\" class=\"headerlink\" title=\"Incremental\"></a>Incremental</h4><p>那么在空闲的几毫秒时间里能完成一次GC吗?那就是接下来就要介绍另外一种调度算法Incremental了,相比较于其他调度算法在暂停一次主线程执行一整次完成的GC,Incremental要求把一整个GC中的工作拆成一小块,和主线程中的JS递进的执行,或者在主线程有空闲时间的时候执行一小块GC任务。</p>\n<p><img src=\"http://img.pandihai.com/06.svg\" alt=\"Incremental\"><center><font color=\"gray\" size=\"2\">将一整个GC切分成一小块GC任务,插入到主线程中进行</font></center></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>不同JavaScript引擎实现GC都有不同程度的差异,本文主要以V8为例,有很多地方没有非常仔细的展开,比如：其实老代里面不是只有一块space,而是有4块space组成,每块space存放着不同的数据(old space,large object space,matedata space,code space)。垃圾回收设计本身就是一个很复杂的程序,有了GC,让开发者可以完全不用担心内存的管理问题。但是适当的了解垃圾回收的原理能够帮助我们更加深入的理解JavaScript的运行环境,也可以帮助我们写出更高效率的代码。</p>\n<p>最后的最后将之前的内存泄漏代码一步步的推演:</p>\n<ol>\n<li>首先在全局作用域中声明了两个变量theThing和replaceThing,其中replaceThing被赋值为一个方法(callable object),然后调用setInterval方法,每隔1000毫秒调用一次replaceThing。</li>\n<li>1000毫秒到了,执行replaceThing,创建一个新的局部作用域,根据hoist,先将方法unused方法声明,然后声明了originThing和c变量。这里特别要注意,<strong>闭包是在方法声明的时候被创建的而不是在方法执行的时候创建的</strong>,所以当声明了unused方法以后,同时创建了一个闭包,里面包含了unused方法使用的局部作用域变量originThing。<strong>另外在V8中一旦作用域有闭包,这个上下文会被绑定到所有方法当中作为闭包,即使这个方法没有使用这个作用域中的任何一个变量</strong>,所以在这里给全局作用域赋值的时候,someMethod作为一个方法,也被绑定一个unused创建的闭包,且被赋值在全局作用域中的theThing上了。</li>\n<li><p>如果这时候开始第一次GC,从全局对象进行Reachable分析:theThing(reachable),replaceThing(reachable),theThing-&gt;longStr(reachable),theThing-&gt;someMethod(reachable),execution stack -&gt; setInterval -&gt; closure -&gt; originThing(reachable)。<br>所有标记完成。此时:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">from</span>-space                                to-space</span><br><span class=\"line\"></span><br><span class=\"line\">theThing         (reachable)                theThing</span><br><span class=\"line\">replaceThing     (reachable)                replaceThing</span><br><span class=\"line\">unused                                      originThing</span><br><span class=\"line\">originThing      (reachable)       =&gt;       longStr  </span><br><span class=\"line\">c                                           someMethod</span><br><span class=\"line\">longStr          (reachable)                </span><br><span class=\"line\">someMethod       (reachable)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在过1000毫秒以后又执行replaceThing,又执行一遍步骤2</p>\n</li>\n<li>第二次GC开始</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">from</span>-space                                to-space                           old-space</span><br><span class=\"line\"></span><br><span class=\"line\">theThing         (reachable)                theThing                             originThing -&gt; theThing</span><br><span class=\"line\">replaceThing     (reachable)                replaceThing                         theThing -&gt; longStr</span><br><span class=\"line\">unused                                      originThing                          theThing -&gt; someMethod</span><br><span class=\"line\">originThing      (reachable)       =&gt;       <span class=\"function\"><span class=\"params\">longStr</span>                    =&gt;</span>        someMethod -&gt; originThing(closure)        </span><br><span class=\"line\">c                                           someMethod</span><br><span class=\"line\">longStr          (reachable)                </span><br><span class=\"line\">someMethod       (reachable)</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>因为闭包一直连着这originThing,导致了old-space中的originThing一直无法释放。随着时间的推移,每个1000毫秒执行一次replaceThing方法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     old-space</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br></pre></td></tr></table></figure>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>主要导致内存泄漏的原因是</p>\n<p><img src=\"http://img.pandihai.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190708095349.png\" alt=\"闭包是在声明的时候被创建的\"><center><font color=\"gray\" size=\"2\">闭包是在声明的时候被创建的,而不是执行的时候被创建的。</font></center></p>\n<p>然后导致在originalThing还引用着老的theThing,theThing中的someMethod引用着originalThing导致全部都reachable无法释放。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var theThing = null;</span><br><span class=\"line\">var replaceThing = function () &#123;</span><br><span class=\"line\">  var originalThing = theThing;</span><br><span class=\"line\">  var c = &apos;a&apos;</span><br><span class=\"line\">  function unused() &#123;</span><br><span class=\"line\">    if (originalThing) &#123;</span><br><span class=\"line\">      console.log(&quot;hi&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  theThing = &#123;</span><br><span class=\"line\">    longStr: new Array(1000000).join(&apos;*&apos;),</span><br><span class=\"line\">    someMethod: function () &#123;</span><br><span class=\"line\">      console.log(&apos;1111&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  originalThing = null;    //手动释放局部作用域中的变量</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(replaceThing,1000)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>其实大多数的时候作为javascript开发者不需要太关心内存的使用和释放,因为所有的javascript环境都实现了各自的垃圾回收机制(garbage collector(GC)),但是随着现在的SPA越来越多也越来越大,越来越追求极致的性能渐渐也要求开发者能够适当的了解一些垃圾回收机制内部的实现原理,在性能优化和追踪内存泄漏的时候都能够起到一点帮助。看一段内存泄漏的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var theThing = null;</span><br><span class=\"line\">var replaceThing = function () &#123;</span><br><span class=\"line\">  var originalThing = theThing;</span><br><span class=\"line\">  var c = &apos;a&apos;</span><br><span class=\"line\">  function unused() &#123;</span><br><span class=\"line\">    if (originalThing) &#123;</span><br><span class=\"line\">      console.log(&quot;hi&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  theThing = &#123;</span><br><span class=\"line\">    longStr: new Array(1000000).join(&apos;*&apos;),</span><br><span class=\"line\">    someMethod: function () &#123;</span><br><span class=\"line\">      console.log(&apos;1111&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(replaceThing,1000)</span><br></pre></td></tr></table></figure></p>\n<p>最早想要去深入了解javacript GC是看到这道找内存泄漏的题目(具体怎么内存泄漏,我们后面在分析).任何一种GC管理都需要做这几步:</p>\n<ol>\n<li>识别哪些对象需要被回收。</li>\n<li>回收/重复使用需要被回收对象的内存。</li>\n<li>压缩/整理内存(有些可能没有)</li>\n</ol>\n<p>而常见的识别对象是否需要回收的机制有下面几种:</p>\n<ul>\n<li>引用计数 (Python)</li>\n<li>逃逸分析 (Java)</li>\n<li>Tracing/Reachable 追踪分析 (javascript)</li>\n</ul>\n<p>今天就主要看一下V8中GC的具体实现方式</p>\n<h2 id=\"Tracing-Reachable-追踪分析\"><a href=\"#Tracing-Reachable-追踪分析\" class=\"headerlink\" title=\"Tracing/Reachable 追踪分析\"></a>Tracing/Reachable 追踪分析</h2><p>GC的第一步就是要找出哪些对象需要被回收,哪些不需要。在追踪分析(Tracing/Reachable)中,认为可以被追踪到(reachability)的对象认为是不能被回收的对象,剩下的不能被追踪到的对象就是要回收的对象。<br>在V8中,追踪分析会从根对象开始(GC Root)根据指针将所有被能被追踪到的对象标记为reachable,javascript中根对象包括调用堆栈和global对象。</p>\n<h2 id=\"The-Generational-Hypothesis\"><a href=\"#The-Generational-Hypothesis\" class=\"headerlink\" title=\"The Generational Hypothesis\"></a>The Generational Hypothesis</h2><p>Generational Hypothesis的意思是大部分的对象在早期就需要被回收。基于这样的一个假设,有很多的编程语言的垃圾回收机制在设计的时候都是将内存分代,年轻代(young generation),和老代(old generation)。<br>这里的代其实就是开辟两块space分别存储刚被分配的对象和经过两次GC还是没有被回收的对象。在V8中有两个垃圾回收器分别对年轻代和老代进行垃圾回收,Scavenger针对年轻代进行垃圾回收,Major GC针对老代进行垃圾回收,他们的算法也是不同的。</p>\n<h3 id=\"Scavenger\"><a href=\"#Scavenger\" class=\"headerlink\" title=\"Scavenger\"></a>Scavenger</h3><p>V8在年轻代的内存space使用的是semi-space算法,也就是说将内存分为两半,同时只有一块的内存能被使用,另外一半是完全空的(或者说这一半内存都是可以被分配的)。在程序开始执行的时候,将所有的变量都分配可以被使用的一半内存中(叫做from-space)。当第一次GC开始的时候根据追踪分析结果,将所有可以reachable的对象(不能被释放的对象),全部转移到剩余一半可以被分配的内存中(to-space)，这样from-space中的内存又全部可以被分配了，这个时候如果又有新申明的对象需要分配内存,就会分配到这一块内存当中了,最后在转移完不能被释放的对象之后,还需要更新引用指针,指向在to-space中最新的地址。</p>\n<p><img src=\"http://img.pandihai.com/03.svg\" alt=\"第一次GC\"></p>\n<p>第二次GC开始的时候,在原本的to-space中仍然不能被释放的对象首先转移到老代(old generation)的space中,这时候to-space中又全部可以被分配,重复之前的操作。从from-space中将不能被释放的对象转移过来。完成2次GC之后,存货了两次的对象现在就在老代里面了,而存活一次GC的对象现在就在to-space中了,这个to-space也被叫做intermediate generation(中生代).在Scavenger中回收内存有三个过程:标记(追踪分析),转移(from-space to to-space),更新指针地址。</p>\n<p><img src=\"http://img.pandihai.com/04.svg\" alt=\"第二次GC\"><center><font color=\"gray\" size=\"2\">第二次GC</font></center></p>\n<p>在这种内存回收的机制中,其中一个问题就是转移对象的时候是会消耗一定性能的,但是根据Generational Hypothesis的假设大部分的对象在早期就会被回收了,这也就意味着只有少部分不能被回收的对象需要被移动，这也意味着如果这个假设不成立，比如我们的代码中有很多的闭包导致很多的作用域不能被释放,那么将会有大量的对象需要在space之间转移,是比较浪费性能的。但是相反的,基于大部分对象都可以在早期被回收的假设,如果大部分的对象在早期就可以被释放,这种机制的内存回收对这需要在早期就回收的对象其实是什么都不需要做的,只需要把不能释放的少部分对象进行转移（from-space to to-space）,然后在下次分配内存的时候把这部分需要释放的对象所占的内存直接覆盖就可以了(rewrite dead object)。</p>\n<h4 id=\"Parallel\"><a href=\"#Parallel\" class=\"headerlink\" title=\"Parallel\"></a>Parallel</h4><p>Parallel是V8中调度线程进行内存回收的一种算法,指的是主线程和帮助线程同时进行相同工作量的内存回收,这种算法还是会停止主线程正在进行的全部工作,但是工作量被平摊到几个线程之后,理论上时间也被参与线程的数量整除了(加上一些同步调度的开销)。Scavenger就是使用的这种线程调度机制,当需要进行内存回收的时候,所有的线程获得一定数量的存活的对象引用指针,开始同时将这些存活对象搬运到to-space中。不同的线程可能通过不同引用路径访问到同一个对象,当线程将存活对象转移到to-space之后,更新完指针地址后,会在from-space的老对象中留下一个forwarding指针,这样其他线程找到这个对象之后就可以通过这个指针来找到新的地址更新引用地址了。</p>\n<p><img src=\"http://img.pandihai.com/05.svg\" alt=\"Scavenger平行调度\"><center><font color=\"gray\" size=\"2\">Scavenger平行调度,同时有多个帮助线程和主线程参与</font></center></p>\n<h3 id=\"Major-GC\"><a href=\"#Major-GC\" class=\"headerlink\" title=\"Major GC\"></a>Major GC</h3><p>Major GC主要负责老代的内存回收,同样也是三个过程:标记(追踪分析),清除,整理压缩内存。标记这一步和Scavenger一样通过追踪分析确定哪些内存需要被回收,然后在对象被回收以后将被回收的内存加入到free-list这个数据结构中,free-list就像是一个个抽屉,每个抽屉的大小代表了从这个地址开始可以被连续分配的内存的大小,当我们需要在老代中重新分配内存的时候就可以快速的根据需要分配内存的大小找到一个合适的抽屉把内存进行分配。最后就是进行内存整理,这个就好像是Windows系统整理磁盘一样,将还没被幸存的对象利用free-list查找拷贝到其他的已经被整理完的page中,这样使小块的内存碎片也被整理完之后加以利用。跟Scavenger中一样来回拷贝对象也会有性能的消耗,在V8中只会对高度碎片化的page进行整理,对其他的page进行清除,这样在转移的时候也是一样的只需要转移存活的对象就可以了。</p>\n<h4 id=\"Concurrent\"><a href=\"#Concurrent\" class=\"headerlink\" title=\"Concurrent\"></a>Concurrent</h4><p>Concurrent同样也是V8中进行内存回收的线程调度算法,当主线程执行Javascript的时候,帮助线程同步进行内存回收的一些工作。相比Parallel来说这个算法要复杂的多,可能前一毫秒帮助线程在进行GC操作,后一毫秒主线程就改变了这个对象。也有可能帮助线程和主线程同时读取修改同一个对象。但是这种算法的优势就是当帮助线程进行GC工作的时候,主线程可以继续执行JavaScript,完全不会受到影响。Major GC就是采用的这个算法,当老代的内存到达一定系统自动计算的阀值,就开始进行Major GC,首先每个帮助线程都会获得一定数量的对象指针,开始针对这些对象进行标记,然后根据对象的引用指针对reachable对象都进行标记,在进行这些标记的同时,主线程仍然在执行JavaScript没有受到影响。当帮助线程完成标记,或者老代触及了设定的阀值,主线程也开始参与GC,他首先进行一步快速的标记确认,确保帮助线程在标记的同时主线程修改的对象标记正确(在帮助线程进行标记的时候,如果主线程执行的JavaScript修改了对象会有Write barriers,类似于有个标记)。当主线程确认所有存活的对象都被标记以后,主线程会和几个子线程一起,对一些内存page进行压缩和更新指针的工作,不是所有的page都需要进行压缩(只对高碎片化的进行压缩),不需要压缩的利用free-list进行打扫。</p>\n<p><img src=\"http://img.pandihai.com/09.svg\" alt=\"Major GC同步调度\"><center><font color=\"gray\" size=\"2\">Major GC同步调度</font></center></p>\n<h3 id=\"什么时候会执行GC\"><a href=\"#什么时候会执行GC\" class=\"headerlink\" title=\"什么时候会执行GC\"></a>什么时候会执行GC</h3><p>在JavaScript中我们没办法用编程的方式主动触发GC,因为涉及到复杂的线程调度,主动的触发GC可能会影响正在执行的GC或者下次的GC。对于Scavenger来说,当在新生代中分配内存时,已经没有空间分配内存导致分配内存失败时,开始Scavenger垃圾回收,希望能释放一些内存,然后在尝试重新分配内存。对于老代来说,开启内存回收的时机要复杂很多,简单来说会根据老代中内存占用的百分比和需要被分配对象的百分比计算出一个合适的阀值,触及到这个阀值就会开启老代的垃圾回收。</p>\n<p>我们可以通过手动设置来设置新生代和老代的space大小:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --max-old-space-size=<span class=\"number\">1700</span> index.js</span><br><span class=\"line\">node --max-<span class=\"keyword\">new</span>-space-size=<span class=\"number\">1024</span> index.js</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"空闲时GC\"><a href=\"#空闲时GC\" class=\"headerlink\" title=\"空闲时GC\"></a>空闲时GC</h4><p>虽然我们通过JavaScript没办法主动触发GC,但是在V8中还有一个空闲GC的机制,他根据被嵌入宿主来决定什么时候属于空闲时来执行GC。比如V8在Chrome浏览器中,为了保证动画渲染的流畅,一秒钟需要渲染60个帧,相当于16.6毫秒渲染一帧,在16.6毫秒以内渲染完了一帧,比如只花了10毫秒就渲染完了这一帧的动画,那么你就有了6.6毫秒的空闲时间可以执行一些空闲时的GC(在许多新版本的浏览器中,开发者也可以通过<a href=\"https://developers.google.com/web/updates/2015/08/using-requestidlecallback\" target=\"_blank\" rel=\"noopener\">requestIdleCallback</a>事件,利用浏览器空闲时间来提高性能,有兴趣的可以去了解<a href=\"https://www.youtube.com/watch?v=ZCuYPiUIONs\" target=\"_blank\" rel=\"noopener\">React 16 fiber的实现</a>)。</p>\n<p><img src=\"http://img.pandihai.com/10.svg\" alt=\"空闲时GC\"><center><font color=\"gray\" size=\"2\">利用主线程空闲时间进行GC</font></center></p>\n<h4 id=\"Incremental\"><a href=\"#Incremental\" class=\"headerlink\" title=\"Incremental\"></a>Incremental</h4><p>那么在空闲的几毫秒时间里能完成一次GC吗?那就是接下来就要介绍另外一种调度算法Incremental了,相比较于其他调度算法在暂停一次主线程执行一整次完成的GC,Incremental要求把一整个GC中的工作拆成一小块,和主线程中的JS递进的执行,或者在主线程有空闲时间的时候执行一小块GC任务。</p>\n<p><img src=\"http://img.pandihai.com/06.svg\" alt=\"Incremental\"><center><font color=\"gray\" size=\"2\">将一整个GC切分成一小块GC任务,插入到主线程中进行</font></center></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>不同JavaScript引擎实现GC都有不同程度的差异,本文主要以V8为例,有很多地方没有非常仔细的展开,比如：其实老代里面不是只有一块space,而是有4块space组成,每块space存放着不同的数据(old space,large object space,matedata space,code space)。垃圾回收设计本身就是一个很复杂的程序,有了GC,让开发者可以完全不用担心内存的管理问题。但是适当的了解垃圾回收的原理能够帮助我们更加深入的理解JavaScript的运行环境,也可以帮助我们写出更高效率的代码。</p>\n<p>最后的最后将之前的内存泄漏代码一步步的推演:</p>\n<ol>\n<li>首先在全局作用域中声明了两个变量theThing和replaceThing,其中replaceThing被赋值为一个方法(callable object),然后调用setInterval方法,每隔1000毫秒调用一次replaceThing。</li>\n<li>1000毫秒到了,执行replaceThing,创建一个新的局部作用域,根据hoist,先将方法unused方法声明,然后声明了originThing和c变量。这里特别要注意,<strong>闭包是在方法声明的时候被创建的而不是在方法执行的时候创建的</strong>,所以当声明了unused方法以后,同时创建了一个闭包,里面包含了unused方法使用的局部作用域变量originThing。<strong>另外在V8中一旦作用域有闭包,这个上下文会被绑定到所有方法当中作为闭包,即使这个方法没有使用这个作用域中的任何一个变量</strong>,所以在这里给全局作用域赋值的时候,someMethod作为一个方法,也被绑定一个unused创建的闭包,且被赋值在全局作用域中的theThing上了。</li>\n<li><p>如果这时候开始第一次GC,从全局对象进行Reachable分析:theThing(reachable),replaceThing(reachable),theThing-&gt;longStr(reachable),theThing-&gt;someMethod(reachable),execution stack -&gt; setInterval -&gt; closure -&gt; originThing(reachable)。<br>所有标记完成。此时:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">from</span>-space                                to-space</span><br><span class=\"line\"></span><br><span class=\"line\">theThing         (reachable)                theThing</span><br><span class=\"line\">replaceThing     (reachable)                replaceThing</span><br><span class=\"line\">unused                                      originThing</span><br><span class=\"line\">originThing      (reachable)       =&gt;       longStr  </span><br><span class=\"line\">c                                           someMethod</span><br><span class=\"line\">longStr          (reachable)                </span><br><span class=\"line\">someMethod       (reachable)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在过1000毫秒以后又执行replaceThing,又执行一遍步骤2</p>\n</li>\n<li>第二次GC开始</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">from</span>-space                                to-space                           old-space</span><br><span class=\"line\"></span><br><span class=\"line\">theThing         (reachable)                theThing                             originThing -&gt; theThing</span><br><span class=\"line\">replaceThing     (reachable)                replaceThing                         theThing -&gt; longStr</span><br><span class=\"line\">unused                                      originThing                          theThing -&gt; someMethod</span><br><span class=\"line\">originThing      (reachable)       =&gt;       <span class=\"function\"><span class=\"params\">longStr</span>                    =&gt;</span>        someMethod -&gt; originThing(closure)        </span><br><span class=\"line\">c                                           someMethod</span><br><span class=\"line\">longStr          (reachable)                </span><br><span class=\"line\">someMethod       (reachable)</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>因为闭包一直连着这originThing,导致了old-space中的originThing一直无法释放。随着时间的推移,每个1000毫秒执行一次replaceThing方法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     old-space</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br><span class=\"line\">originThing -&gt; theThing -&gt; longStr &amp; someMethod -&gt; originThing(closure)</span><br></pre></td></tr></table></figure>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>主要导致内存泄漏的原因是</p>\n<p><img src=\"http://img.pandihai.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190708095349.png\" alt=\"闭包是在声明的时候被创建的\"><center><font color=\"gray\" size=\"2\">闭包是在声明的时候被创建的,而不是执行的时候被创建的。</font></center></p>\n<p>然后导致在originalThing还引用着老的theThing,theThing中的someMethod引用着originalThing导致全部都reachable无法释放。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var theThing = null;</span><br><span class=\"line\">var replaceThing = function () &#123;</span><br><span class=\"line\">  var originalThing = theThing;</span><br><span class=\"line\">  var c = &apos;a&apos;</span><br><span class=\"line\">  function unused() &#123;</span><br><span class=\"line\">    if (originalThing) &#123;</span><br><span class=\"line\">      console.log(&quot;hi&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  theThing = &#123;</span><br><span class=\"line\">    longStr: new Array(1000000).join(&apos;*&apos;),</span><br><span class=\"line\">    someMethod: function () &#123;</span><br><span class=\"line\">      console.log(&apos;1111&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  originalThing = null;    //手动释放局部作用域中的变量</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(replaceThing,1000)</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck04levvf000460uck07800vv","category_id":"ck04levvj000660ucf5i3pezf","_id":"ck04levvo000960ucjbvh2lb2"}],"PostTag":[{"post_id":"ck04levvf000460uck07800vv","tag_id":"ck04levvm000760uc9y3rvp6q","_id":"ck04levvo000860ucc1ns0yby"}],"Tag":[{"name":"js","_id":"ck04levvm000760uc9y3rvp6q"}]}}